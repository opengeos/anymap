{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AnyMap","text":"<p>A Python package for creating interactive maps with anywidget and JavaScript mapping libraries</p> <ul> <li>GitHub repo: https://github.com/opengeos/anymap</li> <li>Documentation: https://anymap.gishub.org</li> <li>PyPI: https://pypi.org/project/anymap</li> <li>Conda-forge: https://anaconda.org/conda-forge/anymap</li> <li>Free software: MIT License</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\uddfa\ufe0f Interactive Maps: Create beautiful, interactive maps in Jupyter notebooks</li> <li>\ud83d\udd04 Bidirectional Communication: Full Python \u2194 JavaScript communication</li> <li>\ud83d\udcf1 Multi-cell Support: Render maps in multiple notebook cells without conflicts</li> <li>\ud83c\udfaf MapLibre Integration: Built-in support for MapLibre GL JS</li> <li>\ud83d\udee0\ufe0f Extensible: Easy to add support for other mapping libraries</li> <li>\ud83d\ude80 Familiar API: Similar to ipyleaflet for easy migration</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install anymap\n</code></pre> <pre><code>conda install -c conda-forge anymap\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a basic map\nm = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"600px\"\n)\nm\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#creating-maps","title":"Creating Maps","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a map with custom settings\nm = MapLibreMap(\n    center=[40.7128, -74.0060],  # New York City\n    zoom=13,\n    height=\"500px\",\n    bearing=45,  # Map rotation\n    pitch=60     # 3D tilt\n)\n</code></pre>"},{"location":"#adding-markers","title":"Adding Markers","text":"<pre><code># Add a marker with popup\nm.add_marker(\n    lat=40.7128,\n    lng=-74.0060,\n    popup=\"&lt;h3&gt;New York City&lt;/h3&gt;&lt;p&gt;The Big Apple&lt;/p&gt;\"\n)\n</code></pre>"},{"location":"#working-with-geojson","title":"Working with GeoJSON","text":"<pre><code># Add GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-74.0060, 40.7128]\n            },\n            \"properties\": {\"name\": \"NYC\"}\n        }\n    ]\n}\n\nm.add_geojson_layer(\n    layer_id=\"cities\",\n    geojson_data=geojson_data,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff0000\"\n    }\n)\n</code></pre>"},{"location":"#event-handling","title":"Event Handling","text":"<pre><code>def handle_click(event):\n    lat, lng = event['lngLat']\n    print(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n\nm.on_map_event('click', handle_click)\n</code></pre>"},{"location":"#dynamic-updates","title":"Dynamic Updates","text":"<pre><code># Change map properties\nm.set_center(51.5074, -0.1278)  # London\nm.set_zoom(14)\n\n# Animate to a location\nm.fly_to(48.8566, 2.3522, zoom=15)  # Paris\n</code></pre>"},{"location":"#multi-cell-rendering","title":"Multi-Cell Rendering","text":"<p>AnyMap is designed to work seamlessly across multiple notebook cells:</p> <pre><code># Cell 1\nm = MapLibreMap(center=[0, 0], zoom=2)\nm\n\n# Cell 2 - Same map instance\nm.add_marker(0, 0, popup=\"Origin\")\n\n# Cell 3 - Display again\nm\n</code></pre>"},{"location":"#advanced-features","title":"Advanced Features","text":""},{"location":"#layer-management","title":"Layer Management","text":"<pre><code># Add and remove layers\nm.add_source(\"my-source\", {\n    \"type\": \"geojson\",\n    \"data\": geojson_data\n})\n\nm.add_layer(\"my-layer\", {\n    \"id\": \"my-layer\",\n    \"type\": \"circle\",\n    \"source\": \"my-source\",\n    \"paint\": {\"circle-radius\": 5}\n})\n\n# Remove layers\nm.remove_layer(\"my-layer\")\nm.remove_source(\"my-source\")\n</code></pre>"},{"location":"#custom-javascript-methods","title":"Custom JavaScript Methods","text":"<pre><code># Call any MapLibre GL JS method\nm.call_js_method('easeTo', {\n    'center': [lng, lat],\n    'zoom': 14,\n    'duration': 2000\n})\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Check out the example notebooks in the <code>examples/</code> directory:</p> <ul> <li><code>basic_usage.ipynb</code> - Basic map creation and interaction</li> <li><code>advanced_features.ipynb</code> - Advanced layer management and styling</li> <li><code>multi_cell_test.ipynb</code> - Multi-cell rendering tests</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To set up for development:</p> <pre><code>git clone https://github.com/opengeos/anymap.git\ncd anymap\npip install -e .\n</code></pre> <p>Run tests:</p> <pre><code>python -m unittest tests.test_anymap -v\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>\u2705 MapLibre GL JS backend</li> <li>\u2705 Mapbox GL JS backend</li> <li>\ud83d\udd32 Leaflet backend</li> <li>\ud83d\udd32 OpenLayers backend</li> <li>\ud83d\udd32 DeckGL backend</li> <li>\ud83d\udd32 KeplerGL backend</li> <li>\ud83d\udd32 Cesium backend</li> <li>\ud83d\udd32 Potree backend</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"anymap/","title":"anymap module","text":"<p>Main module for anymap interactive mapping widgets.</p>"},{"location":"anymap/#anymap.anymap.CesiumMap","title":"<code> CesiumMap            (MapWidget)         </code>","text":"<p>Cesium ion implementation of the map widget for 3D globe visualization.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class CesiumMap(MapWidget):\n    \"\"\"Cesium ion implementation of the map widget for 3D globe visualization.\"\"\"\n\n    # Cesium-specific traits\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n    camera_height = traitlets.Float(10000000.0).tag(sync=True)  # 10M meters default\n    heading = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(-90.0).tag(sync=True)  # Looking down\n    roll = traitlets.Float(0.0).tag(sync=True)\n\n    # Cesium viewer options\n    base_layer_picker = traitlets.Bool(True).tag(sync=True)\n    fullscreen_button = traitlets.Bool(True).tag(sync=True)\n    vr_button = traitlets.Bool(False).tag(sync=True)\n    geocoder = traitlets.Bool(True).tag(sync=True)\n    home_button = traitlets.Bool(True).tag(sync=True)\n    info_box = traitlets.Bool(True).tag(sync=True)\n    scene_mode_picker = traitlets.Bool(True).tag(sync=True)\n    selection_indicator = traitlets.Bool(True).tag(sync=True)\n    timeline = traitlets.Bool(False).tag(sync=True)\n    navigation_help_button = traitlets.Bool(False).tag(\n        sync=True\n    )  # Disabled by default to prevent arrows\n    animation = traitlets.Bool(False).tag(sync=True)\n    should_animate = traitlets.Bool(False).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_cesium\n    _css = _css_cesium\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        camera_height: float = 10000000.0,\n        heading: float = 0.0,\n        pitch: float = -90.0,\n        roll: float = 0.0,\n        access_token: str = \"\",\n        base_layer_picker: bool = True,\n        fullscreen_button: bool = True,\n        vr_button: bool = False,\n        geocoder: bool = True,\n        home_button: bool = True,\n        info_box: bool = True,\n        scene_mode_picker: bool = True,\n        selection_indicator: bool = True,\n        timeline: bool = False,\n        navigation_help_button: bool = False,\n        animation: bool = False,\n        should_animate: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize Cesium map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level (used for camera height calculation)\n            width: Widget width\n            height: Widget height\n            camera_height: Camera height above ground in meters\n            heading: Camera heading in degrees (0 = north, 90 = east)\n            pitch: Camera pitch in degrees (-90 = looking down, 0 = horizon)\n            roll: Camera roll in degrees\n            access_token: Cesium ion access token (required for Cesium services).\n                         Get a free token at https://cesium.com/ion/signup\n                         Can also be set via CESIUM_TOKEN environment variable.\n            base_layer_picker: Show base layer picker widget\n            fullscreen_button: Show fullscreen button\n            vr_button: Show VR button\n            geocoder: Show geocoder search widget\n            home_button: Show home button\n            info_box: Show info box when clicking entities\n            scene_mode_picker: Show 3D/2D/Columbus view picker\n            selection_indicator: Show selection indicator\n            timeline: Show timeline widget\n            navigation_help_button: Show navigation help button\n            animation: Show animation widget\n            should_animate: Enable automatic animation\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            camera_height=camera_height,\n            heading=heading,\n            pitch=pitch,\n            roll=roll,\n            access_token=access_token,\n            base_layer_picker=base_layer_picker,\n            fullscreen_button=fullscreen_button,\n            vr_button=vr_button,\n            geocoder=geocoder,\n            home_button=home_button,\n            info_box=info_box,\n            scene_mode_picker=scene_mode_picker,\n            selection_indicator=selection_indicator,\n            timeline=timeline,\n            navigation_help_button=navigation_help_button,\n            animation=animation,\n            should_animate=should_animate,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Cesium access token from environment.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"CESIUM_TOKEN\") or os.environ.get(\"CESIUM_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Cesium access token found. Please set CESIUM_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://cesium.com/ion/signup\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Cesium ion access token.\"\"\"\n        self.access_token = token\n\n    def fly_to(\n        self,\n        latitude: float,\n        longitude: float,\n        height: Optional[float] = None,\n        heading: Optional[float] = None,\n        pitch: Optional[float] = None,\n        roll: Optional[float] = None,\n        duration: float = 3.0,\n    ) -&gt; None:\n        \"\"\"Fly the camera to a specific location.\"\"\"\n        options = {\"latitude\": latitude, \"longitude\": longitude, \"duration\": duration}\n        if height is not None:\n            options[\"height\"] = height\n        if heading is not None:\n            options[\"heading\"] = heading\n        if pitch is not None:\n            options[\"pitch\"] = pitch\n        if roll is not None:\n            options[\"roll\"] = roll\n\n        self.call_js_method(\"flyTo\", options)\n\n    def set_camera_position(\n        self,\n        latitude: float,\n        longitude: float,\n        height: float,\n        heading: float = 0.0,\n        pitch: float = -90.0,\n        roll: float = 0.0,\n    ) -&gt; None:\n        \"\"\"Set camera position immediately.\"\"\"\n        self.center = [latitude, longitude]\n        self.camera_height = height\n        self.heading = heading\n        self.pitch = pitch\n        self.roll = roll\n\n    def add_entity(self, entity_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add an entity to the globe.\"\"\"\n        self.call_js_method(\"addEntity\", entity_config)\n\n    def remove_entity(self, entity_id: str) -&gt; None:\n        \"\"\"Remove an entity from the globe.\"\"\"\n        self.call_js_method(\"removeEntity\", entity_id)\n\n    def add_point(\n        self,\n        latitude: float,\n        longitude: float,\n        height: float = 0.0,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        color: str = \"#ffff00\",\n        pixel_size: int = 10,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a point to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"point_{len(self._layers)}\"\n\n        entity_config = {\n            \"id\": entity_id,\n            \"position\": {\n                \"longitude\": longitude,\n                \"latitude\": latitude,\n                \"height\": height,\n            },\n            \"point\": {\n                \"pixelSize\": pixel_size,\n                \"color\": color,\n                \"outlineColor\": \"#000000\",\n                \"outlineWidth\": 2,\n                \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_billboard(\n        self,\n        latitude: float,\n        longitude: float,\n        image_url: str,\n        height: float = 0.0,\n        scale: float = 1.0,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a billboard (image marker) to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"billboard_{len(self._layers)}\"\n\n        entity_config = {\n            \"id\": entity_id,\n            \"position\": {\n                \"longitude\": longitude,\n                \"latitude\": latitude,\n                \"height\": height,\n            },\n            \"billboard\": {\n                \"image\": image_url,\n                \"scale\": scale,\n                \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_polyline(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"#ff0000\",\n        width: int = 2,\n        clamp_to_ground: bool = True,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a polyline to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"polyline_{len(self._layers)}\"\n\n        # Convert coordinates to Cesium format\n        positions = []\n        for coord in coordinates:\n            if len(coord) &gt;= 2:\n                positions.extend(\n                    [coord[1], coord[0], coord[2] if len(coord) &gt; 2 else 0]\n                )\n\n        entity_config = {\n            \"id\": entity_id,\n            \"polyline\": {\n                \"positions\": positions,\n                \"width\": width,\n                \"material\": color,\n                \"clampToGround\": clamp_to_ground,\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_polygon(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"#0000ff\",\n        outline_color: str = \"#000000\",\n        height: float = 0.0,\n        extrude_height: Optional[float] = None,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a polygon to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"polygon_{len(self._layers)}\"\n\n        # Convert coordinates to Cesium format\n        positions = []\n        for coord in coordinates:\n            if len(coord) &gt;= 2:\n                positions.extend([coord[1], coord[0]])\n\n        entity_config = {\n            \"id\": entity_id,\n            \"polygon\": {\n                \"hierarchy\": positions,\n                \"material\": color,\n                \"outline\": True,\n                \"outlineColor\": outline_color,\n                \"height\": height,\n            },\n        }\n\n        if extrude_height is not None:\n            entity_config[\"polygon\"][\"extrudedHeight\"] = extrude_height\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_data_source(\n        self,\n        source_type: str,\n        data: Union[str, Dict[str, Any]],\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a data source (GeoJSON, KML, CZML) to the globe.\"\"\"\n        config = {\"data\": data, \"options\": options or {}}\n        self.call_js_method(\"addDataSource\", source_type, config)\n\n    def add_geojson(\n        self, geojson_data: Dict[str, Any], options: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Add GeoJSON data to the globe.\"\"\"\n        self.add_data_source(\"geojson\", geojson_data, options)\n\n    def add_kml(self, kml_url: str, options: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Add KML data to the globe.\"\"\"\n        self.add_data_source(\"kml\", kml_url, options)\n\n    def add_czml(\n        self, czml_data: List[Dict[str, Any]], options: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Add CZML data to the globe.\"\"\"\n        self.add_data_source(\"czml\", czml_data, options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set terrain provider for the globe.\"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_cesium_world_terrain(\n        self, request_water_mask: bool = False, request_vertex_normals: bool = False\n    ) -&gt; None:\n        \"\"\"Set Cesium World Terrain as the terrain provider.\"\"\"\n        terrain_config = {\n            \"type\": \"cesium-world-terrain\",\n            \"requestWaterMask\": request_water_mask,\n            \"requestVertexNormals\": request_vertex_normals,\n        }\n        self.set_terrain(terrain_config)\n\n    def set_imagery(self, imagery_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Set imagery provider for the globe.\"\"\"\n        self.call_js_method(\"setImagery\", imagery_config)\n\n    def set_scene_mode_3d(self) -&gt; None:\n        \"\"\"Set scene to 3D mode.\"\"\"\n        self.call_js_method(\"setScene3D\")\n\n    def set_scene_mode_2d(self) -&gt; None:\n        \"\"\"Set scene to 2D mode.\"\"\"\n        self.call_js_method(\"setScene2D\")\n\n    def set_scene_mode_columbus(self) -&gt; None:\n        \"\"\"Set scene to Columbus view (2.5D).\"\"\"\n        self.call_js_method(\"setSceneColumbusView\")\n\n    def enable_lighting(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable globe lighting effects.\"\"\"\n        self.call_js_method(\"enableLighting\", enabled)\n\n    def enable_fog(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable atmospheric fog.\"\"\"\n        self.call_js_method(\"enableFog\", enabled)\n\n    def zoom_to_entity(self, entity_id: str) -&gt; None:\n        \"\"\"Zoom the camera to focus on a specific entity.\"\"\"\n        self.call_js_method(\"zoomToEntity\", entity_id)\n\n    def home(self) -&gt; None:\n        \"\"\"Reset camera to home position.\"\"\"\n        self.call_js_method(\"home\")\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_entities(self) -&gt; None:\n        \"\"\"Clear all entities from the globe.\"\"\"\n        # This would require tracking entities, for now use clear_layers\n        self.clear_layers()\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, width='100%', height='600px', camera_height=10000000.0, heading=0.0, pitch=-90.0, roll=0.0, access_token='', base_layer_picker=True, fullscreen_button=True, vr_button=False, geocoder=True, home_button=True, info_box=True, scene_mode_picker=True, selection_indicator=True, timeline=False, navigation_help_button=False, animation=False, should_animate=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize Cesium map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level (used for camera height calculation)</p> <code>2.0</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>camera_height</code> <code>float</code> <p>Camera height above ground in meters</p> <code>10000000.0</code> <code>heading</code> <code>float</code> <p>Camera heading in degrees (0 = north, 90 = east)</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Camera pitch in degrees (-90 = looking down, 0 = horizon)</p> <code>-90.0</code> <code>roll</code> <code>float</code> <p>Camera roll in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Cesium ion access token (required for Cesium services).          Get a free token at https://cesium.com/ion/signup          Can also be set via CESIUM_TOKEN environment variable.</p> <code>''</code> <code>base_layer_picker</code> <code>bool</code> <p>Show base layer picker widget</p> <code>True</code> <code>fullscreen_button</code> <code>bool</code> <p>Show fullscreen button</p> <code>True</code> <code>vr_button</code> <code>bool</code> <p>Show VR button</p> <code>False</code> <code>geocoder</code> <code>bool</code> <p>Show geocoder search widget</p> <code>True</code> <code>home_button</code> <code>bool</code> <p>Show home button</p> <code>True</code> <code>info_box</code> <code>bool</code> <p>Show info box when clicking entities</p> <code>True</code> <code>scene_mode_picker</code> <code>bool</code> <p>Show 3D/2D/Columbus view picker</p> <code>True</code> <code>selection_indicator</code> <code>bool</code> <p>Show selection indicator</p> <code>True</code> <code>timeline</code> <code>bool</code> <p>Show timeline widget</p> <code>False</code> <code>navigation_help_button</code> <code>bool</code> <p>Show navigation help button</p> <code>False</code> <code>animation</code> <code>bool</code> <p>Show animation widget</p> <code>False</code> <code>should_animate</code> <code>bool</code> <p>Enable automatic animation</p> <code>False</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    camera_height: float = 10000000.0,\n    heading: float = 0.0,\n    pitch: float = -90.0,\n    roll: float = 0.0,\n    access_token: str = \"\",\n    base_layer_picker: bool = True,\n    fullscreen_button: bool = True,\n    vr_button: bool = False,\n    geocoder: bool = True,\n    home_button: bool = True,\n    info_box: bool = True,\n    scene_mode_picker: bool = True,\n    selection_indicator: bool = True,\n    timeline: bool = False,\n    navigation_help_button: bool = False,\n    animation: bool = False,\n    should_animate: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize Cesium map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level (used for camera height calculation)\n        width: Widget width\n        height: Widget height\n        camera_height: Camera height above ground in meters\n        heading: Camera heading in degrees (0 = north, 90 = east)\n        pitch: Camera pitch in degrees (-90 = looking down, 0 = horizon)\n        roll: Camera roll in degrees\n        access_token: Cesium ion access token (required for Cesium services).\n                     Get a free token at https://cesium.com/ion/signup\n                     Can also be set via CESIUM_TOKEN environment variable.\n        base_layer_picker: Show base layer picker widget\n        fullscreen_button: Show fullscreen button\n        vr_button: Show VR button\n        geocoder: Show geocoder search widget\n        home_button: Show home button\n        info_box: Show info box when clicking entities\n        scene_mode_picker: Show 3D/2D/Columbus view picker\n        selection_indicator: Show selection indicator\n        timeline: Show timeline widget\n        navigation_help_button: Show navigation help button\n        animation: Show animation widget\n        should_animate: Enable automatic animation\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        camera_height=camera_height,\n        heading=heading,\n        pitch=pitch,\n        roll=roll,\n        access_token=access_token,\n        base_layer_picker=base_layer_picker,\n        fullscreen_button=fullscreen_button,\n        vr_button=vr_button,\n        geocoder=geocoder,\n        home_button=home_button,\n        info_box=info_box,\n        scene_mode_picker=scene_mode_picker,\n        selection_indicator=selection_indicator,\n        timeline=timeline,\n        navigation_help_button=navigation_help_button,\n        animation=animation,\n        should_animate=should_animate,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_billboard","title":"<code>add_billboard(self, latitude, longitude, image_url, height=0.0, scale=1.0, name=None, description=None, entity_id=None)</code>","text":"<p>Add a billboard (image marker) to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_billboard(\n    self,\n    latitude: float,\n    longitude: float,\n    image_url: str,\n    height: float = 0.0,\n    scale: float = 1.0,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a billboard (image marker) to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"billboard_{len(self._layers)}\"\n\n    entity_config = {\n        \"id\": entity_id,\n        \"position\": {\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"height\": height,\n        },\n        \"billboard\": {\n            \"image\": image_url,\n            \"scale\": scale,\n            \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_czml","title":"<code>add_czml(self, czml_data, options=None)</code>","text":"<p>Add CZML data to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_czml(\n    self, czml_data: List[Dict[str, Any]], options: Optional[Dict[str, Any]] = None\n) -&gt; None:\n    \"\"\"Add CZML data to the globe.\"\"\"\n    self.add_data_source(\"czml\", czml_data, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_data_source","title":"<code>add_data_source(self, source_type, data, options=None)</code>","text":"<p>Add a data source (GeoJSON, KML, CZML) to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_data_source(\n    self,\n    source_type: str,\n    data: Union[str, Dict[str, Any]],\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a data source (GeoJSON, KML, CZML) to the globe.\"\"\"\n    config = {\"data\": data, \"options\": options or {}}\n    self.call_js_method(\"addDataSource\", source_type, config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_entity","title":"<code>add_entity(self, entity_config)</code>","text":"<p>Add an entity to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_entity(self, entity_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add an entity to the globe.\"\"\"\n    self.call_js_method(\"addEntity\", entity_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_geojson","title":"<code>add_geojson(self, geojson_data, options=None)</code>","text":"<p>Add GeoJSON data to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson(\n    self, geojson_data: Dict[str, Any], options: Optional[Dict[str, Any]] = None\n) -&gt; None:\n    \"\"\"Add GeoJSON data to the globe.\"\"\"\n    self.add_data_source(\"geojson\", geojson_data, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_kml","title":"<code>add_kml(self, kml_url, options=None)</code>","text":"<p>Add KML data to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_kml(self, kml_url: str, options: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Add KML data to the globe.\"\"\"\n    self.add_data_source(\"kml\", kml_url, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_point","title":"<code>add_point(self, latitude, longitude, height=0.0, name=None, description=None, color='#ffff00', pixel_size=10, entity_id=None)</code>","text":"<p>Add a point to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_point(\n    self,\n    latitude: float,\n    longitude: float,\n    height: float = 0.0,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    color: str = \"#ffff00\",\n    pixel_size: int = 10,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a point to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"point_{len(self._layers)}\"\n\n    entity_config = {\n        \"id\": entity_id,\n        \"position\": {\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"height\": height,\n        },\n        \"point\": {\n            \"pixelSize\": pixel_size,\n            \"color\": color,\n            \"outlineColor\": \"#000000\",\n            \"outlineWidth\": 2,\n            \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_polygon","title":"<code>add_polygon(self, coordinates, color='#0000ff', outline_color='#000000', height=0.0, extrude_height=None, name=None, description=None, entity_id=None)</code>","text":"<p>Add a polygon to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_polygon(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"#0000ff\",\n    outline_color: str = \"#000000\",\n    height: float = 0.0,\n    extrude_height: Optional[float] = None,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a polygon to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"polygon_{len(self._layers)}\"\n\n    # Convert coordinates to Cesium format\n    positions = []\n    for coord in coordinates:\n        if len(coord) &gt;= 2:\n            positions.extend([coord[1], coord[0]])\n\n    entity_config = {\n        \"id\": entity_id,\n        \"polygon\": {\n            \"hierarchy\": positions,\n            \"material\": color,\n            \"outline\": True,\n            \"outlineColor\": outline_color,\n            \"height\": height,\n        },\n    }\n\n    if extrude_height is not None:\n        entity_config[\"polygon\"][\"extrudedHeight\"] = extrude_height\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_polyline","title":"<code>add_polyline(self, coordinates, color='#ff0000', width=2, clamp_to_ground=True, name=None, description=None, entity_id=None)</code>","text":"<p>Add a polyline to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_polyline(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"#ff0000\",\n    width: int = 2,\n    clamp_to_ground: bool = True,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a polyline to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"polyline_{len(self._layers)}\"\n\n    # Convert coordinates to Cesium format\n    positions = []\n    for coord in coordinates:\n        if len(coord) &gt;= 2:\n            positions.extend(\n                [coord[1], coord[0], coord[2] if len(coord) &gt; 2 else 0]\n            )\n\n    entity_config = {\n        \"id\": entity_id,\n        \"polyline\": {\n            \"positions\": positions,\n            \"width\": width,\n            \"material\": color,\n            \"clampToGround\": clamp_to_ground,\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_entities","title":"<code>clear_entities(self)</code>","text":"<p>Clear all entities from the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_entities(self) -&gt; None:\n    \"\"\"Clear all entities from the globe.\"\"\"\n    # This would require tracking entities, for now use clear_layers\n    self.clear_layers()\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.enable_fog","title":"<code>enable_fog(self, enabled=True)</code>","text":"<p>Enable or disable atmospheric fog.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_fog(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable atmospheric fog.\"\"\"\n    self.call_js_method(\"enableFog\", enabled)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.enable_lighting","title":"<code>enable_lighting(self, enabled=True)</code>","text":"<p>Enable or disable globe lighting effects.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_lighting(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable globe lighting effects.\"\"\"\n    self.call_js_method(\"enableLighting\", enabled)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.fly_to","title":"<code>fly_to(self, latitude, longitude, height=None, heading=None, pitch=None, roll=None, duration=3.0)</code>","text":"<p>Fly the camera to a specific location.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fly_to(\n    self,\n    latitude: float,\n    longitude: float,\n    height: Optional[float] = None,\n    heading: Optional[float] = None,\n    pitch: Optional[float] = None,\n    roll: Optional[float] = None,\n    duration: float = 3.0,\n) -&gt; None:\n    \"\"\"Fly the camera to a specific location.\"\"\"\n    options = {\"latitude\": latitude, \"longitude\": longitude, \"duration\": duration}\n    if height is not None:\n        options[\"height\"] = height\n    if heading is not None:\n        options[\"heading\"] = heading\n    if pitch is not None:\n        options[\"pitch\"] = pitch\n    if roll is not None:\n        options[\"roll\"] = roll\n\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.home","title":"<code>home(self)</code>","text":"<p>Reset camera to home position.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def home(self) -&gt; None:\n    \"\"\"Reset camera to home position.\"\"\"\n    self.call_js_method(\"home\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.remove_entity","title":"<code>remove_entity(self, entity_id)</code>","text":"<p>Remove an entity from the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_entity(self, entity_id: str) -&gt; None:\n    \"\"\"Remove an entity from the globe.\"\"\"\n    self.call_js_method(\"removeEntity\", entity_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Cesium ion access token.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Cesium ion access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_camera_position","title":"<code>set_camera_position(self, latitude, longitude, height, heading=0.0, pitch=-90.0, roll=0.0)</code>","text":"<p>Set camera position immediately.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_camera_position(\n    self,\n    latitude: float,\n    longitude: float,\n    height: float,\n    heading: float = 0.0,\n    pitch: float = -90.0,\n    roll: float = 0.0,\n) -&gt; None:\n    \"\"\"Set camera position immediately.\"\"\"\n    self.center = [latitude, longitude]\n    self.camera_height = height\n    self.heading = heading\n    self.pitch = pitch\n    self.roll = roll\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_cesium_world_terrain","title":"<code>set_cesium_world_terrain(self, request_water_mask=False, request_vertex_normals=False)</code>","text":"<p>Set Cesium World Terrain as the terrain provider.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_cesium_world_terrain(\n    self, request_water_mask: bool = False, request_vertex_normals: bool = False\n) -&gt; None:\n    \"\"\"Set Cesium World Terrain as the terrain provider.\"\"\"\n    terrain_config = {\n        \"type\": \"cesium-world-terrain\",\n        \"requestWaterMask\": request_water_mask,\n        \"requestVertexNormals\": request_vertex_normals,\n    }\n    self.set_terrain(terrain_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_imagery","title":"<code>set_imagery(self, imagery_config)</code>","text":"<p>Set imagery provider for the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_imagery(self, imagery_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Set imagery provider for the globe.\"\"\"\n    self.call_js_method(\"setImagery\", imagery_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_scene_mode_2d","title":"<code>set_scene_mode_2d(self)</code>","text":"<p>Set scene to 2D mode.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_scene_mode_2d(self) -&gt; None:\n    \"\"\"Set scene to 2D mode.\"\"\"\n    self.call_js_method(\"setScene2D\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_scene_mode_3d","title":"<code>set_scene_mode_3d(self)</code>","text":"<p>Set scene to 3D mode.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_scene_mode_3d(self) -&gt; None:\n    \"\"\"Set scene to 3D mode.\"\"\"\n    self.call_js_method(\"setScene3D\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_scene_mode_columbus","title":"<code>set_scene_mode_columbus(self)</code>","text":"<p>Set scene to Columbus view (2.5D).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_scene_mode_columbus(self) -&gt; None:\n    \"\"\"Set scene to Columbus view (2.5D).\"\"\"\n    self.call_js_method(\"setSceneColumbusView\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set terrain provider for the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set terrain provider for the globe.\"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.zoom_to_entity","title":"<code>zoom_to_entity(self, entity_id)</code>","text":"<p>Zoom the camera to focus on a specific entity.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def zoom_to_entity(self, entity_id: str) -&gt; None:\n    \"\"\"Zoom the camera to focus on a specific entity.\"\"\"\n    self.call_js_method(\"zoomToEntity\", entity_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap","title":"<code> DeckGLMap            (MapWidget)         </code>","text":"<p>DeckGL implementation of the map widget for high-performance data visualization.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class DeckGLMap(MapWidget):\n    \"\"\"DeckGL implementation of the map widget for high-performance data visualization.\"\"\"\n\n    # DeckGL-specific traits\n    controller = traitlets.Bool(True).tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    max_zoom = traitlets.Float(20.0).tag(sync=True)\n    min_zoom = traitlets.Float(0.0).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_deck\n    _css = _css_deck\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        controller: bool = True,\n        max_zoom: float = 20.0,\n        min_zoom: float = 0.0,\n        **kwargs,\n    ):\n        \"\"\"Initialize DeckGL map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            controller: Enable map controls (pan, zoom, rotate)\n            max_zoom: Maximum zoom level\n            min_zoom: Minimum zoom level\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            bearing=bearing,\n            pitch=pitch,\n            controller=controller,\n            max_zoom=max_zoom,\n            min_zoom=min_zoom,\n            **kwargs,\n        )\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def set_view_state(\n        self,\n        longitude: Optional[float] = None,\n        latitude: Optional[float] = None,\n        zoom: Optional[float] = None,\n        bearing: Optional[float] = None,\n        pitch: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Set the view state of the map.\"\"\"\n        view_state = {}\n        if longitude is not None:\n            view_state[\"longitude\"] = longitude\n        if latitude is not None:\n            view_state[\"latitude\"] = latitude\n        if zoom is not None:\n            view_state[\"zoom\"] = zoom\n        if bearing is not None:\n            view_state[\"bearing\"] = bearing\n        if pitch is not None:\n            view_state[\"pitch\"] = pitch\n\n        self.call_js_method(\"setViewState\", view_state)\n\n    def add_scatterplot_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_radius: Union[str, int, float] = 100,\n        get_color: Union[str, List[int]] = [255, 0, 0, 255],\n        radius_scale: float = 1.0,\n        radius_min_pixels: int = 1,\n        radius_max_pixels: int = 100,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a scatterplot layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"ScatterplotLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getRadius\": get_radius,\n            \"getFillColor\": get_color,\n            \"radiusScale\": radius_scale,\n            \"radiusMinPixels\": radius_min_pixels,\n            \"radiusMaxPixels\": radius_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_line_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_source_position: str = \"sourcePosition\",\n        get_target_position: str = \"targetPosition\",\n        get_color: Union[str, List[int]] = [0, 255, 0, 255],\n        get_width: Union[str, int, float] = 1,\n        width_scale: float = 1.0,\n        width_min_pixels: int = 1,\n        width_max_pixels: int = 10,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a line layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"LineLayer\",\n            \"data\": data,\n            \"getSourcePosition\": get_source_position,\n            \"getTargetPosition\": get_target_position,\n            \"getColor\": get_color,\n            \"getWidth\": get_width,\n            \"widthScale\": width_scale,\n            \"widthMinPixels\": width_min_pixels,\n            \"widthMaxPixels\": width_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_arc_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_source_position: str = \"sourcePosition\",\n        get_target_position: str = \"targetPosition\",\n        get_source_color: Union[str, List[int]] = [255, 0, 0, 255],\n        get_target_color: Union[str, List[int]] = [0, 255, 0, 255],\n        get_width: Union[str, int, float] = 1,\n        width_scale: float = 1.0,\n        width_min_pixels: int = 1,\n        width_max_pixels: int = 10,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add an arc layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"ArcLayer\",\n            \"data\": data,\n            \"getSourcePosition\": get_source_position,\n            \"getTargetPosition\": get_target_position,\n            \"getSourceColor\": get_source_color,\n            \"getTargetColor\": get_target_color,\n            \"getWidth\": get_width,\n            \"widthScale\": width_scale,\n            \"widthMinPixels\": width_min_pixels,\n            \"widthMaxPixels\": width_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_path_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_path: str = \"path\",\n        get_color: Union[str, List[int]] = [255, 0, 0, 255],\n        get_width: Union[str, int, float] = 1,\n        width_scale: float = 1.0,\n        width_min_pixels: int = 1,\n        width_max_pixels: int = 10,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a path layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"PathLayer\",\n            \"data\": data,\n            \"getPath\": get_path,\n            \"getColor\": get_color,\n            \"getWidth\": get_width,\n            \"widthScale\": width_scale,\n            \"widthMinPixels\": width_min_pixels,\n            \"widthMaxPixels\": width_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_polygon_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_polygon: str = \"polygon\",\n        get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n        get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n        get_line_width: Union[str, int, float] = 1,\n        filled: bool = True,\n        stroked: bool = True,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a polygon layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"PolygonLayer\",\n            \"data\": data,\n            \"getPolygon\": get_polygon,\n            \"getFillColor\": get_fill_color,\n            \"getLineColor\": get_line_color,\n            \"getLineWidth\": get_line_width,\n            \"filled\": filled,\n            \"stroked\": stroked,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        data: Dict[str, Any],\n        get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n        get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n        get_line_width: Union[str, int, float] = 1,\n        get_radius: Union[str, int, float] = 100,\n        filled: bool = True,\n        stroked: bool = True,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"GeoJsonLayer\",\n            \"data\": data,\n            \"getFillColor\": get_fill_color,\n            \"getLineColor\": get_line_color,\n            \"getLineWidth\": get_line_width,\n            \"getRadius\": get_radius,\n            \"filled\": filled,\n            \"stroked\": stroked,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_hexagon_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_weight: Union[str, int, float] = 1,\n        radius: int = 1000,\n        elevation_scale: float = 4,\n        elevation_range: List[int] = [0, 1000],\n        coverage: float = 1.0,\n        color_range: Optional[List[List[int]]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a hexagon layer to the map.\"\"\"\n        if color_range is None:\n            color_range = [\n                [1, 152, 189],\n                [73, 227, 206],\n                [216, 254, 181],\n                [254, 237, 177],\n                [254, 173, 84],\n                [209, 55, 78],\n            ]\n\n        layer_config = {\n            \"type\": \"HexagonLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getWeight\": get_weight,\n            \"radius\": radius,\n            \"elevationScale\": elevation_scale,\n            \"elevationRange\": elevation_range,\n            \"coverage\": coverage,\n            \"colorRange\": color_range,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_grid_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_weight: Union[str, int, float] = 1,\n        cell_size: int = 200,\n        elevation_scale: float = 4,\n        elevation_range: List[int] = [0, 1000],\n        coverage: float = 1.0,\n        color_range: Optional[List[List[int]]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a grid layer to the map.\"\"\"\n        if color_range is None:\n            color_range = [\n                [1, 152, 189],\n                [73, 227, 206],\n                [216, 254, 181],\n                [254, 237, 177],\n                [254, 173, 84],\n                [209, 55, 78],\n            ]\n\n        layer_config = {\n            \"type\": \"GridLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getWeight\": get_weight,\n            \"cellSize\": cell_size,\n            \"elevationScale\": elevation_scale,\n            \"elevationRange\": elevation_range,\n            \"coverage\": coverage,\n            \"colorRange\": color_range,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_heatmap_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_weight: Union[str, int, float] = 1,\n        radius_pixels: int = 60,\n        intensity: float = 1.0,\n        threshold: float = 0.05,\n        color_range: Optional[List[List[int]]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a heatmap layer to the map.\"\"\"\n        if color_range is None:\n            color_range = [\n                [255, 255, 178],\n                [254, 204, 92],\n                [253, 141, 60],\n                [240, 59, 32],\n                [189, 0, 38],\n            ]\n\n        layer_config = {\n            \"type\": \"HeatmapLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getWeight\": get_weight,\n            \"radiusPixels\": radius_pixels,\n            \"intensity\": intensity,\n            \"threshold\": threshold,\n            \"colorRange\": color_range,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_column_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_elevation: Union[str, int, float] = 0,\n        get_fill_color: Union[str, List[int]] = [255, 0, 0, 255],\n        get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n        radius: int = 1000,\n        elevation_scale: float = 1.0,\n        filled: bool = True,\n        stroked: bool = False,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a column layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"ColumnLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getElevation\": get_elevation,\n            \"getFillColor\": get_fill_color,\n            \"getLineColor\": get_line_color,\n            \"radius\": radius,\n            \"elevationScale\": elevation_scale,\n            \"filled\": filled,\n            \"stroked\": stroked,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_text_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_text: str = \"text\",\n        get_color: Union[str, List[int]] = [0, 0, 0, 255],\n        get_size: Union[str, int, float] = 32,\n        get_angle: Union[str, int, float] = 0,\n        font_family: str = \"Monaco, monospace\",\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a text layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"TextLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getText\": get_text,\n            \"getColor\": get_color,\n            \"getSize\": get_size,\n            \"getAngle\": get_angle,\n            \"fontFamily\": font_family,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_icon_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_icon: str = \"icon\",\n        get_color: Union[str, List[int]] = [255, 255, 255, 255],\n        get_size: Union[str, int, float] = 1,\n        size_scale: float = 1.0,\n        icon_atlas: Optional[str] = None,\n        icon_mapping: Optional[Dict[str, Any]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add an icon layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"IconLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getIcon\": get_icon,\n            \"getColor\": get_color,\n            \"getSize\": get_size,\n            \"sizeScale\": size_scale,\n            **kwargs,\n        }\n\n        if icon_atlas:\n            layer_config[\"iconAtlas\"] = icon_atlas\n        if icon_mapping:\n            layer_config[\"iconMapping\"] = icon_mapping\n\n        self.add_layer(layer_id, layer_config)\n\n    def update_layer(self, layer_id: str, **props) -&gt; None:\n        \"\"\"Update properties of an existing layer.\"\"\"\n        self.call_js_method(\"updateLayer\", layer_id, props)\n\n    def fit_bounds(\n        self,\n        bounds: List[List[float]],\n        padding: Union[int, Dict[str, int]] = 20,\n        max_zoom: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Fit the map to given bounds.\n\n        Args:\n            bounds: Bounds in format [[minLng, minLat], [maxLng, maxLat]]\n            padding: Padding around bounds in pixels\n            max_zoom: Maximum zoom level when fitting\n        \"\"\"\n        options = {\"padding\": padding}\n        if max_zoom is not None:\n            options[\"maxZoom\"] = max_zoom\n\n        self.call_js_method(\"fitBounds\", bounds, options)\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers from the map.\"\"\"\n        self.clear_layers()\n\n    def enable_controller(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable map controls.\"\"\"\n        self.controller = enabled\n\n    def set_zoom_range(self, min_zoom: float, max_zoom: float) -&gt; None:\n        \"\"\"Set the zoom range for the map.\"\"\"\n        self.min_zoom = min_zoom\n        self.max_zoom = max_zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, width='100%', height='600px', bearing=0.0, pitch=0.0, controller=True, max_zoom=20.0, min_zoom=0.0, **kwargs)</code>  <code>special</code>","text":"<p>Initialize DeckGL map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>controller</code> <code>bool</code> <p>Enable map controls (pan, zoom, rotate)</p> <code>True</code> <code>max_zoom</code> <code>float</code> <p>Maximum zoom level</p> <code>20.0</code> <code>min_zoom</code> <code>float</code> <p>Minimum zoom level</p> <code>0.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    controller: bool = True,\n    max_zoom: float = 20.0,\n    min_zoom: float = 0.0,\n    **kwargs,\n):\n    \"\"\"Initialize DeckGL map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        controller: Enable map controls (pan, zoom, rotate)\n        max_zoom: Maximum zoom level\n        min_zoom: Minimum zoom level\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        bearing=bearing,\n        pitch=pitch,\n        controller=controller,\n        max_zoom=max_zoom,\n        min_zoom=min_zoom,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_arc_layer","title":"<code>add_arc_layer(self, layer_id, data, get_source_position='sourcePosition', get_target_position='targetPosition', get_source_color=[255, 0, 0, 255], get_target_color=[0, 255, 0, 255], get_width=1, width_scale=1.0, width_min_pixels=1, width_max_pixels=10, **kwargs)</code>","text":"<p>Add an arc layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_arc_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_source_position: str = \"sourcePosition\",\n    get_target_position: str = \"targetPosition\",\n    get_source_color: Union[str, List[int]] = [255, 0, 0, 255],\n    get_target_color: Union[str, List[int]] = [0, 255, 0, 255],\n    get_width: Union[str, int, float] = 1,\n    width_scale: float = 1.0,\n    width_min_pixels: int = 1,\n    width_max_pixels: int = 10,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add an arc layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"ArcLayer\",\n        \"data\": data,\n        \"getSourcePosition\": get_source_position,\n        \"getTargetPosition\": get_target_position,\n        \"getSourceColor\": get_source_color,\n        \"getTargetColor\": get_target_color,\n        \"getWidth\": get_width,\n        \"widthScale\": width_scale,\n        \"widthMinPixels\": width_min_pixels,\n        \"widthMaxPixels\": width_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_column_layer","title":"<code>add_column_layer(self, layer_id, data, get_position='position', get_elevation=0, get_fill_color=[255, 0, 0, 255], get_line_color=[0, 0, 0, 255], radius=1000, elevation_scale=1.0, filled=True, stroked=False, **kwargs)</code>","text":"<p>Add a column layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_column_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_elevation: Union[str, int, float] = 0,\n    get_fill_color: Union[str, List[int]] = [255, 0, 0, 255],\n    get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n    radius: int = 1000,\n    elevation_scale: float = 1.0,\n    filled: bool = True,\n    stroked: bool = False,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a column layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"ColumnLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getElevation\": get_elevation,\n        \"getFillColor\": get_fill_color,\n        \"getLineColor\": get_line_color,\n        \"radius\": radius,\n        \"elevationScale\": elevation_scale,\n        \"filled\": filled,\n        \"stroked\": stroked,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, data, get_fill_color=[255, 0, 0, 128], get_line_color=[0, 0, 0, 255], get_line_width=1, get_radius=100, filled=True, stroked=True, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    data: Dict[str, Any],\n    get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n    get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n    get_line_width: Union[str, int, float] = 1,\n    get_radius: Union[str, int, float] = 100,\n    filled: bool = True,\n    stroked: bool = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"GeoJsonLayer\",\n        \"data\": data,\n        \"getFillColor\": get_fill_color,\n        \"getLineColor\": get_line_color,\n        \"getLineWidth\": get_line_width,\n        \"getRadius\": get_radius,\n        \"filled\": filled,\n        \"stroked\": stroked,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_grid_layer","title":"<code>add_grid_layer(self, layer_id, data, get_position='position', get_weight=1, cell_size=200, elevation_scale=4, elevation_range=[0, 1000], coverage=1.0, color_range=None, **kwargs)</code>","text":"<p>Add a grid layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_grid_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_weight: Union[str, int, float] = 1,\n    cell_size: int = 200,\n    elevation_scale: float = 4,\n    elevation_range: List[int] = [0, 1000],\n    coverage: float = 1.0,\n    color_range: Optional[List[List[int]]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a grid layer to the map.\"\"\"\n    if color_range is None:\n        color_range = [\n            [1, 152, 189],\n            [73, 227, 206],\n            [216, 254, 181],\n            [254, 237, 177],\n            [254, 173, 84],\n            [209, 55, 78],\n        ]\n\n    layer_config = {\n        \"type\": \"GridLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getWeight\": get_weight,\n        \"cellSize\": cell_size,\n        \"elevationScale\": elevation_scale,\n        \"elevationRange\": elevation_range,\n        \"coverage\": coverage,\n        \"colorRange\": color_range,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_heatmap_layer","title":"<code>add_heatmap_layer(self, layer_id, data, get_position='position', get_weight=1, radius_pixels=60, intensity=1.0, threshold=0.05, color_range=None, **kwargs)</code>","text":"<p>Add a heatmap layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_heatmap_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_weight: Union[str, int, float] = 1,\n    radius_pixels: int = 60,\n    intensity: float = 1.0,\n    threshold: float = 0.05,\n    color_range: Optional[List[List[int]]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a heatmap layer to the map.\"\"\"\n    if color_range is None:\n        color_range = [\n            [255, 255, 178],\n            [254, 204, 92],\n            [253, 141, 60],\n            [240, 59, 32],\n            [189, 0, 38],\n        ]\n\n    layer_config = {\n        \"type\": \"HeatmapLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getWeight\": get_weight,\n        \"radiusPixels\": radius_pixels,\n        \"intensity\": intensity,\n        \"threshold\": threshold,\n        \"colorRange\": color_range,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_hexagon_layer","title":"<code>add_hexagon_layer(self, layer_id, data, get_position='position', get_weight=1, radius=1000, elevation_scale=4, elevation_range=[0, 1000], coverage=1.0, color_range=None, **kwargs)</code>","text":"<p>Add a hexagon layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_hexagon_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_weight: Union[str, int, float] = 1,\n    radius: int = 1000,\n    elevation_scale: float = 4,\n    elevation_range: List[int] = [0, 1000],\n    coverage: float = 1.0,\n    color_range: Optional[List[List[int]]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a hexagon layer to the map.\"\"\"\n    if color_range is None:\n        color_range = [\n            [1, 152, 189],\n            [73, 227, 206],\n            [216, 254, 181],\n            [254, 237, 177],\n            [254, 173, 84],\n            [209, 55, 78],\n        ]\n\n    layer_config = {\n        \"type\": \"HexagonLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getWeight\": get_weight,\n        \"radius\": radius,\n        \"elevationScale\": elevation_scale,\n        \"elevationRange\": elevation_range,\n        \"coverage\": coverage,\n        \"colorRange\": color_range,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_icon_layer","title":"<code>add_icon_layer(self, layer_id, data, get_position='position', get_icon='icon', get_color=[255, 255, 255, 255], get_size=1, size_scale=1.0, icon_atlas=None, icon_mapping=None, **kwargs)</code>","text":"<p>Add an icon layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_icon_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_icon: str = \"icon\",\n    get_color: Union[str, List[int]] = [255, 255, 255, 255],\n    get_size: Union[str, int, float] = 1,\n    size_scale: float = 1.0,\n    icon_atlas: Optional[str] = None,\n    icon_mapping: Optional[Dict[str, Any]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add an icon layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"IconLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getIcon\": get_icon,\n        \"getColor\": get_color,\n        \"getSize\": get_size,\n        \"sizeScale\": size_scale,\n        **kwargs,\n    }\n\n    if icon_atlas:\n        layer_config[\"iconAtlas\"] = icon_atlas\n    if icon_mapping:\n        layer_config[\"iconMapping\"] = icon_mapping\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_line_layer","title":"<code>add_line_layer(self, layer_id, data, get_source_position='sourcePosition', get_target_position='targetPosition', get_color=[0, 255, 0, 255], get_width=1, width_scale=1.0, width_min_pixels=1, width_max_pixels=10, **kwargs)</code>","text":"<p>Add a line layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_line_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_source_position: str = \"sourcePosition\",\n    get_target_position: str = \"targetPosition\",\n    get_color: Union[str, List[int]] = [0, 255, 0, 255],\n    get_width: Union[str, int, float] = 1,\n    width_scale: float = 1.0,\n    width_min_pixels: int = 1,\n    width_max_pixels: int = 10,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a line layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"LineLayer\",\n        \"data\": data,\n        \"getSourcePosition\": get_source_position,\n        \"getTargetPosition\": get_target_position,\n        \"getColor\": get_color,\n        \"getWidth\": get_width,\n        \"widthScale\": width_scale,\n        \"widthMinPixels\": width_min_pixels,\n        \"widthMaxPixels\": width_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_path_layer","title":"<code>add_path_layer(self, layer_id, data, get_path='path', get_color=[255, 0, 0, 255], get_width=1, width_scale=1.0, width_min_pixels=1, width_max_pixels=10, **kwargs)</code>","text":"<p>Add a path layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_path_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_path: str = \"path\",\n    get_color: Union[str, List[int]] = [255, 0, 0, 255],\n    get_width: Union[str, int, float] = 1,\n    width_scale: float = 1.0,\n    width_min_pixels: int = 1,\n    width_max_pixels: int = 10,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a path layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"PathLayer\",\n        \"data\": data,\n        \"getPath\": get_path,\n        \"getColor\": get_color,\n        \"getWidth\": get_width,\n        \"widthScale\": width_scale,\n        \"widthMinPixels\": width_min_pixels,\n        \"widthMaxPixels\": width_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_polygon_layer","title":"<code>add_polygon_layer(self, layer_id, data, get_polygon='polygon', get_fill_color=[255, 0, 0, 128], get_line_color=[0, 0, 0, 255], get_line_width=1, filled=True, stroked=True, **kwargs)</code>","text":"<p>Add a polygon layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_polygon_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_polygon: str = \"polygon\",\n    get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n    get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n    get_line_width: Union[str, int, float] = 1,\n    filled: bool = True,\n    stroked: bool = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a polygon layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"PolygonLayer\",\n        \"data\": data,\n        \"getPolygon\": get_polygon,\n        \"getFillColor\": get_fill_color,\n        \"getLineColor\": get_line_color,\n        \"getLineWidth\": get_line_width,\n        \"filled\": filled,\n        \"stroked\": stroked,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_scatterplot_layer","title":"<code>add_scatterplot_layer(self, layer_id, data, get_position='position', get_radius=100, get_color=[255, 0, 0, 255], radius_scale=1.0, radius_min_pixels=1, radius_max_pixels=100, **kwargs)</code>","text":"<p>Add a scatterplot layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_scatterplot_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_radius: Union[str, int, float] = 100,\n    get_color: Union[str, List[int]] = [255, 0, 0, 255],\n    radius_scale: float = 1.0,\n    radius_min_pixels: int = 1,\n    radius_max_pixels: int = 100,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a scatterplot layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"ScatterplotLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getRadius\": get_radius,\n        \"getFillColor\": get_color,\n        \"radiusScale\": radius_scale,\n        \"radiusMinPixels\": radius_min_pixels,\n        \"radiusMaxPixels\": radius_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_text_layer","title":"<code>add_text_layer(self, layer_id, data, get_position='position', get_text='text', get_color=[0, 0, 0, 255], get_size=32, get_angle=0, font_family='Monaco, monospace', **kwargs)</code>","text":"<p>Add a text layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_text_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_text: str = \"text\",\n    get_color: Union[str, List[int]] = [0, 0, 0, 255],\n    get_size: Union[str, int, float] = 32,\n    get_angle: Union[str, int, float] = 0,\n    font_family: str = \"Monaco, monospace\",\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a text layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"TextLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getText\": get_text,\n        \"getColor\": get_color,\n        \"getSize\": get_size,\n        \"getAngle\": get_angle,\n        \"fontFamily\": font_family,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers from the map.\"\"\"\n    self.clear_layers()\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.enable_controller","title":"<code>enable_controller(self, enabled=True)</code>","text":"<p>Enable or disable map controls.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_controller(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable map controls.\"\"\"\n    self.controller = enabled\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=20, max_zoom=None)</code>","text":"<p>Fit the map to given bounds.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>List[List[float]]</code> <p>Bounds in format [[minLng, minLat], [maxLng, maxLat]]</p> required <code>padding</code> <code>Union[int, Dict[str, int]]</code> <p>Padding around bounds in pixels</p> <code>20</code> <code>max_zoom</code> <code>Optional[float]</code> <p>Maximum zoom level when fitting</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(\n    self,\n    bounds: List[List[float]],\n    padding: Union[int, Dict[str, int]] = 20,\n    max_zoom: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Fit the map to given bounds.\n\n    Args:\n        bounds: Bounds in format [[minLng, minLat], [maxLng, maxLat]]\n        padding: Padding around bounds in pixels\n        max_zoom: Maximum zoom level when fitting\n    \"\"\"\n    options = {\"padding\": padding}\n    if max_zoom is not None:\n        options[\"maxZoom\"] = max_zoom\n\n    self.call_js_method(\"fitBounds\", bounds, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_view_state","title":"<code>set_view_state(self, longitude=None, latitude=None, zoom=None, bearing=None, pitch=None)</code>","text":"<p>Set the view state of the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_view_state(\n    self,\n    longitude: Optional[float] = None,\n    latitude: Optional[float] = None,\n    zoom: Optional[float] = None,\n    bearing: Optional[float] = None,\n    pitch: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Set the view state of the map.\"\"\"\n    view_state = {}\n    if longitude is not None:\n        view_state[\"longitude\"] = longitude\n    if latitude is not None:\n        view_state[\"latitude\"] = latitude\n    if zoom is not None:\n        view_state[\"zoom\"] = zoom\n    if bearing is not None:\n        view_state[\"bearing\"] = bearing\n    if pitch is not None:\n        view_state[\"pitch\"] = pitch\n\n    self.call_js_method(\"setViewState\", view_state)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_zoom_range","title":"<code>set_zoom_range(self, min_zoom, max_zoom)</code>","text":"<p>Set the zoom range for the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_zoom_range(self, min_zoom: float, max_zoom: float) -&gt; None:\n    \"\"\"Set the zoom range for the map.\"\"\"\n    self.min_zoom = min_zoom\n    self.max_zoom = max_zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.update_layer","title":"<code>update_layer(self, layer_id, **props)</code>","text":"<p>Update properties of an existing layer.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def update_layer(self, layer_id: str, **props) -&gt; None:\n    \"\"\"Update properties of an existing layer.\"\"\"\n    self.call_js_method(\"updateLayer\", layer_id, props)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap","title":"<code> MapLibreMap            (MapWidget)         </code>","text":"<p>MapLibre GL JS implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapLibreMap(MapWidget):\n    \"\"\"MapLibre GL JS implementation of the map widget.\"\"\"\n\n    # MapLibre-specific traits\n    map_style = traitlets.Unicode(\"https://demotiles.maplibre.org/style.json\").tag(\n        sync=True\n    )\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_maplibre\n    _css = _css_maplibre\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        map_style: str = \"https://demotiles.maplibre.org/style.json\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        **kwargs,\n    ):\n        \"\"\"Initialize MapLibre map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            map_style: MapLibre style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            map_style=map_style,\n            bearing=bearing,\n            pitch=pitch,\n            **kwargs,\n        )\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.map_style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def add_raster_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate HTML template for MapLibre GL JS.\"\"\"\n        # Serialize map state for JavaScript\n        map_state_json = json.dumps(map_state, indent=2)\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }}\n        #map {{\n            width: {map_state['width']};\n            height: {map_state['height']};\n            border: 1px solid #ccc;\n        }}\n        h1 {{\n            margin-top: 0;\n            color: #333;\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{title}&lt;/h1&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Map state from Python\n        const mapState = {map_state_json};\n\n        // Initialize MapLibre map\n        const map = new maplibregl.Map({{\n            container: 'map',\n            style: mapState.map_style || 'https://demotiles.maplibre.org/style.json',\n            center: [mapState.center[1], mapState.center[0]], // Convert [lat, lng] to [lng, lat]\n            zoom: mapState.zoom || 2,\n            bearing: mapState.bearing || 0,\n            pitch: mapState.pitch || 0,\n            antialias: mapState.antialias !== undefined ? mapState.antialias : true\n        }});\n\n        // Restore layers and sources after map loads\n        map.on('load', function() {{\n            // Add sources first\n            const sources = mapState._sources || {{}};\n            Object.entries(sources).forEach(([sourceId, sourceConfig]) =&gt; {{\n                try {{\n                    map.addSource(sourceId, sourceConfig);\n                }} catch (error) {{\n                    console.warn(`Failed to add source ${{sourceId}}:`, error);\n                }}\n            }});\n\n            // Then add layers\n            const layers = mapState._layers || {{}};\n            Object.entries(layers).forEach(([layerId, layerConfig]) =&gt; {{\n                try {{\n                    map.addLayer(layerConfig);\n                }} catch (error) {{\n                    console.warn(`Failed to add layer ${{layerId}}:`, error);\n                }}\n            }});\n        }});\n\n        // Add navigation controls\n        map.addControl(new maplibregl.NavigationControl());\n\n        // Add scale control\n        map.addControl(new maplibregl.ScaleControl());\n\n        // Log map events for debugging\n        map.on('click', function(e) {{\n            console.log('Map clicked at:', e.lngLat);\n        }});\n\n        map.on('load', function() {{\n            console.log('Map loaded successfully');\n        }});\n\n        map.on('error', function(e) {{\n            console.error('Map error:', e);\n        }});\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n        return html_template\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, map_style='https://demotiles.maplibre.org/style.json', width='100%', height='600px', bearing=0.0, pitch=0.0, **kwargs)</code>  <code>special</code>","text":"<p>Initialize MapLibre map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>map_style</code> <code>str</code> <p>MapLibre style URL or style object</p> <code>'https://demotiles.maplibre.org/style.json'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    map_style: str = \"https://demotiles.maplibre.org/style.json\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    **kwargs,\n):\n    \"\"\"Initialize MapLibre map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        map_style: MapLibre style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        map_style=map_style,\n        bearing=bearing,\n        pitch=pitch,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_raster_layer","title":"<code>add_raster_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_raster_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.map_style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget","title":"<code> MapWidget            (AnyWidget)         </code>","text":"<p>Base class for interactive map widgets using anywidget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapWidget(anywidget.AnyWidget):\n    \"\"\"Base class for interactive map widgets using anywidget.\"\"\"\n\n    # Widget traits for communication with JavaScript\n    center = traitlets.List([0.0, 0.0]).tag(sync=True)\n    zoom = traitlets.Float(2.0).tag(sync=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True)\n    style = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Communication traits\n    _js_calls = traitlets.List([]).tag(sync=True)\n    _js_events = traitlets.List([]).tag(sync=True)\n\n    # Internal state\n    _layers = traitlets.Dict({}).tag(sync=True)\n    _sources = traitlets.Dict({}).tag(sync=True)\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the map widget.\"\"\"\n        super().__init__(**kwargs)\n        self._event_handlers = {}\n        self._js_method_counter = 0\n\n    def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n        \"\"\"Call a JavaScript method on the map instance.\"\"\"\n        call_data = {\n            \"id\": self._js_method_counter,\n            \"method\": method_name,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n        self._js_method_counter += 1\n\n        # Trigger sync by creating new list\n        current_calls = list(self._js_calls)\n        current_calls.append(call_data)\n        self._js_calls = current_calls\n\n    def on_map_event(self, event_type: str, callback):\n        \"\"\"Register a callback for map events.\"\"\"\n        if event_type not in self._event_handlers:\n            self._event_handlers[event_type] = []\n        self._event_handlers[event_type].append(callback)\n\n    @traitlets.observe(\"_js_events\")\n    def _handle_js_events(self, change):\n        \"\"\"Handle events from JavaScript.\"\"\"\n        events = change[\"new\"]\n        for event in events:\n            event_type = event.get(\"type\")\n            if event_type in self._event_handlers:\n                for handler in self._event_handlers[event_type]:\n                    handler(event)\n\n    def set_center(self, lat: float, lng: float) -&gt; None:\n        \"\"\"Set the map center.\"\"\"\n        self.center = [lat, lng]\n\n    def set_zoom(self, zoom: float) -&gt; None:\n        \"\"\"Set the map zoom level.\"\"\"\n        self.zoom = zoom\n\n    def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n        \"\"\"Fly to a specific location.\"\"\"\n        options = {\"center\": [lat, lng]}\n        if zoom is not None:\n            options[\"zoom\"] = zoom\n        self.call_js_method(\"flyTo\", options)\n\n    def add_layer(self, layer_id: str, layer_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a layer to the map.\"\"\"\n        # Store layer in local state for persistence\n        current_layers = dict(self._layers)\n        current_layers[layer_id] = layer_config\n        self._layers = current_layers\n\n        self.call_js_method(\"addLayer\", layer_config, layer_id)\n\n    def remove_layer(self, layer_id: str) -&gt; None:\n        \"\"\"Remove a layer from the map.\"\"\"\n        # Remove from local state\n        current_layers = dict(self._layers)\n        if layer_id in current_layers:\n            del current_layers[layer_id]\n            self._layers = current_layers\n\n        self.call_js_method(\"removeLayer\", layer_id)\n\n    def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a data source to the map.\"\"\"\n        # Store source in local state for persistence\n        current_sources = dict(self._sources)\n        current_sources[source_id] = source_config\n        self._sources = current_sources\n\n        self.call_js_method(\"addSource\", source_id, source_config)\n\n    def remove_source(self, source_id: str) -&gt; None:\n        \"\"\"Remove a data source from the map.\"\"\"\n        # Remove from local state\n        current_sources = dict(self._sources)\n        if source_id in current_sources:\n            del current_sources[source_id]\n            self._sources = current_sources\n\n        self.call_js_method(\"removeSource\", source_id)\n\n    def to_html(\n        self,\n        filename: Optional[str] = None,\n        title: str = \"Anymap Export\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        **kwargs,\n    ) -&gt; str:\n        \"\"\"Export the map to a standalone HTML file.\n\n        Args:\n            filename: Optional filename to save the HTML. If None, returns HTML string.\n            title: Title for the HTML page\n            width: Width of the map container\n            height: Height of the map container\n            **kwargs: Additional arguments passed to the HTML template\n\n        Returns:\n            HTML string content\n        \"\"\"\n        # Get the current map state\n        map_state = {\n            \"center\": self.center,\n            \"zoom\": self.zoom,\n            \"width\": width,\n            \"height\": height,\n            \"style\": self.style,\n            \"_layers\": dict(self._layers),\n            \"_sources\": dict(self._sources),\n        }\n\n        # Add class-specific attributes\n        if hasattr(self, \"map_style\"):\n            map_state[\"map_style\"] = self.map_style\n        if hasattr(self, \"bearing\"):\n            map_state[\"bearing\"] = self.bearing\n        if hasattr(self, \"pitch\"):\n            map_state[\"pitch\"] = self.pitch\n        if hasattr(self, \"antialias\"):\n            map_state[\"antialias\"] = self.antialias\n        if hasattr(self, \"access_token\"):\n            map_state[\"access_token\"] = self.access_token\n\n        # Generate HTML content\n        html_content = self._generate_html_template(map_state, title, **kwargs)\n\n        # Save to file if filename is provided\n        if filename:\n            with open(filename, \"w\", encoding=\"utf-8\") as f:\n                f.write(html_content)\n\n        return html_content\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate the HTML template with map state.\n\n        This method should be overridden by subclasses to provide library-specific templates.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement _generate_html_template\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the map widget.\"\"\"\n    super().__init__(**kwargs)\n    self._event_handlers = {}\n    self._js_method_counter = 0\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.add_layer","title":"<code>add_layer(self, layer_id, layer_config)</code>","text":"<p>Add a layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_layer(self, layer_id: str, layer_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a layer to the map.\"\"\"\n    # Store layer in local state for persistence\n    current_layers = dict(self._layers)\n    current_layers[layer_id] = layer_config\n    self._layers = current_layers\n\n    self.call_js_method(\"addLayer\", layer_config, layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.add_source","title":"<code>add_source(self, source_id, source_config)</code>","text":"<p>Add a data source to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a data source to the map.\"\"\"\n    # Store source in local state for persistence\n    current_sources = dict(self._sources)\n    current_sources[source_id] = source_config\n    self._sources = current_sources\n\n    self.call_js_method(\"addSource\", source_id, source_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.call_js_method","title":"<code>call_js_method(self, method_name, *args, **kwargs)</code>","text":"<p>Call a JavaScript method on the map instance.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n    \"\"\"Call a JavaScript method on the map instance.\"\"\"\n    call_data = {\n        \"id\": self._js_method_counter,\n        \"method\": method_name,\n        \"args\": args,\n        \"kwargs\": kwargs,\n    }\n    self._js_method_counter += 1\n\n    # Trigger sync by creating new list\n    current_calls = list(self._js_calls)\n    current_calls.append(call_data)\n    self._js_calls = current_calls\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.fly_to","title":"<code>fly_to(self, lat, lng, zoom=None)</code>","text":"<p>Fly to a specific location.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n    \"\"\"Fly to a specific location.\"\"\"\n    options = {\"center\": [lat, lng]}\n    if zoom is not None:\n        options[\"zoom\"] = zoom\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.on_map_event","title":"<code>on_map_event(self, event_type, callback)</code>","text":"<p>Register a callback for map events.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def on_map_event(self, event_type: str, callback):\n    \"\"\"Register a callback for map events.\"\"\"\n    if event_type not in self._event_handlers:\n        self._event_handlers[event_type] = []\n    self._event_handlers[event_type].append(callback)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.remove_layer","title":"<code>remove_layer(self, layer_id)</code>","text":"<p>Remove a layer from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_layer(self, layer_id: str) -&gt; None:\n    \"\"\"Remove a layer from the map.\"\"\"\n    # Remove from local state\n    current_layers = dict(self._layers)\n    if layer_id in current_layers:\n        del current_layers[layer_id]\n        self._layers = current_layers\n\n    self.call_js_method(\"removeLayer\", layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.remove_source","title":"<code>remove_source(self, source_id)</code>","text":"<p>Remove a data source from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_source(self, source_id: str) -&gt; None:\n    \"\"\"Remove a data source from the map.\"\"\"\n    # Remove from local state\n    current_sources = dict(self._sources)\n    if source_id in current_sources:\n        del current_sources[source_id]\n        self._sources = current_sources\n\n    self.call_js_method(\"removeSource\", source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.set_center","title":"<code>set_center(self, lat, lng)</code>","text":"<p>Set the map center.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_center(self, lat: float, lng: float) -&gt; None:\n    \"\"\"Set the map center.\"\"\"\n    self.center = [lat, lng]\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.set_zoom","title":"<code>set_zoom(self, zoom)</code>","text":"<p>Set the map zoom level.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_zoom(self, zoom: float) -&gt; None:\n    \"\"\"Set the map zoom level.\"\"\"\n    self.zoom = zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.to_html","title":"<code>to_html(self, filename=None, title='Anymap Export', width='100%', height='600px', **kwargs)</code>","text":"<p>Export the map to a standalone HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Optional[str]</code> <p>Optional filename to save the HTML. If None, returns HTML string.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title for the HTML page</p> <code>'Anymap Export'</code> <code>width</code> <code>str</code> <p>Width of the map container</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Height of the map container</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional arguments passed to the HTML template</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML string content</p> Source code in <code>anymap/anymap.py</code> <pre><code>def to_html(\n    self,\n    filename: Optional[str] = None,\n    title: str = \"Anymap Export\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    **kwargs,\n) -&gt; str:\n    \"\"\"Export the map to a standalone HTML file.\n\n    Args:\n        filename: Optional filename to save the HTML. If None, returns HTML string.\n        title: Title for the HTML page\n        width: Width of the map container\n        height: Height of the map container\n        **kwargs: Additional arguments passed to the HTML template\n\n    Returns:\n        HTML string content\n    \"\"\"\n    # Get the current map state\n    map_state = {\n        \"center\": self.center,\n        \"zoom\": self.zoom,\n        \"width\": width,\n        \"height\": height,\n        \"style\": self.style,\n        \"_layers\": dict(self._layers),\n        \"_sources\": dict(self._sources),\n    }\n\n    # Add class-specific attributes\n    if hasattr(self, \"map_style\"):\n        map_state[\"map_style\"] = self.map_style\n    if hasattr(self, \"bearing\"):\n        map_state[\"bearing\"] = self.bearing\n    if hasattr(self, \"pitch\"):\n        map_state[\"pitch\"] = self.pitch\n    if hasattr(self, \"antialias\"):\n        map_state[\"antialias\"] = self.antialias\n    if hasattr(self, \"access_token\"):\n        map_state[\"access_token\"] = self.access_token\n\n    # Generate HTML content\n    html_content = self._generate_html_template(map_state, title, **kwargs)\n\n    # Save to file if filename is provided\n    if filename:\n        with open(filename, \"w\", encoding=\"utf-8\") as f:\n            f.write(html_content)\n\n    return html_content\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap","title":"<code> MapboxMap            (MapWidget)         </code>","text":"<p>Mapbox GL JS implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapboxMap(MapWidget):\n    \"\"\"Mapbox GL JS implementation of the map widget.\"\"\"\n\n    # Mapbox-specific traits\n    map_style = traitlets.Unicode(\"mapbox://styles/mapbox/streets-v12\").tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_mapbox\n    _css = _css_mapbox\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        map_style: str = \"mapbox://styles/mapbox/streets-v12\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        access_token: str = \"\",\n        **kwargs,\n    ):\n        \"\"\"Initialize Mapbox map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            map_style: Mapbox style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            access_token: Mapbox access token (required for Mapbox services).\n                         Get a free token at https://account.mapbox.com/access-tokens/\n                         Can also be set via MAPBOX_TOKEN environment variable.\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            map_style=map_style,\n            bearing=bearing,\n            pitch=pitch,\n            access_token=access_token,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Mapbox access token from environment or return demo token.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"MAPBOX_TOKEN\") or os.environ.get(\"MAPBOX_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Mapbox access token.\"\"\"\n        self.access_token = token\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.map_style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def add_raster_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_control(\n        self,\n        control_type: str,\n        position: str = \"top-right\",\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a control to the map.\n\n        Args:\n            control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            options: Additional options for the control\n        \"\"\"\n        control_options = options or {}\n        control_options[\"position\"] = position\n        self.call_js_method(\"addControl\", control_type, control_options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set 3D terrain on the map.\n\n        Args:\n            terrain_config: Terrain configuration dict, or None to remove terrain\n        \"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set atmospheric fog on the map.\n\n        Args:\n            fog_config: Fog configuration dict, or None to remove fog\n        \"\"\"\n        self.call_js_method(\"setFog\", fog_config)\n\n    def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n        \"\"\"Add 3D buildings layer to the map.\"\"\"\n        # Add the layer for 3D buildings\n        layer_config = {\n            \"id\": layer_id,\n            \"source\": \"composite\",\n            \"source-layer\": \"building\",\n            \"filter\": [\"==\", \"extrude\", \"true\"],\n            \"type\": \"fill-extrusion\",\n            \"minzoom\": 15,\n            \"paint\": {\n                \"fill-extrusion-color\": \"#aaa\",\n                \"fill-extrusion-height\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"height\"],\n                ],\n                \"fill-extrusion-base\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"min_height\"],\n                ],\n                \"fill-extrusion-opacity\": 0.6,\n            },\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate HTML template for Mapbox GL JS.\"\"\"\n        # Serialize map state for JavaScript\n        map_state_json = json.dumps(map_state, indent=2)\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }}\n        #map {{\n            width: {map_state['width']};\n            height: {map_state['height']};\n            border: 1px solid #ccc;\n        }}\n        h1 {{\n            margin-top: 0;\n            color: #333;\n        }}\n        .access-token-warning {{\n            background-color: #fff3cd;\n            border: 1px solid #ffeaa7;\n            color: #856404;\n            padding: 10px;\n            margin-bottom: 20px;\n            border-radius: 4px;\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{title}&lt;/h1&gt;\n    {\"&lt;div class='access-token-warning'&gt;Warning: This map requires a Mapbox access token. Please add your token to the mapboxgl.accessToken property.&lt;/div&gt;\" if not map_state.get('access_token') else \"\"}\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Map state from Python\n        const mapState = {map_state_json};\n\n        // Set Mapbox access token\n        mapboxgl.accessToken = mapState.access_token || '';\n\n        // Initialize Mapbox map\n        const map = new mapboxgl.Map({{\n            container: 'map',\n            style: mapState.map_style || 'mapbox://styles/mapbox/streets-v12',\n            center: [mapState.center[1], mapState.center[0]], // Convert [lat, lng] to [lng, lat]\n            zoom: mapState.zoom || 2,\n            bearing: mapState.bearing || 0,\n            pitch: mapState.pitch || 0,\n            antialias: mapState.antialias !== undefined ? mapState.antialias : true\n        }});\n\n        // Restore layers and sources after map loads\n        map.on('load', function() {{\n            // Add sources first\n            const sources = mapState._sources || {{}};\n            Object.entries(sources).forEach(([sourceId, sourceConfig]) =&gt; {{\n                try {{\n                    map.addSource(sourceId, sourceConfig);\n                }} catch (error) {{\n                    console.warn(`Failed to add source ${{sourceId}}:`, error);\n                }}\n            }});\n\n            // Then add layers\n            const layers = mapState._layers || {{}};\n            Object.entries(layers).forEach(([layerId, layerConfig]) =&gt; {{\n                try {{\n                    map.addLayer(layerConfig);\n                }} catch (error) {{\n                    console.warn(`Failed to add layer ${{layerId}}:`, error);\n                }}\n            }});\n        }});\n\n        // Add navigation controls\n        map.addControl(new mapboxgl.NavigationControl());\n\n        // Add scale control\n        map.addControl(new mapboxgl.ScaleControl());\n\n        // Log map events for debugging\n        map.on('click', function(e) {{\n            console.log('Map clicked at:', e.lngLat);\n        }});\n\n        map.on('load', function() {{\n            console.log('Map loaded successfully');\n        }});\n\n        map.on('error', function(e) {{\n            console.error('Map error:', e);\n        }});\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n        return html_template\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, map_style='mapbox://styles/mapbox/streets-v12', width='100%', height='600px', bearing=0.0, pitch=0.0, access_token='', **kwargs)</code>  <code>special</code>","text":"<p>Initialize Mapbox map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>map_style</code> <code>str</code> <p>Mapbox style URL or style object</p> <code>'mapbox://styles/mapbox/streets-v12'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Mapbox access token (required for Mapbox services).          Get a free token at https://account.mapbox.com/access-tokens/          Can also be set via MAPBOX_TOKEN environment variable.</p> <code>''</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    map_style: str = \"mapbox://styles/mapbox/streets-v12\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    access_token: str = \"\",\n    **kwargs,\n):\n    \"\"\"Initialize Mapbox map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        map_style: Mapbox style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        access_token: Mapbox access token (required for Mapbox services).\n                     Get a free token at https://account.mapbox.com/access-tokens/\n                     Can also be set via MAPBOX_TOKEN environment variable.\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        map_style=map_style,\n        bearing=bearing,\n        pitch=pitch,\n        access_token=access_token,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_3d_buildings","title":"<code>add_3d_buildings(self, layer_id='3d-buildings')</code>","text":"<p>Add 3D buildings layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n    \"\"\"Add 3D buildings layer to the map.\"\"\"\n    # Add the layer for 3D buildings\n    layer_config = {\n        \"id\": layer_id,\n        \"source\": \"composite\",\n        \"source-layer\": \"building\",\n        \"filter\": [\"==\", \"extrude\", \"true\"],\n        \"type\": \"fill-extrusion\",\n        \"minzoom\": 15,\n        \"paint\": {\n            \"fill-extrusion-color\": \"#aaa\",\n            \"fill-extrusion-height\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"height\"],\n            ],\n            \"fill-extrusion-base\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"min_height\"],\n            ],\n            \"fill-extrusion-opacity\": 0.6,\n        },\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_control","title":"<code>add_control(self, control_type, position='top-right', options=None)</code>","text":"<p>Add a control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')</p> required <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the control</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def add_control(\n    self,\n    control_type: str,\n    position: str = \"top-right\",\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a control to the map.\n\n    Args:\n        control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        options: Additional options for the control\n    \"\"\"\n    control_options = options or {}\n    control_options[\"position\"] = position\n    self.call_js_method(\"addControl\", control_type, control_options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_raster_layer","title":"<code>add_raster_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_raster_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Mapbox access token.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Mapbox access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_fog","title":"<code>set_fog(self, fog_config=None)</code>","text":"<p>Set atmospheric fog on the map.</p> <p>Parameters:</p> Name Type Description Default <code>fog_config</code> <code>Optional[Dict[str, Any]]</code> <p>Fog configuration dict, or None to remove fog</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set atmospheric fog on the map.\n\n    Args:\n        fog_config: Fog configuration dict, or None to remove fog\n    \"\"\"\n    self.call_js_method(\"setFog\", fog_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.map_style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set 3D terrain on the map.</p> <p>Parameters:</p> Name Type Description Default <code>terrain_config</code> <code>Optional[Dict[str, Any]]</code> <p>Terrain configuration dict, or None to remove terrain</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set 3D terrain on the map.\n\n    Args:\n        terrain_config: Terrain configuration dict, or None to remove terrain\n    \"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap","title":"<code> PotreeMap            (MapWidget)         </code>","text":"<p>Potree point cloud viewer implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class PotreeMap(MapWidget):\n    \"\"\"Potree point cloud viewer implementation of the map widget.\"\"\"\n\n    # Potree-specific traits\n    point_cloud_url = traitlets.Unicode(\"\").tag(sync=True)\n    point_size = traitlets.Float(1.0).tag(sync=True)\n    point_size_type = traitlets.Unicode(\"adaptive\").tag(\n        sync=True\n    )  # \"fixed\", \"adaptive\", \"attenuation\"\n    point_shape = traitlets.Unicode(\"square\").tag(sync=True)  # \"square\", \"circle\"\n    min_node_size = traitlets.Float(100.0).tag(sync=True)\n    show_grid = traitlets.Bool(False).tag(sync=True)\n    grid_size = traitlets.Float(10.0).tag(sync=True)\n    grid_color = traitlets.Unicode(\"#aaaaaa\").tag(sync=True)\n    background_color = traitlets.Unicode(\"#000000\").tag(sync=True)\n    edl_enabled = traitlets.Bool(True).tag(sync=True)  # Eye Dome Lighting\n    edl_radius = traitlets.Float(1.0).tag(sync=True)\n    edl_strength = traitlets.Float(1.0).tag(sync=True)\n\n    # Camera controls\n    camera_position = traitlets.List([0.0, 0.0, 10.0]).tag(sync=True)\n    camera_target = traitlets.List([0.0, 0.0, 0.0]).tag(sync=True)\n    fov = traitlets.Float(60.0).tag(sync=True)\n    near_clip = traitlets.Float(0.1).tag(sync=True)\n    far_clip = traitlets.Float(1000.0).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_potree\n    _css = _css_potree\n\n    def __init__(\n        self,\n        point_cloud_url: str = \"\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        point_size: float = 1.0,\n        point_size_type: str = \"adaptive\",\n        point_shape: str = \"square\",\n        camera_position: List[float] = [0.0, 0.0, 10.0],\n        camera_target: List[float] = [0.0, 0.0, 0.0],\n        fov: float = 60.0,\n        background_color: str = \"#000000\",\n        edl_enabled: bool = True,\n        show_grid: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize Potree map widget.\n\n        Args:\n            point_cloud_url: URL to the point cloud metadata.json file\n            width: Widget width\n            height: Widget height\n            point_size: Size of rendered points\n            point_size_type: How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")\n            point_shape: Shape of rendered points (\"square\", \"circle\")\n            camera_position: Initial camera position [x, y, z]\n            camera_target: Camera look-at target [x, y, z]\n            fov: Field of view in degrees\n            background_color: Background color of the viewer\n            edl_enabled: Enable Eye Dome Lighting for better depth perception\n            show_grid: Show coordinate grid\n        \"\"\"\n        super().__init__(\n            width=width,\n            height=height,\n            point_cloud_url=point_cloud_url,\n            point_size=point_size,\n            point_size_type=point_size_type,\n            point_shape=point_shape,\n            camera_position=camera_position,\n            camera_target=camera_target,\n            fov=fov,\n            background_color=background_color,\n            edl_enabled=edl_enabled,\n            show_grid=show_grid,\n            **kwargs,\n        )\n\n    def load_point_cloud(\n        self, point_cloud_url: str, point_cloud_name: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"Load a point cloud from URL.\n\n        Args:\n            point_cloud_url: URL to the point cloud metadata.json file\n            point_cloud_name: Optional name for the point cloud\n        \"\"\"\n        self.point_cloud_url = point_cloud_url\n        options = {\"url\": point_cloud_url}\n        if point_cloud_name:\n            options[\"name\"] = point_cloud_name\n        self.call_js_method(\"loadPointCloud\", options)\n\n    def set_point_size(self, size: float) -&gt; None:\n        \"\"\"Set the point size.\"\"\"\n        self.point_size = size\n\n    def set_point_size_type(self, size_type: str) -&gt; None:\n        \"\"\"Set the point size type.\n\n        Args:\n            size_type: \"fixed\", \"adaptive\", or \"attenuation\"\n        \"\"\"\n        if size_type not in [\"fixed\", \"adaptive\", \"attenuation\"]:\n            raise ValueError(\"size_type must be 'fixed', 'adaptive', or 'attenuation'\")\n        self.point_size_type = size_type\n\n    def set_point_shape(self, shape: str) -&gt; None:\n        \"\"\"Set the point shape.\n\n        Args:\n            shape: \"square\" or \"circle\"\n        \"\"\"\n        if shape not in [\"square\", \"circle\"]:\n            raise ValueError(\"shape must be 'square' or 'circle'\")\n        self.point_shape = shape\n\n    def set_camera_position(\n        self, position: List[float], target: Optional[List[float]] = None\n    ) -&gt; None:\n        \"\"\"Set camera position and optionally target.\n\n        Args:\n            position: Camera position [x, y, z]\n            target: Camera target [x, y, z] (optional)\n        \"\"\"\n        self.camera_position = position\n        if target:\n            self.camera_target = target\n\n    def fit_to_screen(self) -&gt; None:\n        \"\"\"Fit the point cloud to the screen.\"\"\"\n        self.call_js_method(\"fitToScreen\")\n\n    def enable_edl(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable Eye Dome Lighting.\n\n        Args:\n            enabled: Whether to enable EDL\n        \"\"\"\n        self.edl_enabled = enabled\n\n    def set_edl_settings(self, radius: float = 1.0, strength: float = 1.0) -&gt; None:\n        \"\"\"Set Eye Dome Lighting parameters.\n\n        Args:\n            radius: EDL radius\n            strength: EDL strength\n        \"\"\"\n        self.edl_radius = radius\n        self.edl_strength = strength\n\n    def show_coordinate_grid(\n        self, show: bool = True, size: float = 10.0, color: str = \"#aaaaaa\"\n    ) -&gt; None:\n        \"\"\"Show or hide coordinate grid.\n\n        Args:\n            show: Whether to show the grid\n            size: Grid size\n            color: Grid color\n        \"\"\"\n        self.show_grid = show\n        self.grid_size = size\n        self.grid_color = color\n\n    def set_background_color(self, color: str) -&gt; None:\n        \"\"\"Set the background color.\n\n        Args:\n            color: Background color (hex format like \"#000000\")\n        \"\"\"\n        self.background_color = color\n\n    def clear_point_clouds(self) -&gt; None:\n        \"\"\"Clear all point clouds from the viewer.\"\"\"\n        self.call_js_method(\"clearPointClouds\")\n\n    def get_camera_position(self) -&gt; List[float]:\n        \"\"\"Get current camera position.\"\"\"\n        return list(self.camera_position)\n\n    def get_camera_target(self) -&gt; List[float]:\n        \"\"\"Get current camera target.\"\"\"\n        return list(self.camera_target)\n\n    def take_screenshot(self) -&gt; None:\n        \"\"\"Take a screenshot of the current view.\"\"\"\n        self.call_js_method(\"takeScreenshot\")\n\n    def set_fov(self, fov: float) -&gt; None:\n        \"\"\"Set field of view.\n\n        Args:\n            fov: Field of view in degrees\n        \"\"\"\n        self.fov = fov\n\n    def set_clip_distances(self, near: float, far: float) -&gt; None:\n        \"\"\"Set near and far clipping distances.\n\n        Args:\n            near: Near clipping distance\n            far: Far clipping distance\n        \"\"\"\n        self.near_clip = near\n        self.far_clip = far\n\n    def add_measurement(self, measurement_type: str = \"distance\") -&gt; None:\n        \"\"\"Add measurement tool.\n\n        Args:\n            measurement_type: Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")\n        \"\"\"\n        self.call_js_method(\"addMeasurement\", measurement_type)\n\n    def clear_measurements(self) -&gt; None:\n        \"\"\"Clear all measurements.\"\"\"\n        self.call_js_method(\"clearMeasurements\")\n\n    def set_quality(self, quality: str = \"medium\") -&gt; None:\n        \"\"\"Set rendering quality.\n\n        Args:\n            quality: Rendering quality (\"low\", \"medium\", \"high\")\n        \"\"\"\n        if quality not in [\"low\", \"medium\", \"high\"]:\n            raise ValueError(\"quality must be 'low', 'medium', or 'high'\")\n        self.call_js_method(\"setQuality\", quality)\n\n    def load_multiple_point_clouds(self, point_clouds: List[Dict[str, str]]) -&gt; None:\n        \"\"\"Load multiple point clouds.\n\n        Args:\n            point_clouds: List of point cloud configs with 'url' and optional 'name' keys\n        \"\"\"\n        self.call_js_method(\"loadMultiplePointClouds\", point_clouds)\n\n    def set_classification_visibility(self, classifications: Dict[int, bool]) -&gt; None:\n        \"\"\"Set visibility of point classifications.\n\n        Args:\n            classifications: Dict mapping classification codes to visibility\n        \"\"\"\n        self.call_js_method(\"setClassificationVisibility\", classifications)\n\n    def filter_by_elevation(\n        self,\n        min_elevation: Optional[float] = None,\n        max_elevation: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Filter points by elevation.\n\n        Args:\n            min_elevation: Minimum elevation to show\n            max_elevation: Maximum elevation to show\n        \"\"\"\n        options = {}\n        if min_elevation is not None:\n            options[\"min\"] = min_elevation\n        if max_elevation is not None:\n            options[\"max\"] = max_elevation\n        self.call_js_method(\"filterByElevation\", options)\n\n    def clear_filters(self) -&gt; None:\n        \"\"\"Clear all filters.\"\"\"\n        self.call_js_method(\"clearFilters\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.__init__","title":"<code>__init__(self, point_cloud_url='', width='100%', height='600px', point_size=1.0, point_size_type='adaptive', point_shape='square', camera_position=[0.0, 0.0, 10.0], camera_target=[0.0, 0.0, 0.0], fov=60.0, background_color='#000000', edl_enabled=True, show_grid=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize Potree map widget.</p> <p>Parameters:</p> Name Type Description Default <code>point_cloud_url</code> <code>str</code> <p>URL to the point cloud metadata.json file</p> <code>''</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>point_size</code> <code>float</code> <p>Size of rendered points</p> <code>1.0</code> <code>point_size_type</code> <code>str</code> <p>How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")</p> <code>'adaptive'</code> <code>point_shape</code> <code>str</code> <p>Shape of rendered points (\"square\", \"circle\")</p> <code>'square'</code> <code>camera_position</code> <code>List[float]</code> <p>Initial camera position [x, y, z]</p> <code>[0.0, 0.0, 10.0]</code> <code>camera_target</code> <code>List[float]</code> <p>Camera look-at target [x, y, z]</p> <code>[0.0, 0.0, 0.0]</code> <code>fov</code> <code>float</code> <p>Field of view in degrees</p> <code>60.0</code> <code>background_color</code> <code>str</code> <p>Background color of the viewer</p> <code>'#000000'</code> <code>edl_enabled</code> <code>bool</code> <p>Enable Eye Dome Lighting for better depth perception</p> <code>True</code> <code>show_grid</code> <code>bool</code> <p>Show coordinate grid</p> <code>False</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    point_cloud_url: str = \"\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    point_size: float = 1.0,\n    point_size_type: str = \"adaptive\",\n    point_shape: str = \"square\",\n    camera_position: List[float] = [0.0, 0.0, 10.0],\n    camera_target: List[float] = [0.0, 0.0, 0.0],\n    fov: float = 60.0,\n    background_color: str = \"#000000\",\n    edl_enabled: bool = True,\n    show_grid: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize Potree map widget.\n\n    Args:\n        point_cloud_url: URL to the point cloud metadata.json file\n        width: Widget width\n        height: Widget height\n        point_size: Size of rendered points\n        point_size_type: How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")\n        point_shape: Shape of rendered points (\"square\", \"circle\")\n        camera_position: Initial camera position [x, y, z]\n        camera_target: Camera look-at target [x, y, z]\n        fov: Field of view in degrees\n        background_color: Background color of the viewer\n        edl_enabled: Enable Eye Dome Lighting for better depth perception\n        show_grid: Show coordinate grid\n    \"\"\"\n    super().__init__(\n        width=width,\n        height=height,\n        point_cloud_url=point_cloud_url,\n        point_size=point_size,\n        point_size_type=point_size_type,\n        point_shape=point_shape,\n        camera_position=camera_position,\n        camera_target=camera_target,\n        fov=fov,\n        background_color=background_color,\n        edl_enabled=edl_enabled,\n        show_grid=show_grid,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.add_measurement","title":"<code>add_measurement(self, measurement_type='distance')</code>","text":"<p>Add measurement tool.</p> <p>Parameters:</p> Name Type Description Default <code>measurement_type</code> <code>str</code> <p>Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")</p> <code>'distance'</code> Source code in <code>anymap/anymap.py</code> <pre><code>def add_measurement(self, measurement_type: str = \"distance\") -&gt; None:\n    \"\"\"Add measurement tool.\n\n    Args:\n        measurement_type: Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")\n    \"\"\"\n    self.call_js_method(\"addMeasurement\", measurement_type)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.clear_filters","title":"<code>clear_filters(self)</code>","text":"<p>Clear all filters.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_filters(self) -&gt; None:\n    \"\"\"Clear all filters.\"\"\"\n    self.call_js_method(\"clearFilters\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.clear_measurements","title":"<code>clear_measurements(self)</code>","text":"<p>Clear all measurements.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_measurements(self) -&gt; None:\n    \"\"\"Clear all measurements.\"\"\"\n    self.call_js_method(\"clearMeasurements\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.clear_point_clouds","title":"<code>clear_point_clouds(self)</code>","text":"<p>Clear all point clouds from the viewer.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_point_clouds(self) -&gt; None:\n    \"\"\"Clear all point clouds from the viewer.\"\"\"\n    self.call_js_method(\"clearPointClouds\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.enable_edl","title":"<code>enable_edl(self, enabled=True)</code>","text":"<p>Enable or disable Eye Dome Lighting.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable EDL</p> <code>True</code> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_edl(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable Eye Dome Lighting.\n\n    Args:\n        enabled: Whether to enable EDL\n    \"\"\"\n    self.edl_enabled = enabled\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.filter_by_elevation","title":"<code>filter_by_elevation(self, min_elevation=None, max_elevation=None)</code>","text":"<p>Filter points by elevation.</p> <p>Parameters:</p> Name Type Description Default <code>min_elevation</code> <code>Optional[float]</code> <p>Minimum elevation to show</p> <code>None</code> <code>max_elevation</code> <code>Optional[float]</code> <p>Maximum elevation to show</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def filter_by_elevation(\n    self,\n    min_elevation: Optional[float] = None,\n    max_elevation: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Filter points by elevation.\n\n    Args:\n        min_elevation: Minimum elevation to show\n        max_elevation: Maximum elevation to show\n    \"\"\"\n    options = {}\n    if min_elevation is not None:\n        options[\"min\"] = min_elevation\n    if max_elevation is not None:\n        options[\"max\"] = max_elevation\n    self.call_js_method(\"filterByElevation\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.fit_to_screen","title":"<code>fit_to_screen(self)</code>","text":"<p>Fit the point cloud to the screen.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_to_screen(self) -&gt; None:\n    \"\"\"Fit the point cloud to the screen.\"\"\"\n    self.call_js_method(\"fitToScreen\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.get_camera_position","title":"<code>get_camera_position(self)</code>","text":"<p>Get current camera position.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_camera_position(self) -&gt; List[float]:\n    \"\"\"Get current camera position.\"\"\"\n    return list(self.camera_position)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.get_camera_target","title":"<code>get_camera_target(self)</code>","text":"<p>Get current camera target.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_camera_target(self) -&gt; List[float]:\n    \"\"\"Get current camera target.\"\"\"\n    return list(self.camera_target)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.load_multiple_point_clouds","title":"<code>load_multiple_point_clouds(self, point_clouds)</code>","text":"<p>Load multiple point clouds.</p> <p>Parameters:</p> Name Type Description Default <code>point_clouds</code> <code>List[Dict[str, str]]</code> <p>List of point cloud configs with 'url' and optional 'name' keys</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def load_multiple_point_clouds(self, point_clouds: List[Dict[str, str]]) -&gt; None:\n    \"\"\"Load multiple point clouds.\n\n    Args:\n        point_clouds: List of point cloud configs with 'url' and optional 'name' keys\n    \"\"\"\n    self.call_js_method(\"loadMultiplePointClouds\", point_clouds)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.load_point_cloud","title":"<code>load_point_cloud(self, point_cloud_url, point_cloud_name=None)</code>","text":"<p>Load a point cloud from URL.</p> <p>Parameters:</p> Name Type Description Default <code>point_cloud_url</code> <code>str</code> <p>URL to the point cloud metadata.json file</p> required <code>point_cloud_name</code> <code>Optional[str]</code> <p>Optional name for the point cloud</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def load_point_cloud(\n    self, point_cloud_url: str, point_cloud_name: Optional[str] = None\n) -&gt; None:\n    \"\"\"Load a point cloud from URL.\n\n    Args:\n        point_cloud_url: URL to the point cloud metadata.json file\n        point_cloud_name: Optional name for the point cloud\n    \"\"\"\n    self.point_cloud_url = point_cloud_url\n    options = {\"url\": point_cloud_url}\n    if point_cloud_name:\n        options[\"name\"] = point_cloud_name\n    self.call_js_method(\"loadPointCloud\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_background_color","title":"<code>set_background_color(self, color)</code>","text":"<p>Set the background color.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str</code> <p>Background color (hex format like \"#000000\")</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_background_color(self, color: str) -&gt; None:\n    \"\"\"Set the background color.\n\n    Args:\n        color: Background color (hex format like \"#000000\")\n    \"\"\"\n    self.background_color = color\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_camera_position","title":"<code>set_camera_position(self, position, target=None)</code>","text":"<p>Set camera position and optionally target.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>List[float]</code> <p>Camera position [x, y, z]</p> required <code>target</code> <code>Optional[List[float]]</code> <p>Camera target [x, y, z] (optional)</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_camera_position(\n    self, position: List[float], target: Optional[List[float]] = None\n) -&gt; None:\n    \"\"\"Set camera position and optionally target.\n\n    Args:\n        position: Camera position [x, y, z]\n        target: Camera target [x, y, z] (optional)\n    \"\"\"\n    self.camera_position = position\n    if target:\n        self.camera_target = target\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_classification_visibility","title":"<code>set_classification_visibility(self, classifications)</code>","text":"<p>Set visibility of point classifications.</p> <p>Parameters:</p> Name Type Description Default <code>classifications</code> <code>Dict[int, bool]</code> <p>Dict mapping classification codes to visibility</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_classification_visibility(self, classifications: Dict[int, bool]) -&gt; None:\n    \"\"\"Set visibility of point classifications.\n\n    Args:\n        classifications: Dict mapping classification codes to visibility\n    \"\"\"\n    self.call_js_method(\"setClassificationVisibility\", classifications)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_clip_distances","title":"<code>set_clip_distances(self, near, far)</code>","text":"<p>Set near and far clipping distances.</p> <p>Parameters:</p> Name Type Description Default <code>near</code> <code>float</code> <p>Near clipping distance</p> required <code>far</code> <code>float</code> <p>Far clipping distance</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_clip_distances(self, near: float, far: float) -&gt; None:\n    \"\"\"Set near and far clipping distances.\n\n    Args:\n        near: Near clipping distance\n        far: Far clipping distance\n    \"\"\"\n    self.near_clip = near\n    self.far_clip = far\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_edl_settings","title":"<code>set_edl_settings(self, radius=1.0, strength=1.0)</code>","text":"<p>Set Eye Dome Lighting parameters.</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>float</code> <p>EDL radius</p> <code>1.0</code> <code>strength</code> <code>float</code> <p>EDL strength</p> <code>1.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_edl_settings(self, radius: float = 1.0, strength: float = 1.0) -&gt; None:\n    \"\"\"Set Eye Dome Lighting parameters.\n\n    Args:\n        radius: EDL radius\n        strength: EDL strength\n    \"\"\"\n    self.edl_radius = radius\n    self.edl_strength = strength\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_fov","title":"<code>set_fov(self, fov)</code>","text":"<p>Set field of view.</p> <p>Parameters:</p> Name Type Description Default <code>fov</code> <code>float</code> <p>Field of view in degrees</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_fov(self, fov: float) -&gt; None:\n    \"\"\"Set field of view.\n\n    Args:\n        fov: Field of view in degrees\n    \"\"\"\n    self.fov = fov\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_point_shape","title":"<code>set_point_shape(self, shape)</code>","text":"<p>Set the point shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>str</code> <p>\"square\" or \"circle\"</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_point_shape(self, shape: str) -&gt; None:\n    \"\"\"Set the point shape.\n\n    Args:\n        shape: \"square\" or \"circle\"\n    \"\"\"\n    if shape not in [\"square\", \"circle\"]:\n        raise ValueError(\"shape must be 'square' or 'circle'\")\n    self.point_shape = shape\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_point_size","title":"<code>set_point_size(self, size)</code>","text":"<p>Set the point size.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_point_size(self, size: float) -&gt; None:\n    \"\"\"Set the point size.\"\"\"\n    self.point_size = size\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_point_size_type","title":"<code>set_point_size_type(self, size_type)</code>","text":"<p>Set the point size type.</p> <p>Parameters:</p> Name Type Description Default <code>size_type</code> <code>str</code> <p>\"fixed\", \"adaptive\", or \"attenuation\"</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_point_size_type(self, size_type: str) -&gt; None:\n    \"\"\"Set the point size type.\n\n    Args:\n        size_type: \"fixed\", \"adaptive\", or \"attenuation\"\n    \"\"\"\n    if size_type not in [\"fixed\", \"adaptive\", \"attenuation\"]:\n        raise ValueError(\"size_type must be 'fixed', 'adaptive', or 'attenuation'\")\n    self.point_size_type = size_type\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_quality","title":"<code>set_quality(self, quality='medium')</code>","text":"<p>Set rendering quality.</p> <p>Parameters:</p> Name Type Description Default <code>quality</code> <code>str</code> <p>Rendering quality (\"low\", \"medium\", \"high\")</p> <code>'medium'</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_quality(self, quality: str = \"medium\") -&gt; None:\n    \"\"\"Set rendering quality.\n\n    Args:\n        quality: Rendering quality (\"low\", \"medium\", \"high\")\n    \"\"\"\n    if quality not in [\"low\", \"medium\", \"high\"]:\n        raise ValueError(\"quality must be 'low', 'medium', or 'high'\")\n    self.call_js_method(\"setQuality\", quality)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.show_coordinate_grid","title":"<code>show_coordinate_grid(self, show=True, size=10.0, color='#aaaaaa')</code>","text":"<p>Show or hide coordinate grid.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>Whether to show the grid</p> <code>True</code> <code>size</code> <code>float</code> <p>Grid size</p> <code>10.0</code> <code>color</code> <code>str</code> <p>Grid color</p> <code>'#aaaaaa'</code> Source code in <code>anymap/anymap.py</code> <pre><code>def show_coordinate_grid(\n    self, show: bool = True, size: float = 10.0, color: str = \"#aaaaaa\"\n) -&gt; None:\n    \"\"\"Show or hide coordinate grid.\n\n    Args:\n        show: Whether to show the grid\n        size: Grid size\n        color: Grid color\n    \"\"\"\n    self.show_grid = show\n    self.grid_size = size\n    self.grid_color = color\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.take_screenshot","title":"<code>take_screenshot(self)</code>","text":"<p>Take a screenshot of the current view.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def take_screenshot(self) -&gt; None:\n    \"\"\"Take a screenshot of the current view.\"\"\"\n    self.call_js_method(\"takeScreenshot\")\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/anymap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>anymap could always use more documentation, whether as part of the official anymap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/anymap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up anymap for local development.</p> <ol> <li> <p>Fork the anymap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/anymap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv anymap\n$ cd anymap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 anymap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/opengeos/anymap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install anymap, run this command in your terminal:</p> <pre><code>pip install anymap\n</code></pre> <p>This is the preferred method to install anymap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install anymap from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/opengeos/anymap\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use anymap in a project:</p> <pre><code>import anymap\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"utils/#anymap.utils.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>anymap/utils.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"examples/basic_usage/","title":"Basic usage","text":"In\u00a0[1]: Copied! <pre># Import the required modules\nfrom anymap import MapLibreMap\nimport json\n</pre> # Import the required modules from anymap import MapLibreMap import json In\u00a0[2]: Copied! <pre># Create a basic map\nm = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco coordinates [lat, lng]\n    zoom=12,\n    height=\"500px\",\n)\nm\n</pre> # Create a basic map m = MapLibreMap(     center=[37.7749, -122.4194],  # San Francisco coordinates [lat, lng]     zoom=12,     height=\"500px\", ) m Out[2]: In\u00a0[3]: Copied! <pre># Change the center and zoom\nm.set_center(40.7128, -74.0060)  # New York City\nm.set_zoom(10)\n</pre> # Change the center and zoom m.set_center(40.7128, -74.0060)  # New York City m.set_zoom(10) In\u00a0[4]: Copied! <pre># Use fly_to for smooth animation\nm.fly_to(51.5074, -0.1278, zoom=14)  # London\n</pre> # Use fly_to for smooth animation m.fly_to(51.5074, -0.1278, zoom=14)  # London In\u00a0[5]: Copied! <pre>m\n</pre> m Out[5]: In\u00a0[6]: Copied! <pre># Add a marker with popup\nm.add_marker(\n    lat=51.5074,\n    lng=-0.1278,\n    popup=\"&lt;h3&gt;London&lt;/h3&gt;&lt;p&gt;Capital of the United Kingdom&lt;/p&gt;\",\n)\n</pre> # Add a marker with popup m.add_marker(     lat=51.5074,     lng=-0.1278,     popup=\"London<p>Capital of the United Kingdom</p>\", ) In\u00a0[7]: Copied! <pre># Sample GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},\n            \"properties\": {\"name\": \"London\", \"population\": 8900000},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},\n            \"properties\": {\"name\": \"Paris\", \"population\": 2141000},\n        },\n    ],\n}\n\n# Add GeoJSON layer\nm.add_geojson_layer(\n    layer_id=\"cities\",\n    geojson_data=geojson_data,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff0000\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#ffffff\",\n    },\n)\n</pre> # Sample GeoJSON data geojson_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},             \"properties\": {\"name\": \"London\", \"population\": 8900000},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},             \"properties\": {\"name\": \"Paris\", \"population\": 2141000},         },     ], }  # Add GeoJSON layer m.add_geojson_layer(     layer_id=\"cities\",     geojson_data=geojson_data,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#ff0000\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#ffffff\",     }, ) In\u00a0[8]: Copied! <pre># Define event handler\ndef on_map_click(event):\n    lat, lng = event[\"lngLat\"]\n    print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")\n\n\n# Register the event handler\nm.on_map_event(\"click\", on_map_click)\n</pre> # Define event handler def on_map_click(event):     lat, lng = event[\"lngLat\"]     print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")   # Register the event handler m.on_map_event(\"click\", on_map_click) In\u00a0[9]: Copied! <pre># Display the same map instance again\nm\n</pre> # Display the same map instance again m Out[9]: In\u00a0[10]: Copied! <pre># Create a new map instance\nm2 = MapLibreMap(\n    center=[35.6762, 139.6503],  # Tokyo\n    zoom=10,\n    height=\"600px\",\n    map_style=\"https://demotiles.maplibre.org/style.json\",\n)\nm2\n</pre> # Create a new map instance m2 = MapLibreMap(     center=[35.6762, 139.6503],  # Tokyo     zoom=10,     height=\"600px\",     map_style=\"https://demotiles.maplibre.org/style.json\", ) m2 Out[10]: In\u00a0[11]: Copied! <pre># Both maps should work independently\nm2.add_marker(35.6762, 139.6503, popup=\"Tokyo, Japan\")\n</pre> # Both maps should work independently m2.add_marker(35.6762, 139.6503, popup=\"Tokyo, Japan\") In\u00a0[12]: Copied! <pre># Change to a different style\nm2.set_style(\"https://demotiles.maplibre.org/style.json\")\n</pre> # Change to a different style m2.set_style(\"https://demotiles.maplibre.org/style.json\") In\u00a0[13]: Copied! <pre># Set bearing and pitch for 3D effect\nm2.set_bearing(45)\nm2.set_pitch(60)\n</pre> # Set bearing and pitch for 3D effect m2.set_bearing(45) m2.set_pitch(60) In\u00a0[14]: Copied! <pre># Reset to default view\nm2.set_bearing(0)\nm2.set_pitch(0)\n</pre> # Reset to default view m2.set_bearing(0) m2.set_pitch(0) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/basic_usage/#anymap-basic-usage-examples","title":"AnyMap Basic Usage Examples\u00b6","text":"<p>This notebook demonstrates the basic usage of the AnyMap package for creating interactive maps with MapLibre GL JS.</p>"},{"location":"examples/basic_usage/#creating-a-basic-map","title":"Creating a Basic Map\u00b6","text":"<p>Let's start by creating a simple map centered on San Francisco.</p>"},{"location":"examples/basic_usage/#changing-map-properties","title":"Changing Map Properties\u00b6","text":"<p>You can dynamically change map properties after creation:</p>"},{"location":"examples/basic_usage/#adding-markers","title":"Adding Markers\u00b6","text":"<p>You can add markers to the map with optional popups:</p>"},{"location":"examples/basic_usage/#working-with-geojson-data","title":"Working with GeoJSON Data\u00b6","text":"<p>Let's add some GeoJSON data to the map:</p>"},{"location":"examples/basic_usage/#event-handling","title":"Event Handling\u00b6","text":"<p>You can register event handlers for map interactions:</p>"},{"location":"examples/basic_usage/#multi-cell-rendering-test","title":"Multi-cell Rendering Test\u00b6","text":"<p>Let's test that the same map can be displayed in multiple cells without issues:</p>"},{"location":"examples/basic_usage/#changing-map-styles","title":"Changing Map Styles\u00b6","text":"<p>You can change the map style dynamically:</p>"},{"location":"examples/basic_usage/#calling-javascript-methods","title":"Calling JavaScript Methods\u00b6","text":"<p>You can call any MapLibre GL JS methods directly:</p>"},{"location":"examples/cesium_example/","title":"Cesium example","text":"In\u00a0[1]: Copied! <pre>import os\nfrom anymap import CesiumMap\n\n# Set your Cesium token (get a free one at https://cesium.com/ion/signup)\n# You can either set it as an environment variable CESIUM_TOKEN or pass it directly\n# os.environ['CESIUM_TOKEN'] = 'your_token_here'\n\nprint(\"Cesium backend loaded successfully!\")\n</pre> import os from anymap import CesiumMap  # Set your Cesium token (get a free one at https://cesium.com/ion/signup) # You can either set it as an environment variable CESIUM_TOKEN or pass it directly # os.environ['CESIUM_TOKEN'] = 'your_token_here'  print(\"Cesium backend loaded successfully!\") <pre>Cesium backend loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre>from anymap import CesiumMap\n\n# Create a basic Cesium map centered on New York City\nglobe = CesiumMap(\n    center=[40.7128, -74.0060],  # NYC coordinates\n    camera_height=2000000,  # 2000 km above surface\n    width=\"100%\",\n    height=\"600px\",\n    navigation_help_button=False,\n)\n\nglobe\n</pre> from anymap import CesiumMap  # Create a basic Cesium map centered on New York City globe = CesiumMap(     center=[40.7128, -74.0060],  # NYC coordinates     camera_height=2000000,  # 2000 km above surface     width=\"100%\",     height=\"600px\",     navigation_help_button=False, )  globe <pre>/home/runner/work/anymap/anymap/anymap/anymap.py:1034: UserWarning: No Cesium access token found. Please set CESIUM_TOKEN environment variable or pass access_token parameter. Get a free token at https://cesium.com/ion/signup\n  warnings.warn(\n</pre> Out[2]: In\u00a0[3]: Copied! <pre># Add some famous landmarks as points\nglobe.add_point(\n    40.7128,\n    -74.0060,\n    height=200000,  # 200 km above NYC\n    name=\"New York City\",\n    description=\"The Big Apple\",\n    color=\"#ff0000\",\n    pixel_size=20,\n)\n\nglobe.add_point(\n    51.5074,\n    -0.1278,\n    height=150000,  # 150 km above London\n    name=\"London\",\n    description=\"Capital of England\",\n    color=\"#0000ff\",\n    pixel_size=15,\n)\n\nglobe.add_point(\n    35.6762,\n    139.6503,\n    height=100000,  # 100 km above Tokyo\n    name=\"Tokyo\",\n    description=\"Capital of Japan\",\n    color=\"#00ff00\",\n    pixel_size=18,\n)\n\nprint(\"Added landmark points to the globe!\")\n</pre> # Add some famous landmarks as points globe.add_point(     40.7128,     -74.0060,     height=200000,  # 200 km above NYC     name=\"New York City\",     description=\"The Big Apple\",     color=\"#ff0000\",     pixel_size=20, )  globe.add_point(     51.5074,     -0.1278,     height=150000,  # 150 km above London     name=\"London\",     description=\"Capital of England\",     color=\"#0000ff\",     pixel_size=15, )  globe.add_point(     35.6762,     139.6503,     height=100000,  # 100 km above Tokyo     name=\"Tokyo\",     description=\"Capital of Japan\",     color=\"#00ff00\",     pixel_size=18, )  print(\"Added landmark points to the globe!\") <pre>Added landmark points to the globe!\n</pre> In\u00a0[4]: Copied! <pre># Fly to different locations with smooth transitions\nglobe.fly_to(\n    51.5074,\n    -0.1278,  # London\n    height=5000000,  # 5000 km above\n    duration=3.0,\n    heading=45,\n    pitch=-30,\n)\n\nprint(\"Flying to London...\")\n</pre> # Fly to different locations with smooth transitions globe.fly_to(     51.5074,     -0.1278,  # London     height=5000000,  # 5000 km above     duration=3.0,     heading=45,     pitch=-30, )  print(\"Flying to London...\") <pre>Flying to London...\n</pre> In\u00a0[5]: Copied! <pre># Fly to Tokyo with different camera angle\nglobe.fly_to(\n    35.6762,\n    139.6503,  # Tokyo\n    height=3000000,  # 3000 km above\n    duration=4.0,\n    heading=90,\n    pitch=-45,\n)\n\nprint(\"Flying to Tokyo...\")\n</pre> # Fly to Tokyo with different camera angle globe.fly_to(     35.6762,     139.6503,  # Tokyo     height=3000000,  # 3000 km above     duration=4.0,     heading=90,     pitch=-45, )  print(\"Flying to Tokyo...\") <pre>Flying to Tokyo...\n</pre> In\u00a0[6]: Copied! <pre># Add a flight path polyline from NYC to London\nflight_path = [\n    [40.7128, -74.0060, 10000],  # NYC at 10km altitude\n    [45.0, -30.0, 12000],  # Midpoint over Atlantic\n    [51.5074, -0.1278, 10000],  # London at 10km altitude\n]\n\nglobe.add_polyline(\n    flight_path,\n    width=3,\n    color=\"#ffff00\",\n    name=\"NYC to London Flight Path\",\n    description=\"Transatlantic flight route\",\n)\n\nprint(\"Added flight path polyline!\")\n</pre> # Add a flight path polyline from NYC to London flight_path = [     [40.7128, -74.0060, 10000],  # NYC at 10km altitude     [45.0, -30.0, 12000],  # Midpoint over Atlantic     [51.5074, -0.1278, 10000],  # London at 10km altitude ]  globe.add_polyline(     flight_path,     width=3,     color=\"#ffff00\",     name=\"NYC to London Flight Path\",     description=\"Transatlantic flight route\", )  print(\"Added flight path polyline!\") <pre>Added flight path polyline!\n</pre> In\u00a0[7]: Copied! <pre># Add a polygon area around the Mediterranean Sea\nmediterranean_bounds = [\n    [30.0, -6.0, 0],  # Gibraltar area\n    [30.0, 36.0, 0],  # Eastern Mediterranean\n    [46.0, 36.0, 0],  # Turkey area\n    [46.0, -6.0, 0],  # Spain area\n    [30.0, -6.0, 0],  # Close the polygon\n]\n\nglobe.add_polygon(\n    mediterranean_bounds,\n    color=\"rgba(0, 100, 255, 0.3)\",  # Semi-transparent blue\n    outline_color=\"#0064ff\",\n    name=\"Mediterranean Region\",\n    description=\"Mediterranean Sea region\",\n)\n\nprint(\"Added Mediterranean polygon!\")\n</pre> # Add a polygon area around the Mediterranean Sea mediterranean_bounds = [     [30.0, -6.0, 0],  # Gibraltar area     [30.0, 36.0, 0],  # Eastern Mediterranean     [46.0, 36.0, 0],  # Turkey area     [46.0, -6.0, 0],  # Spain area     [30.0, -6.0, 0],  # Close the polygon ]  globe.add_polygon(     mediterranean_bounds,     color=\"rgba(0, 100, 255, 0.3)\",  # Semi-transparent blue     outline_color=\"#0064ff\",     name=\"Mediterranean Region\",     description=\"Mediterranean Sea region\", )  print(\"Added Mediterranean polygon!\") <pre>Added Mediterranean polygon!\n</pre> In\u00a0[8]: Copied! <pre># Sample GeoJSON data with world capitals\nworld_capitals_geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-77.0369, 38.9072],  # Washington DC\n            },\n            \"properties\": {\n                \"name\": \"Washington DC\",\n                \"country\": \"USA\",\n                \"population\": 705749,\n            },\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},  # Paris\n            \"properties\": {\"name\": \"Paris\", \"country\": \"France\", \"population\": 2161000},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [116.4074, 39.9042],  # Beijing\n            },\n            \"properties\": {\n                \"name\": \"Beijing\",\n                \"country\": \"China\",\n                \"population\": 21540000,\n            },\n        },\n    ],\n}\n\n# Add GeoJSON data to the globe\nglobe.add_geojson(\n    world_capitals_geojson, options={\"name\": \"World Capitals\", \"clampToGround\": True}\n)\n\nprint(\"Added world capitals GeoJSON data!\")\n</pre> # Sample GeoJSON data with world capitals world_capitals_geojson = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Point\",                 \"coordinates\": [-77.0369, 38.9072],  # Washington DC             },             \"properties\": {                 \"name\": \"Washington DC\",                 \"country\": \"USA\",                 \"population\": 705749,             },         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},  # Paris             \"properties\": {\"name\": \"Paris\", \"country\": \"France\", \"population\": 2161000},         },         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Point\",                 \"coordinates\": [116.4074, 39.9042],  # Beijing             },             \"properties\": {                 \"name\": \"Beijing\",                 \"country\": \"China\",                 \"population\": 21540000,             },         },     ], }  # Add GeoJSON data to the globe globe.add_geojson(     world_capitals_geojson, options={\"name\": \"World Capitals\", \"clampToGround\": True} )  print(\"Added world capitals GeoJSON data!\") <pre>Added world capitals GeoJSON data!\n</pre> In\u00a0[9]: Copied! <pre># Enable Cesium World Terrain for realistic 3D terrain\nglobe.set_cesium_world_terrain(request_water_mask=True, request_vertex_normals=True)\n\nprint(\"Enabled Cesium World Terrain!\")\n</pre> # Enable Cesium World Terrain for realistic 3D terrain globe.set_cesium_world_terrain(request_water_mask=True, request_vertex_normals=True)  print(\"Enabled Cesium World Terrain!\") <pre>Enabled Cesium World Terrain!\n</pre> In\u00a0[10]: Copied! <pre># Switch to satellite imagery (requires Bing Maps key for best results)\n# You can get a Bing Maps key at https://www.bingmapsportal.com/\nglobe.set_imagery(\n    {\n        \"type\": \"osm\",  # Using OpenStreetMap as fallback\n        \"url\": \"https://tile.openstreetmap.org/\",\n    }\n)\n\nprint(\"Changed to OpenStreetMap imagery!\")\n</pre> # Switch to satellite imagery (requires Bing Maps key for best results) # You can get a Bing Maps key at https://www.bingmapsportal.com/ globe.set_imagery(     {         \"type\": \"osm\",  # Using OpenStreetMap as fallback         \"url\": \"https://tile.openstreetmap.org/\",     } )  print(\"Changed to OpenStreetMap imagery!\") <pre>Changed to OpenStreetMap imagery!\n</pre> In\u00a0[11]: Copied! <pre># Enable atmospheric effects\nglobe.enable_lighting(True)\nglobe.enable_fog(True)\n\nprint(\"Enabled lighting and atmospheric fog!\")\n</pre> # Enable atmospheric effects globe.enable_lighting(True) globe.enable_fog(True)  print(\"Enabled lighting and atmospheric fog!\") <pre>Enabled lighting and atmospheric fog!\n</pre> In\u00a0[12]: Copied! <pre># Switch to 2D mode for flat map view\nglobe.set_scene_mode_2d()\n\nprint(\"Switched to 2D mode!\")\n</pre> # Switch to 2D mode for flat map view globe.set_scene_mode_2d()  print(\"Switched to 2D mode!\") <pre>Switched to 2D mode!\n</pre> In\u00a0[13]: Copied! <pre># Switch to Columbus view (2.5D)\nglobe.set_scene_mode_columbus()\n\nprint(\"Switched to Columbus view!\")\n</pre> # Switch to Columbus view (2.5D) globe.set_scene_mode_columbus()  print(\"Switched to Columbus view!\") <pre>Switched to Columbus view!\n</pre> In\u00a0[14]: Copied! <pre># Back to full 3D mode\nglobe.set_scene_mode_3d()\n\nprint(\"Switched back to 3D mode!\")\n</pre> # Back to full 3D mode globe.set_scene_mode_3d()  print(\"Switched back to 3D mode!\") <pre>Switched back to 3D mode!\n</pre> In\u00a0[15]: Copied! <pre># Define event handler functions\ndef on_click(event):\n    print(\n        f\"Globe clicked at: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"\n    )\n    if event.get(\"pickedObject\"):\n        print(f\"Clicked on object: {event['pickedObject']}\")\n\n\ndef on_camera_move(event):\n    print(\n        f\"Camera moved to: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"\n    )\n\n\n# Register event handlers\nglobe.on_map_event(\"click\", on_click)\nglobe.on_map_event(\"moveend\", on_camera_move)\n\nprint(\"Event handlers registered! Click on the globe or move the camera to see events.\")\n</pre> # Define event handler functions def on_click(event):     print(         f\"Globe clicked at: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"     )     if event.get(\"pickedObject\"):         print(f\"Clicked on object: {event['pickedObject']}\")   def on_camera_move(event):     print(         f\"Camera moved to: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"     )   # Register event handlers globe.on_map_event(\"click\", on_click) globe.on_map_event(\"moveend\", on_camera_move)  print(\"Event handlers registered! Click on the globe or move the camera to see events.\") <pre>Event handlers registered! Click on the globe or move the camera to see events.\n</pre> In\u00a0[16]: Copied! <pre># Display the same globe instance again\n# This should maintain all the data and state from above\nglobe\n</pre> # Display the same globe instance again # This should maintain all the data and state from above globe Out[16]: In\u00a0[17]: Copied! <pre># Add another point while displayed in multiple cells\nglobe.add_point(\n    -33.8688,\n    151.2093,  # Sydney\n    height=500000,\n    name=\"Sydney\",\n    description=\"Largest city in Australia\",\n    color=\"#ff8800\",\n    pixel_size=16,\n)\n\nprint(\"Added Sydney! The point should appear on all globe instances above.\")\n</pre> # Add another point while displayed in multiple cells globe.add_point(     -33.8688,     151.2093,  # Sydney     height=500000,     name=\"Sydney\",     description=\"Largest city in Australia\",     color=\"#ff8800\",     pixel_size=16, )  print(\"Added Sydney! The point should appear on all globe instances above.\") <pre>Added Sydney! The point should appear on all globe instances above.\n</pre> In\u00a0[18]: Copied! <pre># Create a second, independent globe\nglobe2 = CesiumMap(\n    center=[-33.8688, 151.2093],  # Centered on Sydney\n    camera_height=1000000,  # 1000 km above\n    width=\"100%\",\n    height=\"500px\",\n    timeline=False,  # Disable timeline for cleaner look\n    animation=False,  # Disable animation controls\n)\n\n# Add different content to the second globe\nglobe2.add_point(\n    -33.8688,\n    151.2093,\n    height=50000,\n    name=\"Sydney Opera House Area\",\n    color=\"#9900ff\",\n    pixel_size=25,\n)\n\nglobe2.add_point(\n    -37.8136,\n    144.9631,  # Melbourne\n    height=40000,\n    name=\"Melbourne\",\n    color=\"#00ffff\",\n    pixel_size=20,\n)\n\nglobe2\n</pre> # Create a second, independent globe globe2 = CesiumMap(     center=[-33.8688, 151.2093],  # Centered on Sydney     camera_height=1000000,  # 1000 km above     width=\"100%\",     height=\"500px\",     timeline=False,  # Disable timeline for cleaner look     animation=False,  # Disable animation controls )  # Add different content to the second globe globe2.add_point(     -33.8688,     151.2093,     height=50000,     name=\"Sydney Opera House Area\",     color=\"#9900ff\",     pixel_size=25, )  globe2.add_point(     -37.8136,     144.9631,  # Melbourne     height=40000,     name=\"Melbourne\",     color=\"#00ffff\",     pixel_size=20, )  globe2 Out[18]: In\u00a0[19]: Copied! <pre># Reset camera to home position\nglobe.home()\n\nprint(\"Camera reset to home position!\")\n</pre> # Reset camera to home position globe.home()  print(\"Camera reset to home position!\") <pre>Camera reset to home position!\n</pre>"},{"location":"examples/cesium_example/#cesium-3d-globe-example","title":"Cesium 3D Globe Example\u00b6","text":"<p>This notebook demonstrates the capabilities of the anymap CesiumMap widget for creating interactive 3D globe visualizations.</p>"},{"location":"examples/cesium_example/#setup","title":"Setup\u00b6","text":"<p>First, make sure you have a Cesium ion access token. You can get a free one at https://cesium.com/ion/signup</p>"},{"location":"examples/cesium_example/#basic-3d-globe","title":"Basic 3D Globe\u00b6","text":"<p>Create a basic 3D globe centered on a specific location:</p>"},{"location":"examples/cesium_example/#adding-points-and-markers","title":"Adding Points and Markers\u00b6","text":"<p>Add various points and billboards to the globe:</p>"},{"location":"examples/cesium_example/#camera-controls-and-navigation","title":"Camera Controls and Navigation\u00b6","text":"<p>Demonstrate camera movement and positioning:</p>"},{"location":"examples/cesium_example/#adding-3d-geometries","title":"Adding 3D Geometries\u00b6","text":"<p>Add polylines and polygons to show connections and regions:</p>"},{"location":"examples/cesium_example/#working-with-geojson-data","title":"Working with GeoJSON Data\u00b6","text":"<p>Load and display GeoJSON data on the globe:</p>"},{"location":"examples/cesium_example/#terrain-and-imagery","title":"Terrain and Imagery\u00b6","text":"<p>Configure terrain and satellite imagery:</p>"},{"location":"examples/cesium_example/#scene-modes-and-effects","title":"Scene Modes and Effects\u00b6","text":"<p>Experiment with different viewing modes and atmospheric effects:</p>"},{"location":"examples/cesium_example/#event-handling","title":"Event Handling\u00b6","text":"<p>Set up event handlers to respond to user interactions:</p>"},{"location":"examples/cesium_example/#multi-cell-rendering-test","title":"Multi-cell Rendering Test\u00b6","text":"<p>Test that the globe works correctly when displayed in multiple cells:</p>"},{"location":"examples/cesium_example/#creating-a-second-globe-instance","title":"Creating a Second Globe Instance\u00b6","text":"<p>Create a separate globe to verify independence:</p>"},{"location":"examples/cesium_example/#reset-and-home-view","title":"Reset and Home View\u00b6","text":"<p>Return to the home view:</p>"},{"location":"examples/cesium_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the key features of the anymap CesiumMap widget:</p> <ol> <li>3D Globe Visualization: Interactive 3D globe with realistic Earth rendering</li> <li>Points and Markers: Adding labeled points at various heights</li> <li>3D Geometries: Polylines and polygons for paths and regions</li> <li>GeoJSON Support: Loading external geographic data</li> <li>Terrain and Imagery: Realistic 3D terrain and satellite imagery</li> <li>Scene Modes: 3D, 2D, and Columbus view modes</li> <li>Camera Controls: Smooth fly-to animations and positioning</li> <li>Event Handling: Responding to user interactions</li> <li>Multi-cell Rendering: Persistent state across notebook cells</li> <li>Multiple Instances: Independent globe widgets</li> </ol> <p>The CesiumMap widget provides a powerful platform for creating interactive 3D geospatial visualizations with the full capabilities of Cesium.js in a Jupyter environment.</p>"},{"location":"examples/deckgl_example/","title":"Deckgl example","text":"# DeckGL Map Example  This notebook demonstrates the DeckGLMap widget for high-performance data visualization in Jupyter environments.  DeckGL is a WebGL-powered framework for visual exploratory data analysis of large datasets.  In\u00a0[1]: Copied! <pre>import anymap\nimport numpy as np\nimport random\n</pre> import anymap import numpy as np import random ## Basic DeckGL Map  Create a basic DeckGL map widget with default settings.  In\u00a0[2]: Copied! <pre># Create a basic DeckGL map\ndeck_map = anymap.DeckGLMap(\n    center=[37.7749, -122.4194], zoom=10, width=\"100%\", height=\"600px\"  # San Francisco\n)\n\ndeck_map\n</pre> # Create a basic DeckGL map deck_map = anymap.DeckGLMap(     center=[37.7749, -122.4194], zoom=10, width=\"100%\", height=\"600px\"  # San Francisco )  deck_map Out[2]: ## Scatterplot Layer  Add a scatterplot layer with random points around San Francisco.  In\u00a0[3]: Copied! <pre># Generate random data points around San Francisco\nnum_points = 1000\nbase_lat, base_lng = 37.7749, -122.4194\n\nscatterplot_data = []\nfor i in range(num_points):\n    lat = base_lat + (random.random() - 0.5) * 0.1\n    lng = base_lng + (random.random() - 0.5) * 0.1\n    scatterplot_data.append(\n        {\n            \"position\": [lng, lat],\n            \"radius\": random.randint(20, 100),\n            \"color\": [\n                random.randint(0, 255),\n                random.randint(0, 255),\n                random.randint(0, 255),\n                200,\n            ],\n        }\n    )\n\n# Add scatterplot layer\ndeck_map.add_scatterplot_layer(\n    layer_id=\"scatterplot\",\n    data=scatterplot_data,\n    get_position=\"position\",\n    get_radius=\"radius\",\n    get_color=\"color\",\n    radius_scale=1,\n    pickable=True,\n)\n\nprint(f\"Added {len(scatterplot_data)} points to the scatterplot layer\")\n</pre> # Generate random data points around San Francisco num_points = 1000 base_lat, base_lng = 37.7749, -122.4194  scatterplot_data = [] for i in range(num_points):     lat = base_lat + (random.random() - 0.5) * 0.1     lng = base_lng + (random.random() - 0.5) * 0.1     scatterplot_data.append(         {             \"position\": [lng, lat],             \"radius\": random.randint(20, 100),             \"color\": [                 random.randint(0, 255),                 random.randint(0, 255),                 random.randint(0, 255),                 200,             ],         }     )  # Add scatterplot layer deck_map.add_scatterplot_layer(     layer_id=\"scatterplot\",     data=scatterplot_data,     get_position=\"position\",     get_radius=\"radius\",     get_color=\"color\",     radius_scale=1,     pickable=True, )  print(f\"Added {len(scatterplot_data)} points to the scatterplot layer\") <pre>Added 1000 points to the scatterplot layer\n</pre> ## Hexagon Layer  Add a hexagon layer for spatial aggregation visualization. This demonstrates DeckGL's ability to aggregate point data into hexagonal bins.  In\u00a0[4]: Copied! <pre># Generate data for hexagon layer\nnum_hex_points = 2000\nhex_data = []\n\nfor i in range(num_hex_points):\n    lat = base_lat + (random.random() - 0.5) * 0.2\n    lng = base_lng + (random.random() - 0.5) * 0.2\n    hex_data.append({\"position\": [lng, lat], \"weight\": random.random() * 10})\n\n# Add hexagon layer\ndeck_map.add_hexagon_layer(\n    layer_id=\"hexagons\",\n    data=hex_data,\n    get_position=\"position\",\n    get_weight=\"weight\",\n    radius=500,\n    elevation_scale=4,\n    pickable=True,\n    extruded=True,\n)\n\nprint(f\"Added hexagon layer with {len(hex_data)} data points\")\n</pre> # Generate data for hexagon layer num_hex_points = 2000 hex_data = []  for i in range(num_hex_points):     lat = base_lat + (random.random() - 0.5) * 0.2     lng = base_lng + (random.random() - 0.5) * 0.2     hex_data.append({\"position\": [lng, lat], \"weight\": random.random() * 10})  # Add hexagon layer deck_map.add_hexagon_layer(     layer_id=\"hexagons\",     data=hex_data,     get_position=\"position\",     get_weight=\"weight\",     radius=500,     elevation_scale=4,     pickable=True,     extruded=True, )  print(f\"Added hexagon layer with {len(hex_data)} data points\") <pre>Added hexagon layer with 2000 data points\n</pre> ## Layer Management  Demonstrate layer management capabilities like listing and controlling layers.  In\u00a0[5]: Copied! <pre># List all layers\nlayers = deck_map.get_layers()\nprint(\"Current layers:\")\nfor layer_id in layers.keys():\n    print(f\"- {layer_id}\")\n\n# Demonstrate map controls\ndeck_map.set_pitch(45)  # Tilt the map for 3D effect\ndeck_map.set_bearing(30)  # Rotate the map\n\nprint(\"\\nSet pitch to 45\u00b0 and bearing to 30\u00b0 for a 3D perspective view\")\n</pre> # List all layers layers = deck_map.get_layers() print(\"Current layers:\") for layer_id in layers.keys():     print(f\"- {layer_id}\")  # Demonstrate map controls deck_map.set_pitch(45)  # Tilt the map for 3D effect deck_map.set_bearing(30)  # Rotate the map  print(\"\\nSet pitch to 45\u00b0 and bearing to 30\u00b0 for a 3D perspective view\") <pre>Current layers:\n- scatterplot\n- hexagons\n\nSet pitch to 45\u00b0 and bearing to 30\u00b0 for a 3D perspective view\n</pre> ## Summary  This notebook demonstrated the key features of the DeckGLMap widget:  1. **Basic map creation** with center, zoom, and size configuration 2. **Scatterplot layer** for visualizing point data with custom colors and sizes 3. **Hexagon layer** for spatial aggregation and 3D visualization 4. **Layer management** for listing and controlling layers 5. **3D controls** for setting pitch and bearing to create perspective views  The DeckGLMap widget provides high-performance WebGL-based visualization capabilities suitable for large datasets and complex geospatial visualizations. It's particularly effective for:  - Large-scale data visualization (millions of points) - Interactive data exploration - 3D geospatial visualization - Real-time data streaming visualization - Custom data aggregation and analysis  To test the map functionality, run all cells above and interact with the map by panning, zooming, and clicking on the visualization layers."},{"location":"examples/mapbox_example/","title":"Mapbox example","text":"In\u00a0[1]: Copied! <pre># Import required modules\nfrom anymap import MapboxMap\nimport json\nimport os\n\n# Note: You need a Mapbox access token to use the Mapbox backend\n# Get a free token at https://account.mapbox.com/access-tokens/\n# Set it as an environment variable: export MAPBOX_TOKEN=\"your_token_here\"\n# Or pass it directly when creating the map: MapboxMap(access_token=\"your_token\")\n\nprint(\"AnyMap with Mapbox backend loaded successfully!\")\n</pre> # Import required modules from anymap import MapboxMap import json import os  # Note: You need a Mapbox access token to use the Mapbox backend # Get a free token at https://account.mapbox.com/access-tokens/ # Set it as an environment variable: export MAPBOX_TOKEN=\"your_token_here\" # Or pass it directly when creating the map: MapboxMap(access_token=\"your_token\")  print(\"AnyMap with Mapbox backend loaded successfully!\") <pre>AnyMap with Mapbox backend loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre># Create a basic Mapbox map\n# NOTE: Replace \"your_token_here\" with your actual Mapbox access token\n# or set the MAPBOX_TOKEN environment variable\n\nm = MapboxMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"500px\",\n    map_style=\"mapbox://styles/mapbox/streets-v12\",\n    # access_token=\"your_token_here\"  # Replace with your actual token\n)\n\nprint(f\"Access token set: {bool(m.access_token)}\")\nprint(f\"Map style: {m.map_style}\")\nm\n</pre> # Create a basic Mapbox map # NOTE: Replace \"your_token_here\" with your actual Mapbox access token # or set the MAPBOX_TOKEN environment variable  m = MapboxMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"500px\",     map_style=\"mapbox://styles/mapbox/streets-v12\",     # access_token=\"your_token_here\"  # Replace with your actual token )  print(f\"Access token set: {bool(m.access_token)}\") print(f\"Map style: {m.map_style}\") m <pre>Access token set: False\nMap style: mapbox://styles/mapbox/streets-v12\n</pre> <pre>/home/runner/work/anymap/anymap/anymap/anymap.py:573: UserWarning: No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\n  warnings.warn(\n</pre> Out[2]: In\u00a0[3]: Copied! <pre># Change to satellite style\nm.set_style(\"mapbox://styles/mapbox/satellite-v9\")\nm\n</pre> # Change to satellite style m.set_style(\"mapbox://styles/mapbox/satellite-v9\") m Out[3]: In\u00a0[4]: Copied! <pre># Create a new map focused on a mountainous area\nm3d = MapboxMap(\n    center=[46.8182, 8.2275],  # Swiss Alps\n    zoom=12,\n    pitch=60,\n    bearing=45,\n    height=\"600px\",\n    map_style=\"mapbox://styles/mapbox/satellite-v9\",\n)\n\n# Add 3D terrain\nterrain_config = {\"source\": \"mapbox-dem\", \"exaggeration\": 1.5}\nm3d.set_terrain(terrain_config)\n\n# Add atmospheric fog for realism\nfog_config = {\n    \"color\": \"rgb(186, 210, 235)\",\n    \"high-color\": \"rgb(36, 92, 223)\",\n    \"horizon-blend\": 0.02,\n    \"space-color\": \"rgb(11, 11, 25)\",\n    \"star-intensity\": 0.6,\n}\nm3d.set_fog(fog_config)\n\nprint(\"3D terrain and fog added to the map\")\nm3d\n</pre> # Create a new map focused on a mountainous area m3d = MapboxMap(     center=[46.8182, 8.2275],  # Swiss Alps     zoom=12,     pitch=60,     bearing=45,     height=\"600px\",     map_style=\"mapbox://styles/mapbox/satellite-v9\", )  # Add 3D terrain terrain_config = {\"source\": \"mapbox-dem\", \"exaggeration\": 1.5} m3d.set_terrain(terrain_config)  # Add atmospheric fog for realism fog_config = {     \"color\": \"rgb(186, 210, 235)\",     \"high-color\": \"rgb(36, 92, 223)\",     \"horizon-blend\": 0.02,     \"space-color\": \"rgb(11, 11, 25)\",     \"star-intensity\": 0.6, } m3d.set_fog(fog_config)  print(\"3D terrain and fog added to the map\") m3d <pre>3D terrain and fog added to the map\n</pre> Out[4]: In\u00a0[5]: Copied! <pre># Add various controls to the map\nm3d.add_control(\"navigation\", \"top-left\")\nm3d.add_control(\"scale\", \"bottom-left\")\nm3d.add_control(\"fullscreen\", \"top-right\")\n\nprint(\"Navigation, scale, and fullscreen controls added\")\n</pre> # Add various controls to the map m3d.add_control(\"navigation\", \"top-left\") m3d.add_control(\"scale\", \"bottom-left\") m3d.add_control(\"fullscreen\", \"top-right\")  print(\"Navigation, scale, and fullscreen controls added\") <pre>Navigation, scale, and fullscreen controls added\n</pre> In\u00a0[6]: Copied! <pre># Create a map focused on New York City\nnyc_map = MapboxMap(\n    center=[40.7589, -73.9851],  # Times Square\n    zoom=16,\n    pitch=60,\n    bearing=30,\n    height=\"600px\",\n    map_style=\"mapbox://styles/mapbox/streets-v12\",\n)\n\n# Add 3D buildings\nnyc_map.add_3d_buildings()\n\n# Add navigation control\nnyc_map.add_control(\"navigation\", \"top-left\")\n\nprint(\"3D buildings added to NYC map\")\nnyc_map\n</pre> # Create a map focused on New York City nyc_map = MapboxMap(     center=[40.7589, -73.9851],  # Times Square     zoom=16,     pitch=60,     bearing=30,     height=\"600px\",     map_style=\"mapbox://styles/mapbox/streets-v12\", )  # Add 3D buildings nyc_map.add_3d_buildings()  # Add navigation control nyc_map.add_control(\"navigation\", \"top-left\")  print(\"3D buildings added to NYC map\") nyc_map <pre>3D buildings added to NYC map\n</pre> Out[6]: In\u00a0[7]: Copied! <pre># Sample data for NYC landmarks\nnyc_landmarks = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},\n            \"properties\": {\"name\": \"Statue of Liberty\", \"type\": \"monument\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"One World Trade Center\", \"type\": \"building\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},\n            \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9442, 40.8176]},\n            \"properties\": {\"name\": \"Yankee Stadium\", \"type\": \"stadium\"},\n        },\n    ],\n}\n\n# Add the landmarks as a circle layer\nnyc_map.add_geojson_layer(\n    layer_id=\"landmarks\",\n    geojson_data=nyc_landmarks,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#FF6B6B\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#FFFFFF\",\n        \"circle-opacity\": 0.8,\n    },\n)\n\n# Add markers with popups\nnyc_map.add_marker(\n    40.6892,\n    -74.0445,\n    \"&lt;h3&gt;Statue of Liberty&lt;/h3&gt;&lt;p&gt;Symbol of freedom and democracy&lt;/p&gt;\",\n)\nnyc_map.add_marker(\n    40.7484, -73.9857, \"&lt;h3&gt;Central Park&lt;/h3&gt;&lt;p&gt;Manhattan's green oasis&lt;/p&gt;\"\n)\n\nprint(\"NYC landmarks added to the map\")\nprint(f\"Current layers: {list(nyc_map.get_layers().keys())}\")\n</pre> # Sample data for NYC landmarks nyc_landmarks = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},             \"properties\": {\"name\": \"Statue of Liberty\", \"type\": \"monument\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"One World Trade Center\", \"type\": \"building\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},             \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9442, 40.8176]},             \"properties\": {\"name\": \"Yankee Stadium\", \"type\": \"stadium\"},         },     ], }  # Add the landmarks as a circle layer nyc_map.add_geojson_layer(     layer_id=\"landmarks\",     geojson_data=nyc_landmarks,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#FF6B6B\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#FFFFFF\",         \"circle-opacity\": 0.8,     }, )  # Add markers with popups nyc_map.add_marker(     40.6892,     -74.0445,     \"Statue of Liberty<p>Symbol of freedom and democracy</p>\", ) nyc_map.add_marker(     40.7484, -73.9857, \"Central Park<p>Manhattan's green oasis</p>\" )  print(\"NYC landmarks added to the map\") print(f\"Current layers: {list(nyc_map.get_layers().keys())}\") <pre>NYC landmarks added to the map\nCurrent layers: ['3d-buildings', 'landmarks']\n</pre> In\u00a0[8]: Copied! <pre># Display the NYC map again - should show all layers\nprint(\"Displaying NYC map again with all layers:\")\nprint(f\"Layers: {list(nyc_map.get_layers().keys())}\")\nprint(f\"Sources: {list(nyc_map.get_sources().keys())}\")\nnyc_map\n</pre> # Display the NYC map again - should show all layers print(\"Displaying NYC map again with all layers:\") print(f\"Layers: {list(nyc_map.get_layers().keys())}\") print(f\"Sources: {list(nyc_map.get_sources().keys())}\") nyc_map <pre>Displaying NYC map again with all layers:\nLayers: ['3d-buildings', 'landmarks']\nSources: ['landmarks_source']\n</pre> Out[8]: In\u00a0[9]: Copied! <pre># Store events for demonstration\nmap_events = []\n\n\ndef on_map_click(event):\n    lat, lng = event[\"lngLat\"]\n    map_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n    print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")\n\n\ndef on_map_move(event):\n    center = event.get(\"center\", [0, 0])\n    zoom = event.get(\"zoom\", 0)\n    print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")\n\n\n# Register event handlers\nnyc_map.on_map_event(\"click\", on_map_click)\nnyc_map.on_map_event(\"moveend\", on_map_move)\n\nprint(\"Event handlers registered. Try clicking and moving the map!\")\n</pre> # Store events for demonstration map_events = []   def on_map_click(event):     lat, lng = event[\"lngLat\"]     map_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")     print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")   def on_map_move(event):     center = event.get(\"center\", [0, 0])     zoom = event.get(\"zoom\", 0)     print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")   # Register event handlers nyc_map.on_map_event(\"click\", on_map_click) nyc_map.on_map_event(\"moveend\", on_map_move)  print(\"Event handlers registered. Try clicking and moving the map!\") <pre>Event handlers registered. Try clicking and moving the map!\n</pre> In\u00a0[10]: Copied! <pre>from anymap import MapLibreMap\n\n# Create a MapLibre map for comparison\nmaplibre_map = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"400px\",\n    map_style=\"https://demotiles.maplibre.org/style.json\",\n)\n\n# Add some data to differentiate\nsf_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco City Hall\"},\n        }\n    ],\n}\n\nmaplibre_map.add_geojson_layer(\n    \"sf_poi\", sf_data, \"circle\", {\"circle-color\": \"#50C878\", \"circle-radius\": 10}\n)\n\nprint(\"MapLibre map (San Francisco):\")\nmaplibre_map\n</pre> from anymap import MapLibreMap  # Create a MapLibre map for comparison maplibre_map = MapLibreMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"400px\",     map_style=\"https://demotiles.maplibre.org/style.json\", )  # Add some data to differentiate sf_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco City Hall\"},         }     ], }  maplibre_map.add_geojson_layer(     \"sf_poi\", sf_data, \"circle\", {\"circle-color\": \"#50C878\", \"circle-radius\": 10} )  print(\"MapLibre map (San Francisco):\") maplibre_map <pre>MapLibre map (San Francisco):\n</pre> Out[10]: In\u00a0[11]: Copied! <pre># Create a Mapbox map of the same location for comparison\nmapbox_sf = MapboxMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"400px\",\n    map_style=\"mapbox://styles/mapbox/streets-v12\",\n)\n\nmapbox_sf.add_geojson_layer(\n    \"sf_poi_mapbox\", sf_data, \"circle\", {\"circle-color\": \"#FF6B6B\", \"circle-radius\": 10}\n)\n\nprint(\"Mapbox map (San Francisco):\")\nmapbox_sf\n</pre> # Create a Mapbox map of the same location for comparison mapbox_sf = MapboxMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"400px\",     map_style=\"mapbox://styles/mapbox/streets-v12\", )  mapbox_sf.add_geojson_layer(     \"sf_poi_mapbox\", sf_data, \"circle\", {\"circle-color\": \"#FF6B6B\", \"circle-radius\": 10} )  print(\"Mapbox map (San Francisco):\") mapbox_sf <pre>Mapbox map (San Francisco):\n</pre> Out[11]: In\u00a0[12]: Copied! <pre># Create a map of the Grand Canyon with enhanced terrain\ncanyon_map = MapboxMap(\n    center=[36.1069, -112.1129],  # Grand Canyon\n    zoom=13,\n    pitch=70,\n    bearing=150,\n    height=\"600px\",\n    map_style=\"mapbox://styles/mapbox/satellite-v9\",\n)\n\n# Add terrain with higher exaggeration for dramatic effect\ncanyon_terrain = {\"source\": \"mapbox-dem\", \"exaggeration\": 2.0}\ncanyon_map.set_terrain(canyon_terrain)\n\n# Add enhanced atmospheric fog\ncanyon_fog = {\n    \"color\": \"rgb(255, 255, 255)\",\n    \"high-color\": \"rgb(200, 200, 255)\",\n    \"horizon-blend\": 0.1,\n    \"space-color\": \"rgb(11, 11, 25)\",\n    \"star-intensity\": 0.0,\n}\ncanyon_map.set_fog(canyon_fog)\n\n# Add controls\ncanyon_map.add_control(\"navigation\", \"top-left\")\ncanyon_map.add_control(\"scale\", \"bottom-left\")\n\nprint(\"Grand Canyon with enhanced 3D terrain\")\ncanyon_map\n</pre> # Create a map of the Grand Canyon with enhanced terrain canyon_map = MapboxMap(     center=[36.1069, -112.1129],  # Grand Canyon     zoom=13,     pitch=70,     bearing=150,     height=\"600px\",     map_style=\"mapbox://styles/mapbox/satellite-v9\", )  # Add terrain with higher exaggeration for dramatic effect canyon_terrain = {\"source\": \"mapbox-dem\", \"exaggeration\": 2.0} canyon_map.set_terrain(canyon_terrain)  # Add enhanced atmospheric fog canyon_fog = {     \"color\": \"rgb(255, 255, 255)\",     \"high-color\": \"rgb(200, 200, 255)\",     \"horizon-blend\": 0.1,     \"space-color\": \"rgb(11, 11, 25)\",     \"star-intensity\": 0.0, } canyon_map.set_fog(canyon_fog)  # Add controls canyon_map.add_control(\"navigation\", \"top-left\") canyon_map.add_control(\"scale\", \"bottom-left\")  print(\"Grand Canyon with enhanced 3D terrain\") canyon_map <pre>Grand Canyon with enhanced 3D terrain\n</pre> Out[12]: In\u00a0[13]: Copied! <pre># Create a simple map for layer management demo\nlayer_demo = MapboxMap(center=[40.7128, -74.0060], zoom=10, height=\"400px\")  # NYC\n\n# Add multiple layers\ndemo_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"Point 1\"},\n        }\n    ],\n}\n\nlayer_demo.add_geojson_layer(\"layer1\", demo_data, \"circle\", {\"circle-color\": \"red\"})\nlayer_demo.add_geojson_layer(\"layer2\", demo_data, \"circle\", {\"circle-color\": \"blue\"})\nlayer_demo.add_geojson_layer(\"layer3\", demo_data, \"circle\", {\"circle-color\": \"green\"})\n\nprint(f\"Layers before cleanup: {list(layer_demo.get_layers().keys())}\")\nlayer_demo\n</pre> # Create a simple map for layer management demo layer_demo = MapboxMap(center=[40.7128, -74.0060], zoom=10, height=\"400px\")  # NYC  # Add multiple layers demo_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"Point 1\"},         }     ], }  layer_demo.add_geojson_layer(\"layer1\", demo_data, \"circle\", {\"circle-color\": \"red\"}) layer_demo.add_geojson_layer(\"layer2\", demo_data, \"circle\", {\"circle-color\": \"blue\"}) layer_demo.add_geojson_layer(\"layer3\", demo_data, \"circle\", {\"circle-color\": \"green\"})  print(f\"Layers before cleanup: {list(layer_demo.get_layers().keys())}\") layer_demo <pre>Layers before cleanup: ['layer1', 'layer2', 'layer3']\n</pre> Out[13]: In\u00a0[14]: Copied! <pre># Clear some layers\nlayer_demo.remove_layer(\"layer2\")\nprint(f\"After removing layer2: {list(layer_demo.get_layers().keys())}\")\n\n# Clear all layers\nlayer_demo.clear_layers()\nprint(f\"After clearing all layers: {list(layer_demo.get_layers().keys())}\")\nprint(f\"Sources still exist: {list(layer_demo.get_sources().keys())}\")\n\n# Display the map without layers\nlayer_demo\n</pre> # Clear some layers layer_demo.remove_layer(\"layer2\") print(f\"After removing layer2: {list(layer_demo.get_layers().keys())}\")  # Clear all layers layer_demo.clear_layers() print(f\"After clearing all layers: {list(layer_demo.get_layers().keys())}\") print(f\"Sources still exist: {list(layer_demo.get_sources().keys())}\")  # Display the map without layers layer_demo <pre>After removing layer2: ['layer1', 'layer3']\nAfter clearing all layers: []\nSources still exist: ['layer1_source', 'layer2_source', 'layer3_source']\n</pre> Out[14]:"},{"location":"examples/mapbox_example/#anymap-mapbox-gl-js-examples","title":"AnyMap Mapbox GL JS Examples\u00b6","text":"<p>This notebook demonstrates the Mapbox GL JS backend for anymap, showcasing advanced mapping features including 3D terrain, 3D buildings, custom controls, and atmospheric fog effects.</p>"},{"location":"examples/mapbox_example/#basic-mapbox-map","title":"Basic Mapbox Map\u00b6","text":"<p>Let's start with a basic Mapbox map. The access token is automatically handled.</p>"},{"location":"examples/mapbox_example/#mapbox-styles","title":"Mapbox Styles\u00b6","text":"<p>Mapbox offers various built-in styles. Let's try the satellite style.</p>"},{"location":"examples/mapbox_example/#3d-terrain-and-buildings","title":"3D Terrain and Buildings\u00b6","text":"<p>One of Mapbox's powerful features is 3D terrain and building visualization.</p>"},{"location":"examples/mapbox_example/#adding-controls","title":"Adding Controls\u00b6","text":"<p>Mapbox provides various interactive controls.</p>"},{"location":"examples/mapbox_example/#urban-3d-buildings","title":"Urban 3D Buildings\u00b6","text":"<p>Let's create a map showcasing 3D buildings in a urban environment.</p>"},{"location":"examples/mapbox_example/#adding-data-layers","title":"Adding Data Layers\u00b6","text":"<p>Let's add some GeoJSON data to visualize points of interest.</p>"},{"location":"examples/mapbox_example/#multi-cell-rendering-test","title":"Multi-Cell Rendering Test\u00b6","text":"<p>Test that the same map instance renders correctly in multiple cells.</p>"},{"location":"examples/mapbox_example/#event-handling","title":"Event Handling\u00b6","text":"<p>Set up event handlers to capture user interactions.</p>"},{"location":"examples/mapbox_example/#comparison-with-maplibre","title":"Comparison with MapLibre\u00b6","text":"<p>Let's create a side-by-side comparison with MapLibre to show both backends work independently.</p>"},{"location":"examples/mapbox_example/#advanced-mapbox-features","title":"Advanced Mapbox Features\u00b6","text":"<p>Let's showcase some advanced Mapbox-specific features like custom terrain sources.</p>"},{"location":"examples/mapbox_example/#layer-management","title":"Layer Management\u00b6","text":"<p>Demonstrate layer management capabilities.</p>"},{"location":"examples/mapbox_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the key features of AnyMap's Mapbox GL JS backend:</p> <p>\u2705 Mapbox Integration: Full integration with Mapbox GL JS v3.13.0 \u2705 Access Token Management: Automatic token handling with fallbacks \u2705 3D Terrain &amp; Buildings: Support for 3D terrain exaggeration and building visualization \u2705 Atmospheric Effects: Fog and lighting effects for realistic mapping \u2705 Interactive Controls: Navigation, scale, fullscreen, and geolocation controls \u2705 Multi-cell Rendering: Persistent layer state across Jupyter cells \u2705 Event Handling: Click and move event capture \u2705 Layer Management: Full CRUD operations for map layers and sources \u2705 Style Flexibility: Support for built-in Mapbox styles and custom styles \u2705 Independence: Works alongside MapLibre backend without conflicts</p> <p>The Mapbox backend provides access to Mapbox's premium features while maintaining the same simple API as the MapLibre backend.</p>"},{"location":"examples/maplibre_example/","title":"Maplibre example","text":"In\u00a0[1]: Copied! <pre># Import required modules\nfrom anymap import MapLibreMap\nimport json\nimport time\n\nprint(\"AnyMap version loaded successfully!\")\n</pre> # Import required modules from anymap import MapLibreMap import json import time  print(\"AnyMap version loaded successfully!\") <pre>AnyMap version loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre># Create the main test map\nm = MapLibreMap(\n    center=[37.7749, -122.4194], zoom=12, height=\"500px\", width=\"100%\"  # San Francisco\n)\n\nprint(\"Map created. Displaying first time...\")\nm\n</pre> # Create the main test map m = MapLibreMap(     center=[37.7749, -122.4194], zoom=12, height=\"500px\", width=\"100%\"  # San Francisco )  print(\"Map created. Displaying first time...\") m <pre>Map created. Displaying first time...\n</pre> Out[2]: In\u00a0[3]: Copied! <pre># Display the same map instance again - should render without issues\nprint(\"Displaying the SAME map instance in a second cell...\")\nm\n</pre> # Display the same map instance again - should render without issues print(\"Displaying the SAME map instance in a second cell...\") m <pre>Displaying the SAME map instance in a second cell...\n</pre> Out[3]: In\u00a0[4]: Copied! <pre># Add a GeoJSON layer with points of interest in San Francisco\nsf_poi = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco City Hall\", \"type\": \"government\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4183, 37.7793]},\n            \"properties\": {\"name\": \"Golden Gate Park\", \"type\": \"park\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.3959, 37.7937]},\n            \"properties\": {\"name\": \"Fisherman's Wharf\", \"type\": \"attraction\"},\n        },\n    ],\n}\n\n# Add the layer\nm.add_geojson_layer(\n    layer_id=\"sf_poi\",\n    geojson_data=sf_poi,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff6b6b\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#ffffff\",\n    },\n)\n\n# Add markers\nm.add_marker(37.7749, -122.4194, popup=\"&lt;b&gt;City Hall&lt;/b&gt;&lt;br&gt;Government building\")\nm.add_marker(37.7793, -122.4183, popup=\"&lt;b&gt;Golden Gate Park&lt;/b&gt;&lt;br&gt;Beautiful park\")\n\nprint(\"Added GeoJSON layer and markers. Current layers:\", list(m.get_layers().keys()))\n</pre> # Add a GeoJSON layer with points of interest in San Francisco sf_poi = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco City Hall\", \"type\": \"government\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4183, 37.7793]},             \"properties\": {\"name\": \"Golden Gate Park\", \"type\": \"park\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.3959, 37.7937]},             \"properties\": {\"name\": \"Fisherman's Wharf\", \"type\": \"attraction\"},         },     ], }  # Add the layer m.add_geojson_layer(     layer_id=\"sf_poi\",     geojson_data=sf_poi,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#ff6b6b\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#ffffff\",     }, )  # Add markers m.add_marker(37.7749, -122.4194, popup=\"City HallGovernment building\") m.add_marker(37.7793, -122.4183, popup=\"Golden Gate ParkBeautiful park\")  print(\"Added GeoJSON layer and markers. Current layers:\", list(m.get_layers().keys())) <pre>Added GeoJSON layer and markers. Current layers: ['sf_poi']\n</pre> In\u00a0[5]: Copied! <pre># Render the map again - layers should persist\nprint(\"Rendering map with layers in a new cell...\")\nprint(\"Layers should be visible:\", list(m.get_layers().keys()))\nprint(\"Sources should include:\", list(m.get_sources().keys()))\nm\n</pre> # Render the map again - layers should persist print(\"Rendering map with layers in a new cell...\") print(\"Layers should be visible:\", list(m.get_layers().keys())) print(\"Sources should include:\", list(m.get_sources().keys())) m <pre>Rendering map with layers in a new cell...\nLayers should be visible: ['sf_poi']\nSources should include: ['sf_poi_source']\n</pre> Out[5]: In\u00a0[6]: Copied! <pre>m\n</pre> m Out[6]: In\u00a0[7]: Copied! <pre># Modify map properties\nm.fly_to(37.8044, -122.2712, zoom=15)  # Fly to Berkeley\nm.set_bearing(45)  # Rotate the map\nm.set_pitch(45)  # Tilt the map\n\nprint(\"Modified map view - flying to Berkeley with rotation and tilt\")\n</pre> # Modify map properties m.fly_to(37.8044, -122.2712, zoom=15)  # Fly to Berkeley m.set_bearing(45)  # Rotate the map m.set_pitch(45)  # Tilt the map  print(\"Modified map view - flying to Berkeley with rotation and tilt\") <pre>Modified map view - flying to Berkeley with rotation and tilt\n</pre> In\u00a0[8]: Copied! <pre># Add more layers to test different layer types\nberkeley_area = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [-122.2850, 37.8000],\n                        [-122.2700, 37.8000],\n                        [-122.2700, 37.8100],\n                        [-122.2850, 37.8100],\n                        [-122.2850, 37.8000],\n                    ]\n                ],\n            },\n            \"properties\": {\"name\": \"Berkeley Area\"},\n        }\n    ],\n}\n\n# Add polygon layer\nm.add_geojson_layer(\n    layer_id=\"berkeley_area\",\n    geojson_data=berkeley_area,\n    layer_type=\"fill\",\n    paint={\"fill-color\": \"#4a90e2\", \"fill-opacity\": 0.3},\n)\n\nprint(\"Added Berkeley area polygon layer\")\n</pre> # Add more layers to test different layer types berkeley_area = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Polygon\",                 \"coordinates\": [                     [                         [-122.2850, 37.8000],                         [-122.2700, 37.8000],                         [-122.2700, 37.8100],                         [-122.2850, 37.8100],                         [-122.2850, 37.8000],                     ]                 ],             },             \"properties\": {\"name\": \"Berkeley Area\"},         }     ], }  # Add polygon layer m.add_geojson_layer(     layer_id=\"berkeley_area\",     geojson_data=berkeley_area,     layer_type=\"fill\",     paint={\"fill-color\": \"#4a90e2\", \"fill-opacity\": 0.3}, )  print(\"Added Berkeley area polygon layer\") <pre>Added Berkeley area polygon layer\n</pre> In\u00a0[9]: Copied! <pre>m\n</pre> m Out[9]: In\u00a0[10]: Copied! <pre>m\n</pre> m Out[10]: In\u00a0[11]: Copied! <pre># Display map again with all modifications\nprint(\"Displaying map with all modifications and layers:\")\nprint(\"Current layers:\", list(m.get_layers().keys()))\nm\n</pre> # Display map again with all modifications print(\"Displaying map with all modifications and layers:\") print(\"Current layers:\", list(m.get_layers().keys())) m <pre>Displaying map with all modifications and layers:\nCurrent layers: ['sf_poi', 'berkeley_area']\n</pre> Out[11]: In\u00a0[12]: Copied! <pre># Create a second independent map\nm2 = MapLibreMap(center=[40.7128, -74.0060], zoom=12, height=\"600px\")  # New York City\n\n# Add different data to the second map\nnyc_poi = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"Times Square\", \"type\": \"attraction\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},\n            \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},\n        },\n    ],\n}\n\nm2.add_geojson_layer(\n    layer_id=\"nyc_poi\",\n    geojson_data=nyc_poi,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 10,\n        \"circle-color\": \"#50C878\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#ffffff\",\n    },\n)\n\nprint(\"Created second map (NYC) with different layers\")\nprint(\"Map 1 layers:\", list(m.get_layers().keys()))\nprint(\"Map 2 layers:\", list(m2.get_layers().keys()))\nm2\n</pre> # Create a second independent map m2 = MapLibreMap(center=[40.7128, -74.0060], zoom=12, height=\"600px\")  # New York City  # Add different data to the second map nyc_poi = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"Times Square\", \"type\": \"attraction\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},             \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},         },     ], }  m2.add_geojson_layer(     layer_id=\"nyc_poi\",     geojson_data=nyc_poi,     layer_type=\"circle\",     paint={         \"circle-radius\": 10,         \"circle-color\": \"#50C878\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#ffffff\",     }, )  print(\"Created second map (NYC) with different layers\") print(\"Map 1 layers:\", list(m.get_layers().keys())) print(\"Map 2 layers:\", list(m2.get_layers().keys())) m2 <pre>Created second map (NYC) with different layers\nMap 1 layers: ['sf_poi', 'berkeley_area']\nMap 2 layers: ['nyc_poi']\n</pre> Out[12]: In\u00a0[13]: Copied! <pre># Display both maps side by side to verify independence\nprint(\"Original map (San Francisco/Berkeley area):\")\nprint(\"Layers:\", list(m.get_layers().keys()))\nm\n</pre> # Display both maps side by side to verify independence print(\"Original map (San Francisco/Berkeley area):\") print(\"Layers:\", list(m.get_layers().keys())) m <pre>Original map (San Francisco/Berkeley area):\nLayers: ['sf_poi', 'berkeley_area']\n</pre> Out[13]: In\u00a0[14]: Copied! <pre># Second map again\nprint(\"Second map (New York City):\")\nprint(\"Layers:\", list(m2.get_layers().keys()))\nm2\n</pre> # Second map again print(\"Second map (New York City):\") print(\"Layers:\", list(m2.get_layers().keys())) m2 <pre>Second map (New York City):\nLayers: ['nyc_poi']\n</pre> Out[14]: In\u00a0[15]: Copied! <pre># Set up event handlers\nclick_events = []\nmove_events = []\n\n\ndef on_map_click(event):\n    lat, lng = event[\"lngLat\"]\n    click_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n    print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")\n\n\ndef on_map_move(event):\n    center = event.get(\"center\", [0, 0])\n    zoom = event.get(\"zoom\", 0)\n    move_events.append(f\"Moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")\n    print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")\n\n\n# Register event handlers\nm.on_map_event(\"click\", on_map_click)\nm.on_map_event(\"moveend\", on_map_move)\n\nprint(\"Event handlers registered. Click and move the map to test!\")\nprint(\"Events will be captured and displayed here.\")\n</pre> # Set up event handlers click_events = [] move_events = []   def on_map_click(event):     lat, lng = event[\"lngLat\"]     click_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")     print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")   def on_map_move(event):     center = event.get(\"center\", [0, 0])     zoom = event.get(\"zoom\", 0)     move_events.append(f\"Moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")     print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")   # Register event handlers m.on_map_event(\"click\", on_map_click) m.on_map_event(\"moveend\", on_map_move)  print(\"Event handlers registered. Click and move the map to test!\") print(\"Events will be captured and displayed here.\") <pre>Event handlers registered. Click and move the map to test!\nEvents will be captured and displayed here.\n</pre> In\u00a0[16]: Copied! <pre># Display the map with event handlers\nprint(\"Interactive map with event handlers - try clicking and panning!\")\nm\n</pre> # Display the map with event handlers print(\"Interactive map with event handlers - try clicking and panning!\") m <pre>Interactive map with event handlers - try clicking and panning!\n</pre> Out[16]: In\u00a0[17]: Copied! <pre># Check collected events\nprint(\"Recent click events:\")\nfor event in click_events[-5:]:  # Show last 5\n    print(f\"  {event}\")\n\nprint(\"\\nRecent move events:\")\nfor event in move_events[-5:]:  # Show last 5\n    print(f\"  {event}\")\n\nprint(f\"\\nTotal click events: {len(click_events)}\")\nprint(f\"Total move events: {len(move_events)}\")\n</pre> # Check collected events print(\"Recent click events:\") for event in click_events[-5:]:  # Show last 5     print(f\"  {event}\")  print(\"\\nRecent move events:\") for event in move_events[-5:]:  # Show last 5     print(f\"  {event}\")  print(f\"\\nTotal click events: {len(click_events)}\") print(f\"Total move events: {len(move_events)}\") <pre>Recent click events:\n\nRecent move events:\n\nTotal click events: 0\nTotal move events: 0\n</pre> In\u00a0[18]: Copied! <pre># Test layer management methods\nprint(\"Current layers before cleanup:\", list(m.get_layers().keys()))\nprint(\"Current sources before cleanup:\", list(m.get_sources().keys()))\n\n# Create a new map for testing layer management\nm3 = MapLibreMap(center=[51.5074, -0.1278], zoom=12, height=\"600px\")  # London\n\n# Add multiple test layers\ntest_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},\n            \"properties\": {\"name\": \"Big Ben\"},\n        }\n    ],\n}\n\nm3.add_geojson_layer(\"test1\", test_data, \"circle\", {\"circle-color\": \"red\"})\nm3.add_geojson_layer(\"test2\", test_data, \"circle\", {\"circle-color\": \"blue\"})\nm3.add_geojson_layer(\"test3\", test_data, \"circle\", {\"circle-color\": \"green\"})\n\nprint(\"\\nLayers after adding test layers:\", list(m3.get_layers().keys()))\nm3\n</pre> # Test layer management methods print(\"Current layers before cleanup:\", list(m.get_layers().keys())) print(\"Current sources before cleanup:\", list(m.get_sources().keys()))  # Create a new map for testing layer management m3 = MapLibreMap(center=[51.5074, -0.1278], zoom=12, height=\"600px\")  # London  # Add multiple test layers test_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},             \"properties\": {\"name\": \"Big Ben\"},         }     ], }  m3.add_geojson_layer(\"test1\", test_data, \"circle\", {\"circle-color\": \"red\"}) m3.add_geojson_layer(\"test2\", test_data, \"circle\", {\"circle-color\": \"blue\"}) m3.add_geojson_layer(\"test3\", test_data, \"circle\", {\"circle-color\": \"green\"})  print(\"\\nLayers after adding test layers:\", list(m3.get_layers().keys())) m3 <pre>Current layers before cleanup: ['sf_poi', 'berkeley_area']\nCurrent sources before cleanup: ['sf_poi_source', 'berkeley_area_source']\n\nLayers after adding test layers: ['test1', 'test2', 'test3']\n</pre> Out[18]: In\u00a0[19]: Copied! <pre># Test clearing layers\nprint(\"Before clearing - Layers:\", list(m3.get_layers().keys()))\nm3.clear_layers()\nprint(\"After clearing layers - Layers:\", list(m3.get_layers().keys()))\nprint(\"Sources still exist:\", list(m3.get_sources().keys()))\n\n# Display map after clearing layers\nm3\n</pre> # Test clearing layers print(\"Before clearing - Layers:\", list(m3.get_layers().keys())) m3.clear_layers() print(\"After clearing layers - Layers:\", list(m3.get_layers().keys())) print(\"Sources still exist:\", list(m3.get_sources().keys()))  # Display map after clearing layers m3 <pre>Before clearing - Layers: ['test1', 'test2', 'test3']\nAfter clearing layers - Layers: []\nSources still exist: ['test1_source', 'test2_source', 'test3_source']\n</pre> Out[19]: In\u00a0[20]: Copied! <pre># Final test - render all three maps in sequence\nprint(\"=== FINAL MULTI-CELL TEST ===\")\nprint(\"\\n1. Original map (San Francisco area):\")\nprint(\"   Layers:\", list(m.get_layers().keys()))\nprint(\"   Center:\", m.center, \"Zoom:\", m.zoom)\nm\n</pre> # Final test - render all three maps in sequence print(\"=== FINAL MULTI-CELL TEST ===\") print(\"\\n1. Original map (San Francisco area):\") print(\"   Layers:\", list(m.get_layers().keys())) print(\"   Center:\", m.center, \"Zoom:\", m.zoom) m <pre>=== FINAL MULTI-CELL TEST ===\n\n1. Original map (San Francisco area):\n   Layers: ['sf_poi', 'berkeley_area']\n   Center: [37.7749, -122.4194] Zoom: 12.0\n</pre> Out[20]: In\u00a0[21]: Copied! <pre>print(\"2. Second map (New York City):\")\nprint(\"   Layers:\", list(m2.get_layers().keys()))\nprint(\"   Center:\", m2.center, \"Zoom:\", m2.zoom)\nm2\n</pre> print(\"2. Second map (New York City):\") print(\"   Layers:\", list(m2.get_layers().keys())) print(\"   Center:\", m2.center, \"Zoom:\", m2.zoom) m2 <pre>2. Second map (New York City):\n   Layers: ['nyc_poi']\n   Center: [40.7128, -74.006] Zoom: 12.0\n</pre> Out[21]: In\u00a0[22]: Copied! <pre>print(\"3. Third map (London - after layer clearing):\")\nprint(\"   Layers:\", list(m3.get_layers().keys()))\nprint(\"   Center:\", m3.center, \"Zoom:\", m3.zoom)\nm3\n</pre> print(\"3. Third map (London - after layer clearing):\") print(\"   Layers:\", list(m3.get_layers().keys())) print(\"   Center:\", m3.center, \"Zoom:\", m3.zoom) m3 <pre>3. Third map (London - after layer clearing):\n   Layers: []\n   Center: [51.5074, -0.1278] Zoom: 12.0\n</pre> Out[22]:"},{"location":"examples/maplibre_example/#anymap-multi-cell-rendering-test","title":"AnyMap Multi-Cell Rendering Test\u00b6","text":"<p>This notebook thoroughly tests the anymap package's ability to render interactive maps across multiple cells without issues. It also tests layer persistence, bidirectional communication, and various MapLibre features.</p>"},{"location":"examples/maplibre_example/#test-1-basic-map-creation-and-multi-cell-rendering","title":"Test 1: Basic Map Creation and Multi-Cell Rendering\u00b6","text":"<p>Let's create a map and test that it renders correctly across multiple cells.</p>"},{"location":"examples/maplibre_example/#test-2-layer-persistence","title":"Test 2: Layer Persistence\u00b6","text":"<p>Now let's add some layers and verify they persist when the map is rendered in multiple cells.</p>"},{"location":"examples/maplibre_example/#test-3-dynamic-map-modifications","title":"Test 3: Dynamic Map Modifications\u00b6","text":"<p>Test that modifications to the map work correctly across cells.</p>"},{"location":"examples/maplibre_example/#test-4-multiple-independent-map-instances","title":"Test 4: Multiple Independent Map Instances\u00b6","text":"<p>Test creating multiple independent map instances that work independently.</p>"},{"location":"examples/maplibre_example/#test-5-event-handling-and-bidirectional-communication","title":"Test 5: Event Handling and Bidirectional Communication\u00b6","text":"<p>Test the event handling system and bidirectional communication.</p>"},{"location":"examples/maplibre_example/#test-6-layer-management-methods","title":"Test 6: Layer Management Methods\u00b6","text":"<p>Test the enhanced layer management functionality.</p>"},{"location":"examples/maplibre_example/#test-7-final-multi-cell-persistence-test","title":"Test 7: Final Multi-Cell Persistence Test\u00b6","text":"<p>Let's do a final comprehensive test to ensure everything works across cells.</p>"},{"location":"examples/maplibre_example/#test-summary","title":"Test Summary\u00b6","text":"<p>If all the above tests worked correctly, you should observe:</p> <ol> <li>\u2705 Multi-cell rendering: The same map instance renders correctly in multiple cells</li> <li>\u2705 Layer persistence: Layers added to a map persist when the map is rendered in different cells</li> <li>\u2705 Independent instances: Multiple map instances work independently without interfering with each other</li> <li>\u2705 Dynamic modifications: Map property changes (zoom, center, bearing, pitch) work correctly</li> <li>\u2705 Event handling: Click and move events are captured and handled properly</li> <li>\u2705 Layer management: Adding, removing, and clearing layers works as expected</li> <li>\u2705 State synchronization: The JavaScript frontend and Python backend maintain synchronized state</li> </ol>"},{"location":"examples/maplibre_example/#compatibility-notes","title":"Compatibility Notes\u00b6","text":"<p>This implementation should work in:</p> <ul> <li>JupyterLab (Classic and modern)</li> <li>Jupyter Notebook (Classic)</li> <li>VS Code with Jupyter extension</li> <li>Google Colab</li> <li>Other Jupyter-compatible environments</li> </ul> <p>The anywidget framework ensures broad compatibility across different Jupyter environments.</p>"},{"location":"examples/potree_example/","title":"Potree example","text":"In\u00a0[1]: Copied! <pre>import os\nfrom anymap import PotreeMap\n\nprint(\"Potree backend loaded successfully!\")\n</pre> import os from anymap import PotreeMap  print(\"Potree backend loaded successfully!\") <pre>Potree backend loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre># Create a basic Potree viewer\nviewer = PotreeMap(\n    width=\"100%\",\n    height=\"600px\",\n    background_color=\"#1a1a1a\",  # Dark background\n    point_size=1.5,\n    point_size_type=\"adaptive\",  # Adaptive point sizing\n    point_shape=\"square\",\n    camera_position=[0, 0, 50],\n    camera_target=[0, 0, 0],\n    fov=60,\n    edl_enabled=True,  # Eye Dome Lighting for better depth perception\n    show_grid=True,\n    grid_size=10,\n    grid_color=\"#444444\",\n)\n\nviewer\n</pre> # Create a basic Potree viewer viewer = PotreeMap(     width=\"100%\",     height=\"600px\",     background_color=\"#1a1a1a\",  # Dark background     point_size=1.5,     point_size_type=\"adaptive\",  # Adaptive point sizing     point_shape=\"square\",     camera_position=[0, 0, 50],     camera_target=[0, 0, 0],     fov=60,     edl_enabled=True,  # Eye Dome Lighting for better depth perception     show_grid=True,     grid_size=10,     grid_color=\"#444444\", )  viewer Out[2]: In\u00a0[3]: Copied! <pre># Example of loading a point cloud (requires actual converted data)\n# Replace with the URL to your Potree-converted point cloud metadata.json\n# viewer.load_point_cloud(\n#     \"https://example.com/pointclouds/your_pointcloud/metadata.json\",\n#     \"My Point Cloud\"\n# )\n\nprint(\"To load actual point cloud data, you need a Potree-converted dataset.\")\nprint(\"Point the load_point_cloud method to your metadata.json file.\")\n</pre> # Example of loading a point cloud (requires actual converted data) # Replace with the URL to your Potree-converted point cloud metadata.json # viewer.load_point_cloud( #     \"https://example.com/pointclouds/your_pointcloud/metadata.json\", #     \"My Point Cloud\" # )  print(\"To load actual point cloud data, you need a Potree-converted dataset.\") print(\"Point the load_point_cloud method to your metadata.json file.\") <pre>To load actual point cloud data, you need a Potree-converted dataset.\nPoint the load_point_cloud method to your metadata.json file.\n</pre> In\u00a0[4]: Copied! <pre># Adjust point size\nviewer.set_point_size(2.0)\nprint(\"Point size set to 2.0\")\n\n# Change point size type\nviewer.set_point_size_type(\"fixed\")  # Options: \"fixed\", \"adaptive\", \"attenuation\"\nprint(\"Point size type set to fixed\")\n\n# Change point shape\nviewer.set_point_shape(\"circle\")  # Options: \"square\", \"circle\"\nprint(\"Point shape set to circle\")\n</pre> # Adjust point size viewer.set_point_size(2.0) print(\"Point size set to 2.0\")  # Change point size type viewer.set_point_size_type(\"fixed\")  # Options: \"fixed\", \"adaptive\", \"attenuation\" print(\"Point size type set to fixed\")  # Change point shape viewer.set_point_shape(\"circle\")  # Options: \"square\", \"circle\" print(\"Point shape set to circle\") <pre>Point size set to 2.0\nPoint size type set to fixed\nPoint shape set to circle\n</pre> In\u00a0[5]: Copied! <pre># Set camera position and target\nviewer.set_camera_position(position=[20, 20, 30], target=[0, 0, 0])\nprint(\"Camera position updated\")\n\n# Adjust field of view\nviewer.set_fov(75)\nprint(\"Field of view set to 75 degrees\")\n\n# Set clipping distances\nviewer.set_clip_distances(near=0.1, far=1000)\nprint(\"Clipping distances updated\")\n</pre> # Set camera position and target viewer.set_camera_position(position=[20, 20, 30], target=[0, 0, 0]) print(\"Camera position updated\")  # Adjust field of view viewer.set_fov(75) print(\"Field of view set to 75 degrees\")  # Set clipping distances viewer.set_clip_distances(near=0.1, far=1000) print(\"Clipping distances updated\") <pre>Camera position updated\nField of view set to 75 degrees\nClipping distances updated\n</pre> In\u00a0[6]: Copied! <pre># Configure Eye Dome Lighting (EDL) for better depth perception\nviewer.enable_edl(True)\nviewer.set_edl_settings(radius=1.5, strength=1.2)\nprint(\"Eye Dome Lighting configured\")\n\n# Show coordinate grid\nviewer.show_coordinate_grid(show=True, size=20, color=\"#666666\")\nprint(\"Coordinate grid enabled\")\n\n# Change background color\nviewer.set_background_color(\"#2a2a2a\")\nprint(\"Background color changed\")\n</pre> # Configure Eye Dome Lighting (EDL) for better depth perception viewer.enable_edl(True) viewer.set_edl_settings(radius=1.5, strength=1.2) print(\"Eye Dome Lighting configured\")  # Show coordinate grid viewer.show_coordinate_grid(show=True, size=20, color=\"#666666\") print(\"Coordinate grid enabled\")  # Change background color viewer.set_background_color(\"#2a2a2a\") print(\"Background color changed\") <pre>Eye Dome Lighting configured\nCoordinate grid enabled\nBackground color changed\n</pre> In\u00a0[7]: Copied! <pre># Set rendering quality\nviewer.set_quality(\"high\")  # Options: \"low\", \"medium\", \"high\"\nprint(\"Rendering quality set to high\")\n\n# For large datasets, you might want to use \"medium\" or \"low\" for better performance\n</pre> # Set rendering quality viewer.set_quality(\"high\")  # Options: \"low\", \"medium\", \"high\" print(\"Rendering quality set to high\")  # For large datasets, you might want to use \"medium\" or \"low\" for better performance <pre>Rendering quality set to high\n</pre> In\u00a0[8]: Copied! <pre># Example of loading multiple point clouds\npoint_clouds = [\n    {\n        \"url\": \"https://example.com/pointclouds/scan1/metadata.json\",\n        \"name\": \"Building Scan\",\n    },\n    {\n        \"url\": \"https://example.com/pointclouds/scan2/metadata.json\",\n        \"name\": \"Terrain Scan\",\n    },\n]\n\n# viewer.load_multiple_point_clouds(point_clouds)\nprint(\"Multiple point clouds can be loaded simultaneously\")\n</pre> # Example of loading multiple point clouds point_clouds = [     {         \"url\": \"https://example.com/pointclouds/scan1/metadata.json\",         \"name\": \"Building Scan\",     },     {         \"url\": \"https://example.com/pointclouds/scan2/metadata.json\",         \"name\": \"Terrain Scan\",     }, ]  # viewer.load_multiple_point_clouds(point_clouds) print(\"Multiple point clouds can be loaded simultaneously\") <pre>Multiple point clouds can be loaded simultaneously\n</pre> In\u00a0[9]: Copied! <pre># Filter points by elevation\nviewer.filter_by_elevation(min_elevation=0, max_elevation=50)\nprint(\"Elevation filter applied (0-50 units)\")\n\n# Filter by classification (LAS classification codes)\n# Common classifications: 1=Unclassified, 2=Ground, 3=Low Vegetation, 4=Medium Vegetation, 5=High Vegetation, 6=Building\nclassifications = {\n    1: True,  # Show unclassified\n    2: True,  # Show ground\n    3: False,  # Hide low vegetation\n    4: False,  # Hide medium vegetation\n    5: False,  # Hide high vegetation\n    6: True,  # Show buildings\n}\nviewer.set_classification_visibility(classifications)\nprint(\"Classification filter applied\")\n\n# Clear all filters\n# viewer.clear_filters()\n# print(\"All filters cleared\")\n</pre> # Filter points by elevation viewer.filter_by_elevation(min_elevation=0, max_elevation=50) print(\"Elevation filter applied (0-50 units)\")  # Filter by classification (LAS classification codes) # Common classifications: 1=Unclassified, 2=Ground, 3=Low Vegetation, 4=Medium Vegetation, 5=High Vegetation, 6=Building classifications = {     1: True,  # Show unclassified     2: True,  # Show ground     3: False,  # Hide low vegetation     4: False,  # Hide medium vegetation     5: False,  # Hide high vegetation     6: True,  # Show buildings } viewer.set_classification_visibility(classifications) print(\"Classification filter applied\")  # Clear all filters # viewer.clear_filters() # print(\"All filters cleared\") <pre>Elevation filter applied (0-50 units)\nClassification filter applied\n</pre> In\u00a0[10]: Copied! <pre># Add distance measurement tool\nviewer.add_measurement(\"distance\")\nprint(\"Distance measurement tool added\")\n\n# Add area measurement tool\nviewer.add_measurement(\"area\")\nprint(\"Area measurement tool added\")\n\n# Add volume measurement tool\nviewer.add_measurement(\"volume\")\nprint(\"Volume measurement tool added\")\n\n# Clear all measurements\n# viewer.clear_measurements()\n# print(\"All measurements cleared\")\n</pre> # Add distance measurement tool viewer.add_measurement(\"distance\") print(\"Distance measurement tool added\")  # Add area measurement tool viewer.add_measurement(\"area\") print(\"Area measurement tool added\")  # Add volume measurement tool viewer.add_measurement(\"volume\") print(\"Volume measurement tool added\")  # Clear all measurements # viewer.clear_measurements() # print(\"All measurements cleared\") <pre>Distance measurement tool added\nArea measurement tool added\nVolume measurement tool added\n</pre> In\u00a0[11]: Copied! <pre># Fit point clouds to screen\nviewer.fit_to_screen()\nprint(\"View fitted to point cloud bounds\")\n\n# Take a screenshot\nviewer.take_screenshot()\nprint(\"Screenshot captured\")\n\n# Get current camera position\ncamera_pos = viewer.get_camera_position()\ncamera_target = viewer.get_camera_target()\nprint(f\"Camera position: {camera_pos}\")\nprint(f\"Camera target: {camera_target}\")\n</pre> # Fit point clouds to screen viewer.fit_to_screen() print(\"View fitted to point cloud bounds\")  # Take a screenshot viewer.take_screenshot() print(\"Screenshot captured\")  # Get current camera position camera_pos = viewer.get_camera_position() camera_target = viewer.get_camera_target() print(f\"Camera position: {camera_pos}\") print(f\"Camera target: {camera_target}\") <pre>View fitted to point cloud bounds\nScreenshot captured\nCamera position: [20, 20, 30]\nCamera target: [0, 0, 0]\n</pre> In\u00a0[12]: Copied! <pre># Display the same viewer instance again\n# This should maintain all the settings and state from above\nviewer\n</pre> # Display the same viewer instance again # This should maintain all the settings and state from above viewer Out[12]: In\u00a0[13]: Copied! <pre># Change settings while displayed in multiple cells\nviewer.set_background_color(\"#0a0a0a\")\nviewer.set_point_size(3.0)\nviewer.set_point_shape(\"square\")\n\nprint(\"Settings changed! Updates should appear on all viewer instances above.\")\n</pre> # Change settings while displayed in multiple cells viewer.set_background_color(\"#0a0a0a\") viewer.set_point_size(3.0) viewer.set_point_shape(\"square\")  print(\"Settings changed! Updates should appear on all viewer instances above.\") <pre>Settings changed! Updates should appear on all viewer instances above.\n</pre> In\u00a0[14]: Copied! <pre># Create a second, independent viewer with different settings\nviewer2 = PotreeMap(\n    width=\"100%\",\n    height=\"500px\",\n    background_color=\"#003366\",  # Blue background\n    point_size=1.0,\n    point_size_type=\"attenuation\",\n    point_shape=\"circle\",\n    camera_position=[10, 10, 20],\n    edl_enabled=False,\n    show_grid=False,\n)\n\n# Load different point cloud data (if available)\n# viewer2.load_point_cloud(\n#     \"https://example.com/pointclouds/another_scan/metadata.json\",\n#     \"Another Point Cloud\"\n# )\n\nviewer2\n</pre> # Create a second, independent viewer with different settings viewer2 = PotreeMap(     width=\"100%\",     height=\"500px\",     background_color=\"#003366\",  # Blue background     point_size=1.0,     point_size_type=\"attenuation\",     point_shape=\"circle\",     camera_position=[10, 10, 20],     edl_enabled=False,     show_grid=False, )  # Load different point cloud data (if available) # viewer2.load_point_cloud( #     \"https://example.com/pointclouds/another_scan/metadata.json\", #     \"Another Point Cloud\" # )  viewer2 Out[14]: In\u00a0[15]: Copied! <pre># Clear all point clouds from the first viewer\nviewer.clear_point_clouds()\nprint(\"Point clouds cleared from first viewer\")\n\n# Clear measurements\nviewer.clear_measurements()\nprint(\"Measurements cleared\")\n\n# Clear filters\nviewer.clear_filters()\nprint(\"Filters cleared\")\n</pre> # Clear all point clouds from the first viewer viewer.clear_point_clouds() print(\"Point clouds cleared from first viewer\")  # Clear measurements viewer.clear_measurements() print(\"Measurements cleared\")  # Clear filters viewer.clear_filters() print(\"Filters cleared\") <pre>Point clouds cleared from first viewer\nMeasurements cleared\nFilters cleared\n</pre>"},{"location":"examples/potree_example/#potree-point-cloud-viewer-example","title":"Potree Point Cloud Viewer Example\u00b6","text":"<p>This notebook demonstrates the capabilities of the anymap PotreeMap widget for creating interactive point cloud visualizations.</p>"},{"location":"examples/potree_example/#what-is-potree","title":"What is Potree?\u00b6","text":"<p>Potree is a free open-source WebGL based point cloud renderer for large point clouds. It's particularly useful for:</p> <ul> <li>LiDAR data visualization</li> <li>3D scanning results</li> <li>Large-scale point cloud datasets</li> <li>Archaeological documentation</li> <li>Building and infrastructure modeling</li> </ul>"},{"location":"examples/potree_example/#setup","title":"Setup\u00b6","text":"<p>First, import the PotreeMap widget from anymap:</p>"},{"location":"examples/potree_example/#basic-point-cloud-viewer","title":"Basic Point Cloud Viewer\u00b6","text":"<p>Create a basic Potree viewer. Note that you'll need a converted Potree point cloud dataset (with metadata.json) to load actual data:</p>"},{"location":"examples/potree_example/#loading-point-cloud-data","title":"Loading Point Cloud Data\u00b6","text":"<p>To load actual point cloud data, you need a Potree-converted dataset. You can convert LAS/LAZ files using PotreeConverter:</p> <pre># Example conversion command (not run in this notebook)\nPotreeConverter input.las -o output_directory --output-format LAZ\n</pre> <p>For demonstration purposes, here's how you would load a point cloud:</p>"},{"location":"examples/potree_example/#point-rendering-settings","title":"Point Rendering Settings\u00b6","text":"<p>Customize how points are rendered in the viewer:</p>"},{"location":"examples/potree_example/#camera-controls","title":"Camera Controls\u00b6","text":"<p>Control the camera position and viewing angle:</p>"},{"location":"examples/potree_example/#visual-enhancements","title":"Visual Enhancements\u00b6","text":"<p>Configure visual effects and enhancements:</p>"},{"location":"examples/potree_example/#quality-settings","title":"Quality Settings\u00b6","text":"<p>Adjust rendering quality for performance optimization:</p>"},{"location":"examples/potree_example/#multiple-point-clouds","title":"Multiple Point Clouds\u00b6","text":"<p>Load and manage multiple point cloud datasets:</p>"},{"location":"examples/potree_example/#point-cloud-filtering","title":"Point Cloud Filtering\u00b6","text":"<p>Filter points based on various criteria:</p>"},{"location":"examples/potree_example/#measurement-tools","title":"Measurement Tools\u00b6","text":"<p>Add measurement capabilities to the viewer:</p>"},{"location":"examples/potree_example/#utility-functions","title":"Utility Functions\u00b6","text":"<p>Demonstrate various utility functions:</p>"},{"location":"examples/potree_example/#multi-cell-rendering-test","title":"Multi-cell Rendering Test\u00b6","text":"<p>Test that the viewer works correctly when displayed in multiple cells:</p>"},{"location":"examples/potree_example/#creating-a-second-viewer-instance","title":"Creating a Second Viewer Instance\u00b6","text":"<p>Create a separate viewer to verify independence:</p>"},{"location":"examples/potree_example/#cleanup","title":"Cleanup\u00b6","text":"<p>Clear point clouds and reset viewers:</p>"},{"location":"examples/potree_example/#working-with-real-data","title":"Working with Real Data\u00b6","text":"<p>To work with real point cloud data in Potree:</p>"},{"location":"examples/potree_example/#1-convert-your-data","title":"1. Convert your data\u00b6","text":"<p>Use PotreeConverter to convert LAS/LAZ files:</p> <pre>PotreeConverter input.las -o output_directory --output-format LAZ\n</pre>"},{"location":"examples/potree_example/#2-host-the-data","title":"2. Host the data\u00b6","text":"<p>Upload the converted point cloud directory to a web server that supports CORS.</p>"},{"location":"examples/potree_example/#3-load-in-the-viewer","title":"3. Load in the viewer\u00b6","text":"<pre>viewer.load_point_cloud(\n    \"https://your-server.com/pointclouds/your_data/metadata.json\",\n    \"Your Point Cloud Name\"\n)\n</pre>"},{"location":"examples/potree_example/#sample-data-sources","title":"Sample Data Sources\u00b6","text":"<p>You can find sample Potree-compatible datasets at:</p> <ul> <li>Potree Examples</li> <li>OpenTopography</li> <li>3D BAG (Netherlands)</li> </ul>"},{"location":"examples/potree_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the key features of the anymap PotreeMap widget:</p> <ol> <li>Point Cloud Visualization: Interactive rendering of large point cloud datasets</li> <li>Rendering Controls: Point size, shape, and quality settings</li> <li>Camera Controls: Position, target, field of view, and clipping</li> <li>Visual Effects: Eye Dome Lighting, coordinate grid, background</li> <li>Data Management: Loading single and multiple point clouds</li> <li>Filtering: Elevation and classification-based filtering</li> <li>Measurements: Distance, area, and volume measurement tools</li> <li>Multi-cell Rendering: Persistent state across notebook cells</li> <li>Multiple Instances: Independent viewer widgets</li> </ol> <p>The PotreeMap widget provides a powerful platform for interactive point cloud visualization with the full capabilities of Potree.js in a Jupyter environment.</p>"},{"location":"examples/to_html/","title":"To html","text":"In\u00a0[1]: Copied! <pre>import anymap\nimport json\n</pre> import anymap import json In\u00a0[2]: Copied! <pre># Create a MapLibre map\nm = anymap.MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    map_style=\"https://demotiles.maplibre.org/style.json\",\n)\n\n# Add a GeoJSON layer with some sample data\nsample_geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\n                \"name\": \"San Francisco\",\n                \"description\": \"The beautiful city by the bay\",\n            },\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4594, 37.7849]},\n            \"properties\": {\n                \"name\": \"Golden Gate Park\",\n                \"description\": \"Large urban park\",\n            },\n        },\n    ],\n}\n\n# Add the GeoJSON layer\nm.add_geojson_layer(\n    layer_id=\"sample_points\",\n    geojson_data=sample_geojson,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 10,\n        \"circle-color\": \"#ff6b6b\",\n        \"circle-stroke-color\": \"#ffffff\",\n        \"circle-stroke-width\": 2,\n    },\n)\n\n# Add a raster layer (OpenStreetMap tiles)\nm.add_raster_layer(\n    layer_id=\"osm_overlay\",\n    source_url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    paint={\"raster-opacity\": 0.3},\n)\n\n# Display the map\nm\n</pre> # Create a MapLibre map m = anymap.MapLibreMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     map_style=\"https://demotiles.maplibre.org/style.json\", )  # Add a GeoJSON layer with some sample data sample_geojson = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {                 \"name\": \"San Francisco\",                 \"description\": \"The beautiful city by the bay\",             },         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4594, 37.7849]},             \"properties\": {                 \"name\": \"Golden Gate Park\",                 \"description\": \"Large urban park\",             },         },     ], }  # Add the GeoJSON layer m.add_geojson_layer(     layer_id=\"sample_points\",     geojson_data=sample_geojson,     layer_type=\"circle\",     paint={         \"circle-radius\": 10,         \"circle-color\": \"#ff6b6b\",         \"circle-stroke-color\": \"#ffffff\",         \"circle-stroke-width\": 2,     }, )  # Add a raster layer (OpenStreetMap tiles) m.add_raster_layer(     layer_id=\"osm_overlay\",     source_url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",     paint={\"raster-opacity\": 0.3}, )  # Display the map m Out[2]: In\u00a0[3]: Copied! <pre># Export to HTML file\nhtml_content = m.to_html(\n    filename=\"maplibre_export.html\",\n    title=\"San Francisco Map - MapLibre Export\",\n    width=\"100%\",\n    height=\"700px\",\n)\n\nprint(\"\u2705 Map exported to 'maplibre_export.html'\")\nprint(f\"\ud83d\udcc4 HTML file size: {len(html_content)} characters\")\nprint(\"\ud83c\udf10 You can now open the HTML file in any web browser!\")\n</pre> # Export to HTML file html_content = m.to_html(     filename=\"maplibre_export.html\",     title=\"San Francisco Map - MapLibre Export\",     width=\"100%\",     height=\"700px\", )  print(\"\u2705 Map exported to 'maplibre_export.html'\") print(f\"\ud83d\udcc4 HTML file size: {len(html_content)} characters\") print(\"\ud83c\udf10 You can now open the HTML file in any web browser!\") <pre>\u2705 Map exported to 'maplibre_export.html'\n\ud83d\udcc4 HTML file size: 4555 characters\n\ud83c\udf10 You can now open the HTML file in any web browser!\n</pre> In\u00a0[4]: Copied! <pre># Show the first 1000 characters of the HTML\nprint(\"HTML Preview (first 1000 characters):\")\nprint(\"=\" * 50)\nprint(html_content[:1000] + \"...\")\nprint(\"=\" * 50)\n\n# Check what layers are included\nprint(\"\\n\ud83d\uddfa\ufe0f  Layers included in export:\")\nif \"sample_points\" in html_content:\n    print(\"  \u2713 Sample points layer\")\nif \"osm_overlay\" in html_content:\n    print(\"  \u2713 OpenStreetMap overlay layer\")\n\nprint(\"\\n\ud83d\udccd Map configuration:\")\nprint(f\"  \u2022 Center: {m.center}\")\nprint(f\"  \u2022 Zoom: {m.zoom}\")\nprint(f\"  \u2022 Style: {m.map_style}\")\n</pre> # Show the first 1000 characters of the HTML print(\"HTML Preview (first 1000 characters):\") print(\"=\" * 50) print(html_content[:1000] + \"...\") print(\"=\" * 50)  # Check what layers are included print(\"\\n\ud83d\uddfa\ufe0f  Layers included in export:\") if \"sample_points\" in html_content:     print(\"  \u2713 Sample points layer\") if \"osm_overlay\" in html_content:     print(\"  \u2713 OpenStreetMap overlay layer\")  print(\"\\n\ud83d\udccd Map configuration:\") print(f\"  \u2022 Center: {m.center}\") print(f\"  \u2022 Zoom: {m.zoom}\") print(f\"  \u2022 Style: {m.map_style}\") <pre>HTML Preview (first 1000 characters):\n==================================================\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;San Francisco Map - MapLibre Export&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }\n        #map {\n            width: 100%;\n            height: 700px;\n            border: 1px solid #ccc;\n        }\n        h1 {\n            margin-top: 0;\n            color: #333;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;San Francisco Map - MapLibre Export&lt;/h1&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Map state from Python\n        const mapState = {\n  \"center\": [\n    37.7749,\n    -122.4194\n  ],\n  \"zoom\": 12.0,\n  \"width\": \"100%\",\n  \"height\": \"700px\",\n  \"style\": \"\",\n  \"_layers\": {\n    \"sampl...\n==================================================\n\n\ud83d\uddfa\ufe0f  Layers included in export:\n  \u2713 Sample points layer\n  \u2713 OpenStreetMap overlay layer\n\n\ud83d\udccd Map configuration:\n  \u2022 Center: [37.7749, -122.4194]\n  \u2022 Zoom: 12.0\n  \u2022 Style: https://demotiles.maplibre.org/style.json\n</pre> In\u00a0[5]: Copied! <pre># Create a Mapbox map (you'll need to set your access token)\n# You can set the token via environment variable MAPBOX_ACCESS_TOKEN\n# or pass it directly as access_token parameter\n\nm_mapbox = anymap.MapboxMap(\n    center=[40.7128, -74.0060],  # New York\n    zoom=13,\n    map_style=\"mapbox://styles/mapbox/streets-v12\",\n    # access_token=\"your_mapbox_token_here\"  # Uncomment and add your token\n)\n\n# Add some NYC landmarks\nnyc_landmarks = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},\n            \"properties\": {\"name\": \"Statue of Liberty\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},\n            \"properties\": {\"name\": \"Empire State Building\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9781, 40.7549]},\n            \"properties\": {\"name\": \"Times Square\"},\n        },\n    ],\n}\n\nm_mapbox.add_geojson_layer(\n    layer_id=\"nyc_landmarks\",\n    geojson_data=nyc_landmarks,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#4264fb\",\n        \"circle-stroke-color\": \"#ffffff\",\n        \"circle-stroke-width\": 2,\n    },\n)\n\n# Display the map\nm_mapbox\n</pre> # Create a Mapbox map (you'll need to set your access token) # You can set the token via environment variable MAPBOX_ACCESS_TOKEN # or pass it directly as access_token parameter  m_mapbox = anymap.MapboxMap(     center=[40.7128, -74.0060],  # New York     zoom=13,     map_style=\"mapbox://styles/mapbox/streets-v12\",     # access_token=\"your_mapbox_token_here\"  # Uncomment and add your token )  # Add some NYC landmarks nyc_landmarks = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},             \"properties\": {\"name\": \"Statue of Liberty\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},             \"properties\": {\"name\": \"Empire State Building\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9781, 40.7549]},             \"properties\": {\"name\": \"Times Square\"},         },     ], }  m_mapbox.add_geojson_layer(     layer_id=\"nyc_landmarks\",     geojson_data=nyc_landmarks,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#4264fb\",         \"circle-stroke-color\": \"#ffffff\",         \"circle-stroke-width\": 2,     }, )  # Display the map m_mapbox <pre>/home/runner/work/anymap/anymap/anymap/anymap.py:573: UserWarning: No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\n  warnings.warn(\n</pre> Out[5]: In\u00a0[6]: Copied! <pre># Export Mapbox map to HTML\nmapbox_html = m_mapbox.to_html(\n    filename=\"mapbox_export.html\",\n    title=\"New York Landmarks - Mapbox Export\",\n    width=\"100%\",\n    height=\"600px\",\n)\n\nprint(\"\u2705 Mapbox map exported to 'mapbox_export.html'\")\nprint(f\"\ud83d\udcc4 HTML file size: {len(mapbox_html)} characters\")\n\n# Check if access token warning is present\nif \"access-token-warning\" in mapbox_html:\n    print(\"\u26a0\ufe0f  Warning: No Mapbox access token detected in export\")\n    print(\"   The exported map will need a valid Mapbox token to work properly\")\nelse:\n    print(\"\u2705 Access token included in export\")\n</pre> # Export Mapbox map to HTML mapbox_html = m_mapbox.to_html(     filename=\"mapbox_export.html\",     title=\"New York Landmarks - Mapbox Export\",     width=\"100%\",     height=\"600px\", )  print(\"\u2705 Mapbox map exported to 'mapbox_export.html'\") print(f\"\ud83d\udcc4 HTML file size: {len(mapbox_html)} characters\")  # Check if access token warning is present if \"access-token-warning\" in mapbox_html:     print(\"\u26a0\ufe0f  Warning: No Mapbox access token detected in export\")     print(\"   The exported map will need a valid Mapbox token to work properly\") else:     print(\"\u2705 Access token included in export\") <pre>\u2705 Mapbox map exported to 'mapbox_export.html'\n\ud83d\udcc4 HTML file size: 4904 characters\n\u26a0\ufe0f  Warning: No Mapbox access token detected in export\n   The exported map will need a valid Mapbox token to work properly\n</pre> In\u00a0[7]: Copied! <pre># Create a more complex map with multiple layer types\ncomplex_map = anymap.MapLibreMap(\n    center=[51.505, -0.09],  # London\n    zoom=10,\n    bearing=45,  # Rotate the map\n    pitch=30,  # Add some tilt\n)\n\n# Add a polygon layer (rough outline of central London)\nlondon_boundary = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [-0.2, 51.45],\n                        [0.1, 51.45],\n                        [0.1, 51.55],\n                        [-0.2, 51.55],\n                        [-0.2, 51.45],\n                    ]\n                ],\n            },\n            \"properties\": {\"name\": \"Central London Area\"},\n        }\n    ],\n}\n\ncomplex_map.add_geojson_layer(\n    layer_id=\"london_area\",\n    geojson_data=london_boundary,\n    layer_type=\"fill\",\n    paint={\"fill-color\": \"#088\", \"fill-opacity\": 0.3},\n)\n\n# Export with custom styling\ncustom_html = complex_map.to_html(\n    filename=\"london_custom_export.html\",\n    title=\"London Map with Custom Styling\",\n    width=\"1200px\",\n    height=\"800px\",\n)\n\nprint(\"\u2705 Complex map exported to 'london_custom_export.html'\")\nprint(f\"\ud83d\udcd0 Map properties preserved:\")\nprint(f\"   \u2022 Bearing: {complex_map.bearing}\u00b0\")\nprint(f\"   \u2022 Pitch: {complex_map.pitch}\u00b0\")\nprint(f\"   \u2022 Layers: {list(complex_map.get_layers().keys())}\")\nprint(f\"   \u2022 Sources: {list(complex_map.get_sources().keys())}\")\n</pre> # Create a more complex map with multiple layer types complex_map = anymap.MapLibreMap(     center=[51.505, -0.09],  # London     zoom=10,     bearing=45,  # Rotate the map     pitch=30,  # Add some tilt )  # Add a polygon layer (rough outline of central London) london_boundary = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Polygon\",                 \"coordinates\": [                     [                         [-0.2, 51.45],                         [0.1, 51.45],                         [0.1, 51.55],                         [-0.2, 51.55],                         [-0.2, 51.45],                     ]                 ],             },             \"properties\": {\"name\": \"Central London Area\"},         }     ], }  complex_map.add_geojson_layer(     layer_id=\"london_area\",     geojson_data=london_boundary,     layer_type=\"fill\",     paint={\"fill-color\": \"#088\", \"fill-opacity\": 0.3}, )  # Export with custom styling custom_html = complex_map.to_html(     filename=\"london_custom_export.html\",     title=\"London Map with Custom Styling\",     width=\"1200px\",     height=\"800px\", )  print(\"\u2705 Complex map exported to 'london_custom_export.html'\") print(f\"\ud83d\udcd0 Map properties preserved:\") print(f\"   \u2022 Bearing: {complex_map.bearing}\u00b0\") print(f\"   \u2022 Pitch: {complex_map.pitch}\u00b0\") print(f\"   \u2022 Layers: {list(complex_map.get_layers().keys())}\") print(f\"   \u2022 Sources: {list(complex_map.get_sources().keys())}\") <pre>\u2705 Complex map exported to 'london_custom_export.html'\n\ud83d\udcd0 Map properties preserved:\n   \u2022 Bearing: 45.0\u00b0\n   \u2022 Pitch: 30.0\u00b0\n   \u2022 Layers: ['london_area']\n   \u2022 Sources: ['london_area_source']\n</pre> In\u00a0[8]: Copied! <pre># Generate HTML without saving to file\nhtml_string = m.to_html(title=\"String Export Example\")\n\nprint(f\"\ud83d\udcdd Generated HTML string of {len(html_string)} characters\")\nprint(\"\\n\ud83d\udd0d HTML validation checks:\")\nprint(f\"  \u2713 Contains DOCTYPE: {'&lt;!DOCTYPE html&gt;' in html_string}\")\nprint(f\"  \u2713 Contains MapLibre: {'maplibre-gl' in html_string}\")\nprint(f\"  \u2713 Contains map container: {'id=\"map\"' in html_string}\")\nprint(f\"  \u2713 Contains map state: {'mapState' in html_string}\")\nprint(f\"  \u2713 Contains layers: {'sample_points' in html_string}\")\n\n# You could save this string manually if needed\n# with open(\"manual_export.html\", \"w\") as f:\n#     f.write(html_string)\n</pre> # Generate HTML without saving to file html_string = m.to_html(title=\"String Export Example\")  print(f\"\ud83d\udcdd Generated HTML string of {len(html_string)} characters\") print(\"\\n\ud83d\udd0d HTML validation checks:\") print(f\"  \u2713 Contains DOCTYPE: {' ' in html_string}\") print(f\"  \u2713 Contains MapLibre: {'maplibre-gl' in html_string}\") print(f\"  \u2713 Contains map container: {'id=\"map\"' in html_string}\") print(f\"  \u2713 Contains map state: {'mapState' in html_string}\") print(f\"  \u2713 Contains layers: {'sample_points' in html_string}\")  # You could save this string manually if needed # with open(\"manual_export.html\", \"w\") as f: #     f.write(html_string) <pre>\ud83d\udcdd Generated HTML string of 4527 characters\n\n\ud83d\udd0d HTML validation checks:\n  \u2713 Contains DOCTYPE: True\n  \u2713 Contains MapLibre: True\n  \u2713 Contains map container: True\n  \u2713 Contains map state: True\n  \u2713 Contains layers: True\n</pre>"},{"location":"examples/to_html/#html-export-example","title":"HTML Export Example\u00b6","text":"<p>This notebook demonstrates how to export anymap maps to standalone HTML files using the <code>to_html()</code> method.</p> <p>The exported HTML files are self-contained and can be opened in any web browser while maintaining all map layers and interactivity.</p>"},{"location":"examples/to_html/#maplibre-export-example","title":"MapLibre Export Example\u00b6","text":"<p>Create a MapLibre map with various layer types and export it to HTML.</p>"},{"location":"examples/to_html/#export-maplibre-map-to-html","title":"Export MapLibre Map to HTML\u00b6","text":"<p>Now let's export this map to a standalone HTML file:</p>"},{"location":"examples/to_html/#preview-the-html-content","title":"Preview the HTML Content\u00b6","text":"<p>Let's take a look at the generated HTML structure:</p>"},{"location":"examples/to_html/#mapbox-export-example","title":"Mapbox Export Example\u00b6","text":"<p>Now let's create a Mapbox map and export it to HTML. Note that you'll need a Mapbox access token for this to work properly.</p>"},{"location":"examples/to_html/#advanced-export-options","title":"Advanced Export Options\u00b6","text":"<p>The <code>to_html()</code> method supports various customization options:</p>"},{"location":"examples/to_html/#return-html-as-string-no-file","title":"Return HTML as String (No File)\u00b6","text":"<p>You can also get the HTML content as a string without saving to a file:</p>"},{"location":"examples/to_html/#summary","title":"Summary\u00b6","text":"<p>The <code>to_html()</code> method provides a convenient way to export anymap maps to standalone HTML files:</p>"},{"location":"examples/to_html/#features","title":"\u2728 Features:\u00b6","text":"<ul> <li>Self-contained: No dependencies on Jupyter or Python runtime</li> <li>Layer persistence: All layers and sources are preserved</li> <li>Interactive: Full map interactivity (pan, zoom, layer visibility)</li> <li>Customizable: Control title, dimensions, and styling</li> <li>Cross-platform: Works in any modern web browser</li> </ul>"},{"location":"examples/to_html/#use-cases","title":"\ud83c\udfaf Use Cases:\u00b6","text":"<ul> <li>Share maps with non-technical users</li> <li>Embed maps in websites or presentations</li> <li>Create standalone map applications</li> <li>Archive map states for later viewing</li> <li>Generate reports with interactive maps</li> </ul>"},{"location":"examples/to_html/#generated-files","title":"\ud83d\udcc2 Generated Files:\u00b6","text":"<p>After running this notebook, you should have these exported HTML files:</p> <ul> <li><code>maplibre_export.html</code> - San Francisco map with points and raster overlay</li> <li><code>mapbox_export.html</code> - New York landmarks map</li> <li><code>london_custom_export.html</code> - London map with custom styling and polygon layer</li> </ul> <p>Open any of these files in your web browser to see the interactive maps!</p>"}]}