{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AnyMap","text":"<p>A Python package for creating interactive maps with anywidget and JavaScript mapping libraries</p> <ul> <li>GitHub repo: https://github.com/opengeos/anymap</li> <li>Documentation: https://anymap.dev</li> <li>PyPI: https://pypi.org/project/anymap</li> <li>Conda-forge: https://anaconda.org/conda-forge/anymap</li> <li>Free software: MIT License</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\uddfa\ufe0f Interactive Maps: Create beautiful, interactive maps in Jupyter notebooks</li> <li>\ud83d\udd04 Bidirectional Communication: Full Python \u2194 JavaScript communication</li> <li>\ud83d\udcf1 Multi-cell Support: Render maps in multiple notebook cells without conflicts</li> <li>\ud83c\udfaf MapLibre Integration: Built-in support for MapLibre GL JS</li> <li>\ud83d\udee0\ufe0f Extensible: Easy to add support for other mapping libraries</li> <li>\ud83d\ude80 Familiar API: Similar to ipyleaflet for easy migration</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install anymap\n</code></pre> <pre><code>conda install -c conda-forge anymap\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a basic map\nm = MapLibreMap(\n    center=[-122.4194, 37.7749],  # San Francisco\n    zoom=12,\n    height=\"600px\"\n)\nm\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#creating-maps","title":"Creating Maps","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a map with custom settings\nm = MapLibreMap(\n    center=[-74.0060, 40.7128],  # New York City\n    zoom=13,\n    height=\"500px\",\n    bearing=45,  # Map rotation\n    pitch=60     # 3D tilt\n)\n</code></pre>"},{"location":"#adding-markers","title":"Adding Markers","text":"<pre><code># Add a marker with popup\nm.add_marker(\n    lat=40.7128,\n    lng=-74.0060,\n    popup=\"&lt;h3&gt;New York City&lt;/h3&gt;&lt;p&gt;The Big Apple&lt;/p&gt;\"\n)\n</code></pre>"},{"location":"#working-with-geojson","title":"Working with GeoJSON","text":"<pre><code># Add GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-74.0060, 40.7128]\n            },\n            \"properties\": {\"name\": \"NYC\"}\n        }\n    ]\n}\n\nm.add_geojson_layer(\n    layer_id=\"cities\",\n    geojson_data=geojson_data,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff0000\"\n    }\n)\n</code></pre>"},{"location":"#event-handling","title":"Event Handling","text":"<pre><code>def handle_click(event):\n    lat, lng = event['lngLat']\n    print(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n\nm.on_map_event('click', handle_click)\n</code></pre>"},{"location":"#dynamic-updates","title":"Dynamic Updates","text":"<pre><code># Change map properties\nm.set_center(-0.1278, 51.5074)  # London\nm.set_zoom(14)\n\n# Animate to a location\nm.fly_to(2.3522, 48.8566, zoom=15)  # Paris\n</code></pre>"},{"location":"#multi-cell-rendering","title":"Multi-Cell Rendering","text":"<p>AnyMap is designed to work seamlessly across multiple notebook cells:</p> <pre><code># Cell 1\nm = MapLibreMap(center=[0, 0], zoom=2)\nm\n\n# Cell 2 - Same map instance\nm.add_marker(0, 0, popup=\"Origin\")\n\n# Cell 3 - Display again\nm\n</code></pre>"},{"location":"#advanced-features","title":"Advanced Features","text":""},{"location":"#layer-management","title":"Layer Management","text":"<pre><code># Add and remove layers\nm.add_source(\"my-source\", {\n    \"type\": \"geojson\",\n    \"data\": geojson_data\n})\n\nm.add_layer(\"my-layer\", {\n    \"id\": \"my-layer\",\n    \"type\": \"circle\",\n    \"source\": \"my-source\",\n    \"paint\": {\"circle-radius\": 5}\n})\n\n# Remove layers\nm.remove_layer(\"my-layer\")\nm.remove_source(\"my-source\")\n</code></pre>"},{"location":"#custom-javascript-methods","title":"Custom JavaScript Methods","text":"<pre><code># Call any MapLibre GL JS method\nm.call_js_method('easeTo', {\n    'center': [lng, lat],\n    'zoom': 14,\n    'duration': 2000\n})\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Check out the example notebooks in the <code>examples/</code> directory:</p> <ul> <li><code>basic_usage.ipynb</code> - Basic map creation and interaction</li> <li><code>advanced_features.ipynb</code> - Advanced layer management and styling</li> <li><code>multi_cell_test.ipynb</code> - Multi-cell rendering tests</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To set up for development:</p> <pre><code>git clone https://github.com/opengeos/anymap.git\ncd anymap\npip install -e .\n</code></pre> <p>Run tests:</p> <pre><code>python -m unittest tests.test_anymap -v\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>\u2705 MapLibre GL JS backend</li> <li>\u2705 Mapbox GL JS backend</li> <li>\u2705 Leaflet backend</li> <li>\u2705 OpenLayers backend</li> <li>\u2705 DeckGL backend</li> <li>\u2705 KeplerGL backend</li> <li>\ud83d\udd32 Cesium backend</li> <li>\ud83d\udd32 Potree backend</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"anymap/","title":"anymap module","text":"<p>Main module for anymap interactive mapping widgets.</p> <p>This module provides backward compatibility by re-exporting all classes from their new dedicated modules. All classes have been moved to separate modules for better organization and maintainability.</p> <p>For new code, consider importing directly from the specific modules: - from anymap.base import MapWidget - from anymap.maplibre import MapLibreMap - from anymap.mapbox import MapboxMap - from anymap.cesium import CesiumMap - from anymap.potree import PotreeMap - from anymap.deckgl import DeckGLMap - from anymap.compare import MapCompare</p>"},{"location":"base/","title":"base module","text":"<p>Base class for interactive map widgets using anywidget.</p> <p>This module provides the core MapWidget class that serves as the foundation for all mapping backends in the anymap library. It handles JavaScript communication, state management, and provides common mapping functionality.</p>"},{"location":"base/#anymap.base.MapWidget","title":"<code> MapWidget            (AnyWidget)         </code>","text":"<p>Base class for interactive map widgets using anywidget.</p> <p>This class provides the core functionality for creating interactive maps using different JavaScript mapping libraries. It handles communication between Python and JavaScript, manages map state, and provides common mapping operations.</p> <p>Attributes:</p> Name Type Description <code>center</code> <p>Map center coordinates as [longitude, latitude].</p> <code>zoom</code> <p>Map zoom level.</p> <code>width</code> <p>Map container width as CSS string.</p> <code>height</code> <p>Map container height as CSS string.</p> <code>style</code> <p>Map style configuration.</p> Source code in <code>anymap/base.py</code> <pre><code>class MapWidget(anywidget.AnyWidget):\n    \"\"\"Base class for interactive map widgets using anywidget.\n\n    This class provides the core functionality for creating interactive maps\n    using different JavaScript mapping libraries. It handles communication\n    between Python and JavaScript, manages map state, and provides common\n    mapping operations.\n\n    Attributes:\n        center: Map center coordinates as [longitude, latitude].\n        zoom: Map zoom level.\n        width: Map container width as CSS string.\n        height: Map container height as CSS string.\n        style: Map style configuration.\n    \"\"\"\n\n    # Widget traits for communication with JavaScript\n    center = traitlets.List([0.0, 0.0]).tag(sync=True)\n    zoom = traitlets.Float(2.0).tag(sync=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True)\n    style = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Communication traits\n    _js_calls = traitlets.List([]).tag(sync=True)\n    _js_events = traitlets.List([]).tag(sync=True)\n\n    # Internal state\n    _layers = traitlets.Dict({}).tag(sync=True)\n    _sources = traitlets.Dict({}).tag(sync=True)\n    _controls = traitlets.Dict({}).tag(sync=True)\n    _projection = traitlets.Dict({}).tag(sync=True)\n    _terrain = traitlets.Dict({}).tag(sync=True)\n\n    def __init__(self, **kwargs: Any) -&gt; None:\n        \"\"\"Initialize the map widget.\n\n        Args:\n            **kwargs: Additional keyword arguments passed to parent class.\n        \"\"\"\n        super().__init__(**kwargs)\n        self._event_handlers = {}\n        self._js_method_counter = 0\n\n    def call_js_method(self, method_name: str, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Call a JavaScript method on the map instance.\n\n        Args:\n            method_name: Name of the JavaScript method to call.\n            *args: Positional arguments to pass to the method.\n            **kwargs: Keyword arguments to pass to the method.\n        \"\"\"\n        call_data = {\n            \"id\": self._js_method_counter,\n            \"method\": method_name,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n        self._js_method_counter += 1\n\n        # Trigger sync by creating new list\n        current_calls = list(self._js_calls)\n        current_calls.append(call_data)\n        self._js_calls = current_calls\n\n    def on_map_event(\n        self, event_type: str, callback: Callable[[Dict[str, Any]], None]\n    ) -&gt; None:\n        \"\"\"Register a callback for map events.\n\n        Args:\n            event_type: Type of event to listen for (e.g., 'click', 'zoom').\n            callback: Function to call when the event occurs. Should accept\n                     a dictionary containing event data.\n        \"\"\"\n        if event_type not in self._event_handlers:\n            self._event_handlers[event_type] = []\n        self._event_handlers[event_type].append(callback)\n\n    @traitlets.observe(\"_js_events\")\n    def _handle_js_events(self, change: Dict[str, Any]) -&gt; None:\n        \"\"\"Handle events from JavaScript.\n\n        Args:\n            change: Dictionary containing the change information from traitlets.\n        \"\"\"\n        events = change[\"new\"]\n        for event in events:\n            event_type = event.get(\"type\")\n            if event_type in self._event_handlers:\n                for handler in self._event_handlers[event_type]:\n                    handler(event)\n\n    def set_center(self, lng: float, lat: float) -&gt; None:\n        \"\"\"Set the map center coordinates.\n\n        Args:\n            lng: Longitude coordinate.\n            lat: Latitude coordinate.\n        \"\"\"\n        self.center = [lng, lat]\n\n    def set_zoom(self, zoom: float) -&gt; None:\n        \"\"\"Set the map zoom level.\n\n        Args:\n            zoom: Zoom level (typically 0-20, where higher values show more detail).\n        \"\"\"\n        self.zoom = zoom\n\n    def fly_to(\n        self, lat: float, lng: float, zoom: Optional[float] = None, **kwargs\n    ) -&gt; None:\n        \"\"\"Animate the map to fly to a specific location.\n\n        Args:\n            lat: Target latitude coordinate.\n            lng: Target longitude coordinate.\n            zoom: Optional target zoom level. If None, keeps current zoom.\n        \"\"\"\n        options = {\"center\": [lat, lng], **kwargs}\n        if zoom is not None:\n            options[\"zoom\"] = zoom\n        self.call_js_method(\"flyTo\", options)\n\n    def add_layer(\n        self,\n        layer_id: str,\n        layer_config: Dict[str, Any],\n    ) -&gt; None:\n        \"\"\"Add a layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the layer.\n            layer_config: Dictionary containing layer configuration.\n        \"\"\"\n        # Store layer in local state for persistence\n        current_layers = dict(self._layers)\n        current_layers[layer_id] = layer_config\n        self._layers = current_layers\n\n        self.call_js_method(\"addLayer\", layer_config, layer_id)\n\n    def remove_layer(self, layer_id: str) -&gt; None:\n        \"\"\"Remove a layer from the map.\n\n        Args:\n            layer_id: Unique identifier of the layer to remove.\n        \"\"\"\n        # Remove from local state\n        current_layers = dict(self._layers)\n        if layer_id in current_layers:\n            del current_layers[layer_id]\n            self._layers = current_layers\n\n        self.call_js_method(\"removeLayer\", layer_id)\n\n    def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a data source to the map.\n\n        Args:\n            source_id: Unique identifier for the data source.\n            source_config: Dictionary containing source configuration.\n        \"\"\"\n        # Store source in local state for persistence\n        current_sources = dict(self._sources)\n        current_sources[source_id] = source_config\n        self._sources = current_sources\n\n        self.call_js_method(\"addSource\", source_id, source_config)\n\n    def remove_source(self, source_id: str) -&gt; None:\n        \"\"\"Remove a data source from the map.\n\n        Args:\n            source_id: Unique identifier of the source to remove.\n        \"\"\"\n        # Remove from local state\n        current_sources = dict(self._sources)\n        if source_id in current_sources:\n            del current_sources[source_id]\n            self._sources = current_sources\n\n        self.call_js_method(\"removeSource\", source_id)\n\n    def get_layers(self) -&gt; Dict[str, Any]:\n        \"\"\"Get all layers currently on the map.\n\n        Returns:\n            Dictionary mapping layer IDs to their configurations.\n        \"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Any]:\n        \"\"\"Get all sources currently on the map.\n\n        Returns:\n            Dictionary mapping source IDs to their configurations.\n        \"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Clear all layers from the map.\n\n        Removes all layers that have been added to the map.\n        \"\"\"\n        layer_ids = list(self._layers.keys())\n        for layer_id in layer_ids:\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Clear all sources from the map.\n\n        Removes all data sources that have been added to the map.\n        \"\"\"\n        source_ids = list(self._sources.keys())\n        for source_id in source_ids:\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\n\n        Removes all layers and data sources from the map.\n        \"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def to_html(\n        self,\n        filename: Optional[str] = None,\n        title: str = \"Anymap Export\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        **kwargs: Any,\n    ) -&gt; str:\n        \"\"\"Export the map to a standalone HTML file.\n\n        Args:\n            filename: Optional filename to save the HTML. If None, returns HTML string.\n            title: Title for the HTML page.\n            width: Width of the map container as CSS string.\n            height: Height of the map container as CSS string.\n            **kwargs: Additional arguments passed to the HTML template.\n\n        Returns:\n            HTML string content of the exported map.\n        \"\"\"\n        # Get the current map state\n        map_state = {\n            \"center\": self.center,\n            \"zoom\": self.zoom,\n            \"width\": width,\n            \"height\": height,\n            \"style\": self.style,\n            \"_layers\": dict(self._layers),\n            \"_sources\": dict(self._sources),\n            \"_controls\": dict(self._controls),\n            \"_terrain\": dict(self._terrain),\n        }\n\n        # Add class-specific attributes\n        if hasattr(self, \"style\"):\n            map_state[\"style\"] = self.style\n        if hasattr(self, \"bearing\"):\n            map_state[\"bearing\"] = self.bearing\n        if hasattr(self, \"pitch\"):\n            map_state[\"pitch\"] = self.pitch\n        if hasattr(self, \"antialias\"):\n            map_state[\"antialias\"] = self.antialias\n        if hasattr(self, \"access_token\"):\n            map_state[\"access_token\"] = self.access_token\n        if hasattr(self, \"_draw_data\"):\n            map_state[\"_draw_data\"] = dict(self._draw_data)\n\n        # Generate HTML content\n        html_content = self._generate_html_template(map_state, title, **kwargs)\n\n        # Save to file if filename is provided\n        if filename:\n            with open(filename, \"w\", encoding=\"utf-8\") as f:\n                f.write(html_content)\n\n        return html_content\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs: Any\n    ) -&gt; str:\n        \"\"\"Generate the HTML template with map state.\n\n        This method should be overridden by subclasses to provide library-specific templates.\n\n        Args:\n            map_state: Dictionary containing the current map state.\n            title: Title for the HTML page.\n            **kwargs: Additional arguments for template generation.\n\n        Returns:\n            HTML string content.\n\n        Raises:\n            NotImplementedError: This method must be implemented by subclasses.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement _generate_html_template\")\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map widget.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments passed to parent class.</p> <code>{}</code> Source code in <code>anymap/base.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n    \"\"\"Initialize the map widget.\n\n    Args:\n        **kwargs: Additional keyword arguments passed to parent class.\n    \"\"\"\n    super().__init__(**kwargs)\n    self._event_handlers = {}\n    self._js_method_counter = 0\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.add_layer","title":"<code>add_layer(self, layer_id, layer_config)</code>","text":"<p>Add a layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer.</p> required <code>layer_config</code> <code>Dict[str, Any]</code> <p>Dictionary containing layer configuration.</p> required Source code in <code>anymap/base.py</code> <pre><code>def add_layer(\n    self,\n    layer_id: str,\n    layer_config: Dict[str, Any],\n) -&gt; None:\n    \"\"\"Add a layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the layer.\n        layer_config: Dictionary containing layer configuration.\n    \"\"\"\n    # Store layer in local state for persistence\n    current_layers = dict(self._layers)\n    current_layers[layer_id] = layer_config\n    self._layers = current_layers\n\n    self.call_js_method(\"addLayer\", layer_config, layer_id)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.add_source","title":"<code>add_source(self, source_id, source_config)</code>","text":"<p>Add a data source to the map.</p> <p>Parameters:</p> Name Type Description Default <code>source_id</code> <code>str</code> <p>Unique identifier for the data source.</p> required <code>source_config</code> <code>Dict[str, Any]</code> <p>Dictionary containing source configuration.</p> required Source code in <code>anymap/base.py</code> <pre><code>def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a data source to the map.\n\n    Args:\n        source_id: Unique identifier for the data source.\n        source_config: Dictionary containing source configuration.\n    \"\"\"\n    # Store source in local state for persistence\n    current_sources = dict(self._sources)\n    current_sources[source_id] = source_config\n    self._sources = current_sources\n\n    self.call_js_method(\"addSource\", source_id, source_config)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.call_js_method","title":"<code>call_js_method(self, method_name, *args, **kwargs)</code>","text":"<p>Call a JavaScript method on the map instance.</p> <p>Parameters:</p> Name Type Description Default <code>method_name</code> <code>str</code> <p>Name of the JavaScript method to call.</p> required <code>*args</code> <code>Any</code> <p>Positional arguments to pass to the method.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Keyword arguments to pass to the method.</p> <code>{}</code> Source code in <code>anymap/base.py</code> <pre><code>def call_js_method(self, method_name: str, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Call a JavaScript method on the map instance.\n\n    Args:\n        method_name: Name of the JavaScript method to call.\n        *args: Positional arguments to pass to the method.\n        **kwargs: Keyword arguments to pass to the method.\n    \"\"\"\n    call_data = {\n        \"id\": self._js_method_counter,\n        \"method\": method_name,\n        \"args\": args,\n        \"kwargs\": kwargs,\n    }\n    self._js_method_counter += 1\n\n    # Trigger sync by creating new list\n    current_calls = list(self._js_calls)\n    current_calls.append(call_data)\n    self._js_calls = current_calls\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> <p>Removes all layers and data sources from the map.</p> Source code in <code>anymap/base.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\n\n    Removes all layers and data sources from the map.\n    \"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Clear all layers from the map.</p> <p>Removes all layers that have been added to the map.</p> Source code in <code>anymap/base.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Clear all layers from the map.\n\n    Removes all layers that have been added to the map.\n    \"\"\"\n    layer_ids = list(self._layers.keys())\n    for layer_id in layer_ids:\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Clear all sources from the map.</p> <p>Removes all data sources that have been added to the map.</p> Source code in <code>anymap/base.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Clear all sources from the map.\n\n    Removes all data sources that have been added to the map.\n    \"\"\"\n    source_ids = list(self._sources.keys())\n    for source_id in source_ids:\n        self.remove_source(source_id)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.fly_to","title":"<code>fly_to(self, lat, lng, zoom=None, **kwargs)</code>","text":"<p>Animate the map to fly to a specific location.</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>float</code> <p>Target latitude coordinate.</p> required <code>lng</code> <code>float</code> <p>Target longitude coordinate.</p> required <code>zoom</code> <code>Optional[float]</code> <p>Optional target zoom level. If None, keeps current zoom.</p> <code>None</code> Source code in <code>anymap/base.py</code> <pre><code>def fly_to(\n    self, lat: float, lng: float, zoom: Optional[float] = None, **kwargs\n) -&gt; None:\n    \"\"\"Animate the map to fly to a specific location.\n\n    Args:\n        lat: Target latitude coordinate.\n        lng: Target longitude coordinate.\n        zoom: Optional target zoom level. If None, keeps current zoom.\n    \"\"\"\n    options = {\"center\": [lat, lng], **kwargs}\n    if zoom is not None:\n        options[\"zoom\"] = zoom\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary mapping layer IDs to their configurations.</p> Source code in <code>anymap/base.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Any]:\n    \"\"\"Get all layers currently on the map.\n\n    Returns:\n        Dictionary mapping layer IDs to their configurations.\n    \"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary mapping source IDs to their configurations.</p> Source code in <code>anymap/base.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Any]:\n    \"\"\"Get all sources currently on the map.\n\n    Returns:\n        Dictionary mapping source IDs to their configurations.\n    \"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.on_map_event","title":"<code>on_map_event(self, event_type, callback)</code>","text":"<p>Register a callback for map events.</p> <p>Parameters:</p> Name Type Description Default <code>event_type</code> <code>str</code> <p>Type of event to listen for (e.g., 'click', 'zoom').</p> required <code>callback</code> <code>Callable[[Dict[str, Any]], NoneType]</code> <p>Function to call when the event occurs. Should accept      a dictionary containing event data.</p> required Source code in <code>anymap/base.py</code> <pre><code>def on_map_event(\n    self, event_type: str, callback: Callable[[Dict[str, Any]], None]\n) -&gt; None:\n    \"\"\"Register a callback for map events.\n\n    Args:\n        event_type: Type of event to listen for (e.g., 'click', 'zoom').\n        callback: Function to call when the event occurs. Should accept\n                 a dictionary containing event data.\n    \"\"\"\n    if event_type not in self._event_handlers:\n        self._event_handlers[event_type] = []\n    self._event_handlers[event_type].append(callback)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.remove_layer","title":"<code>remove_layer(self, layer_id)</code>","text":"<p>Remove a layer from the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier of the layer to remove.</p> required Source code in <code>anymap/base.py</code> <pre><code>def remove_layer(self, layer_id: str) -&gt; None:\n    \"\"\"Remove a layer from the map.\n\n    Args:\n        layer_id: Unique identifier of the layer to remove.\n    \"\"\"\n    # Remove from local state\n    current_layers = dict(self._layers)\n    if layer_id in current_layers:\n        del current_layers[layer_id]\n        self._layers = current_layers\n\n    self.call_js_method(\"removeLayer\", layer_id)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.remove_source","title":"<code>remove_source(self, source_id)</code>","text":"<p>Remove a data source from the map.</p> <p>Parameters:</p> Name Type Description Default <code>source_id</code> <code>str</code> <p>Unique identifier of the source to remove.</p> required Source code in <code>anymap/base.py</code> <pre><code>def remove_source(self, source_id: str) -&gt; None:\n    \"\"\"Remove a data source from the map.\n\n    Args:\n        source_id: Unique identifier of the source to remove.\n    \"\"\"\n    # Remove from local state\n    current_sources = dict(self._sources)\n    if source_id in current_sources:\n        del current_sources[source_id]\n        self._sources = current_sources\n\n    self.call_js_method(\"removeSource\", source_id)\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.set_center","title":"<code>set_center(self, lng, lat)</code>","text":"<p>Set the map center coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>lng</code> <code>float</code> <p>Longitude coordinate.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate.</p> required Source code in <code>anymap/base.py</code> <pre><code>def set_center(self, lng: float, lat: float) -&gt; None:\n    \"\"\"Set the map center coordinates.\n\n    Args:\n        lng: Longitude coordinate.\n        lat: Latitude coordinate.\n    \"\"\"\n    self.center = [lng, lat]\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.set_zoom","title":"<code>set_zoom(self, zoom)</code>","text":"<p>Set the map zoom level.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom level (typically 0-20, where higher values show more detail).</p> required Source code in <code>anymap/base.py</code> <pre><code>def set_zoom(self, zoom: float) -&gt; None:\n    \"\"\"Set the map zoom level.\n\n    Args:\n        zoom: Zoom level (typically 0-20, where higher values show more detail).\n    \"\"\"\n    self.zoom = zoom\n</code></pre>"},{"location":"base/#anymap.base.MapWidget.to_html","title":"<code>to_html(self, filename=None, title='Anymap Export', width='100%', height='600px', **kwargs)</code>","text":"<p>Export the map to a standalone HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Optional[str]</code> <p>Optional filename to save the HTML. If None, returns HTML string.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title for the HTML page.</p> <code>'Anymap Export'</code> <code>width</code> <code>str</code> <p>Width of the map container as CSS string.</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Height of the map container as CSS string.</p> <code>'600px'</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to the HTML template.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML string content of the exported map.</p> Source code in <code>anymap/base.py</code> <pre><code>def to_html(\n    self,\n    filename: Optional[str] = None,\n    title: str = \"Anymap Export\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"Export the map to a standalone HTML file.\n\n    Args:\n        filename: Optional filename to save the HTML. If None, returns HTML string.\n        title: Title for the HTML page.\n        width: Width of the map container as CSS string.\n        height: Height of the map container as CSS string.\n        **kwargs: Additional arguments passed to the HTML template.\n\n    Returns:\n        HTML string content of the exported map.\n    \"\"\"\n    # Get the current map state\n    map_state = {\n        \"center\": self.center,\n        \"zoom\": self.zoom,\n        \"width\": width,\n        \"height\": height,\n        \"style\": self.style,\n        \"_layers\": dict(self._layers),\n        \"_sources\": dict(self._sources),\n        \"_controls\": dict(self._controls),\n        \"_terrain\": dict(self._terrain),\n    }\n\n    # Add class-specific attributes\n    if hasattr(self, \"style\"):\n        map_state[\"style\"] = self.style\n    if hasattr(self, \"bearing\"):\n        map_state[\"bearing\"] = self.bearing\n    if hasattr(self, \"pitch\"):\n        map_state[\"pitch\"] = self.pitch\n    if hasattr(self, \"antialias\"):\n        map_state[\"antialias\"] = self.antialias\n    if hasattr(self, \"access_token\"):\n        map_state[\"access_token\"] = self.access_token\n    if hasattr(self, \"_draw_data\"):\n        map_state[\"_draw_data\"] = dict(self._draw_data)\n\n    # Generate HTML content\n    html_content = self._generate_html_template(map_state, title, **kwargs)\n\n    # Save to file if filename is provided\n    if filename:\n        with open(filename, \"w\", encoding=\"utf-8\") as f:\n            f.write(html_content)\n\n    return html_content\n</code></pre>"},{"location":"cesium/","title":"cesium module","text":"<p>Cesium ion implementation of the map widget for 3D globe visualization.</p>"},{"location":"cesium/#anymap.cesium.CesiumMap","title":"<code> CesiumMap            (MapWidget)         </code>","text":"<p>Cesium ion implementation of the map widget for 3D globe visualization.</p> Source code in <code>anymap/cesium.py</code> <pre><code>class CesiumMap(MapWidget):\n    \"\"\"Cesium ion implementation of the map widget for 3D globe visualization.\"\"\"\n\n    # Cesium-specific traits\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n    camera_height = traitlets.Float(10000000.0).tag(sync=True)  # 10M meters default\n    heading = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(-90.0).tag(sync=True)  # Looking down\n    roll = traitlets.Float(0.0).tag(sync=True)\n\n    # Cesium viewer options\n    base_layer_picker = traitlets.Bool(True).tag(sync=True)\n    fullscreen_button = traitlets.Bool(True).tag(sync=True)\n    vr_button = traitlets.Bool(False).tag(sync=True)\n    geocoder = traitlets.Bool(True).tag(sync=True)\n    home_button = traitlets.Bool(True).tag(sync=True)\n    info_box = traitlets.Bool(True).tag(sync=True)\n    scene_mode_picker = traitlets.Bool(True).tag(sync=True)\n    selection_indicator = traitlets.Bool(True).tag(sync=True)\n    timeline = traitlets.Bool(False).tag(sync=True)\n    navigation_help_button = traitlets.Bool(False).tag(\n        sync=True\n    )  # Disabled by default to prevent arrows\n    animation = traitlets.Bool(False).tag(sync=True)\n    should_animate = traitlets.Bool(False).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_cesium\n    _css = _css_cesium\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        camera_height: float = 10000000.0,\n        heading: float = 0.0,\n        pitch: float = -90.0,\n        roll: float = 0.0,\n        access_token: str = \"\",\n        base_layer_picker: bool = True,\n        fullscreen_button: bool = True,\n        vr_button: bool = False,\n        geocoder: bool = True,\n        home_button: bool = True,\n        info_box: bool = True,\n        scene_mode_picker: bool = True,\n        selection_indicator: bool = True,\n        timeline: bool = False,\n        navigation_help_button: bool = False,\n        animation: bool = False,\n        should_animate: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize Cesium map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level (used for camera height calculation)\n            width: Widget width\n            height: Widget height\n            camera_height: Camera height above ground in meters\n            heading: Camera heading in degrees (0 = north, 90 = east)\n            pitch: Camera pitch in degrees (-90 = looking down, 0 = horizon)\n            roll: Camera roll in degrees\n            access_token: Cesium ion access token (required for Cesium services).\n                         Get a free token at https://cesium.com/ion/signup\n                         Can also be set via CESIUM_TOKEN environment variable.\n            base_layer_picker: Show base layer picker widget\n            fullscreen_button: Show fullscreen button\n            vr_button: Show VR button\n            geocoder: Show geocoder search widget\n            home_button: Show home button\n            info_box: Show info box when clicking entities\n            scene_mode_picker: Show 3D/2D/Columbus view picker\n            selection_indicator: Show selection indicator\n            timeline: Show timeline widget\n            navigation_help_button: Show navigation help button\n            animation: Show animation widget\n            should_animate: Enable automatic animation\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            camera_height=camera_height,\n            heading=heading,\n            pitch=pitch,\n            roll=roll,\n            access_token=access_token,\n            base_layer_picker=base_layer_picker,\n            fullscreen_button=fullscreen_button,\n            vr_button=vr_button,\n            geocoder=geocoder,\n            home_button=home_button,\n            info_box=info_box,\n            scene_mode_picker=scene_mode_picker,\n            selection_indicator=selection_indicator,\n            timeline=timeline,\n            navigation_help_button=navigation_help_button,\n            animation=animation,\n            should_animate=should_animate,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Cesium access token from environment.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"CESIUM_TOKEN\") or os.environ.get(\"CESIUM_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Cesium access token found. Please set CESIUM_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://cesium.com/ion/signup\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Cesium ion access token.\"\"\"\n        self.access_token = token\n\n    def fly_to(\n        self,\n        latitude: float,\n        longitude: float,\n        height: Optional[float] = None,\n        heading: Optional[float] = None,\n        pitch: Optional[float] = None,\n        roll: Optional[float] = None,\n        duration: float = 3.0,\n    ) -&gt; None:\n        \"\"\"Fly the camera to a specific location.\"\"\"\n        options = {\"latitude\": latitude, \"longitude\": longitude, \"duration\": duration}\n        if height is not None:\n            options[\"height\"] = height\n        if heading is not None:\n            options[\"heading\"] = heading\n        if pitch is not None:\n            options[\"pitch\"] = pitch\n        if roll is not None:\n            options[\"roll\"] = roll\n\n        self.call_js_method(\"flyTo\", options)\n\n    def set_camera_position(\n        self,\n        latitude: float,\n        longitude: float,\n        height: float,\n        heading: float = 0.0,\n        pitch: float = -90.0,\n        roll: float = 0.0,\n    ) -&gt; None:\n        \"\"\"Set camera position immediately.\"\"\"\n        self.center = [latitude, longitude]\n        self.camera_height = height\n        self.heading = heading\n        self.pitch = pitch\n        self.roll = roll\n\n    def add_entity(self, entity_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add an entity to the globe.\"\"\"\n        self.call_js_method(\"addEntity\", entity_config)\n\n    def remove_entity(self, entity_id: str) -&gt; None:\n        \"\"\"Remove an entity from the globe.\"\"\"\n        self.call_js_method(\"removeEntity\", entity_id)\n\n    def add_point(\n        self,\n        latitude: float,\n        longitude: float,\n        height: float = 0.0,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        color: str = \"#ffff00\",\n        pixel_size: int = 10,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a point to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"point_{len(self._layers)}\"\n\n        entity_config = {\n            \"id\": entity_id,\n            \"position\": {\n                \"longitude\": longitude,\n                \"latitude\": latitude,\n                \"height\": height,\n            },\n            \"point\": {\n                \"pixelSize\": pixel_size,\n                \"color\": color,\n                \"outlineColor\": \"#000000\",\n                \"outlineWidth\": 2,\n                \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_billboard(\n        self,\n        latitude: float,\n        longitude: float,\n        image_url: str,\n        height: float = 0.0,\n        scale: float = 1.0,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a billboard (image marker) to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"billboard_{len(self._layers)}\"\n\n        entity_config = {\n            \"id\": entity_id,\n            \"position\": {\n                \"longitude\": longitude,\n                \"latitude\": latitude,\n                \"height\": height,\n            },\n            \"billboard\": {\n                \"image\": image_url,\n                \"scale\": scale,\n                \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_polyline(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"#ff0000\",\n        width: int = 2,\n        clamp_to_ground: bool = True,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a polyline to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"polyline_{len(self._layers)}\"\n\n        # Convert coordinates to Cesium format\n        positions = []\n        for coord in coordinates:\n            if len(coord) &gt;= 2:\n                positions.extend(\n                    [coord[1], coord[0], coord[2] if len(coord) &gt; 2 else 0]\n                )\n\n        entity_config = {\n            \"id\": entity_id,\n            \"polyline\": {\n                \"positions\": positions,\n                \"width\": width,\n                \"material\": color,\n                \"clampToGround\": clamp_to_ground,\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_polygon(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"#0000ff\",\n        outline_color: str = \"#000000\",\n        height: float = 0.0,\n        extrude_height: Optional[float] = None,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a polygon to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"polygon_{len(self._layers)}\"\n\n        # Convert coordinates to Cesium format\n        positions = []\n        for coord in coordinates:\n            if len(coord) &gt;= 2:\n                positions.extend([coord[1], coord[0]])\n\n        entity_config = {\n            \"id\": entity_id,\n            \"polygon\": {\n                \"hierarchy\": positions,\n                \"material\": color,\n                \"outline\": True,\n                \"outlineColor\": outline_color,\n                \"height\": height,\n            },\n        }\n\n        if extrude_height is not None:\n            entity_config[\"polygon\"][\"extrudedHeight\"] = extrude_height\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_data_source(\n        self,\n        source_type: str,\n        data: Union[str, Dict[str, Any]],\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a data source (GeoJSON, KML, CZML) to the globe.\"\"\"\n        config = {\"data\": data, \"options\": options or {}}\n        self.call_js_method(\"addDataSource\", source_type, config)\n\n    def add_geojson(\n        self, geojson_data: Dict[str, Any], options: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Add GeoJSON data to the globe.\"\"\"\n        self.add_data_source(\"geojson\", geojson_data, options)\n\n    def add_kml(self, kml_url: str, options: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Add KML data to the globe.\"\"\"\n        self.add_data_source(\"kml\", kml_url, options)\n\n    def add_czml(\n        self, czml_data: List[Dict[str, Any]], options: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Add CZML data to the globe.\"\"\"\n        self.add_data_source(\"czml\", czml_data, options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set terrain provider for the globe.\"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_cesium_world_terrain(\n        self, request_water_mask: bool = False, request_vertex_normals: bool = False\n    ) -&gt; None:\n        \"\"\"Set Cesium World Terrain as the terrain provider.\"\"\"\n        terrain_config = {\n            \"type\": \"cesium-world-terrain\",\n            \"requestWaterMask\": request_water_mask,\n            \"requestVertexNormals\": request_vertex_normals,\n        }\n        self.set_terrain(terrain_config)\n\n    def set_imagery(self, imagery_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Set imagery provider for the globe.\"\"\"\n        self.call_js_method(\"setImagery\", imagery_config)\n\n    def set_scene_mode_3d(self) -&gt; None:\n        \"\"\"Set scene to 3D mode.\"\"\"\n        self.call_js_method(\"setScene3D\")\n\n    def set_scene_mode_2d(self) -&gt; None:\n        \"\"\"Set scene to 2D mode.\"\"\"\n        self.call_js_method(\"setScene2D\")\n\n    def set_scene_mode_columbus(self) -&gt; None:\n        \"\"\"Set scene to Columbus view (2.5D).\"\"\"\n        self.call_js_method(\"setSceneColumbusView\")\n\n    def enable_lighting(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable globe lighting effects.\"\"\"\n        self.call_js_method(\"enableLighting\", enabled)\n\n    def enable_fog(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable atmospheric fog.\"\"\"\n        self.call_js_method(\"enableFog\", enabled)\n\n    def zoom_to_entity(self, entity_id: str) -&gt; None:\n        \"\"\"Zoom the camera to focus on a specific entity.\"\"\"\n        self.call_js_method(\"zoomToEntity\", entity_id)\n\n    def home(self) -&gt; None:\n        \"\"\"Reset camera to home position.\"\"\"\n        self.call_js_method(\"home\")\n\n    def clear_entities(self) -&gt; None:\n        \"\"\"Clear all entities from the globe.\"\"\"\n        # This would require tracking entities, for now use clear_layers\n        self.clear_layers()\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, width='100%', height='600px', camera_height=10000000.0, heading=0.0, pitch=-90.0, roll=0.0, access_token='', base_layer_picker=True, fullscreen_button=True, vr_button=False, geocoder=True, home_button=True, info_box=True, scene_mode_picker=True, selection_indicator=True, timeline=False, navigation_help_button=False, animation=False, should_animate=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize Cesium map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level (used for camera height calculation)</p> <code>2.0</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>camera_height</code> <code>float</code> <p>Camera height above ground in meters</p> <code>10000000.0</code> <code>heading</code> <code>float</code> <p>Camera heading in degrees (0 = north, 90 = east)</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Camera pitch in degrees (-90 = looking down, 0 = horizon)</p> <code>-90.0</code> <code>roll</code> <code>float</code> <p>Camera roll in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Cesium ion access token (required for Cesium services).          Get a free token at https://cesium.com/ion/signup          Can also be set via CESIUM_TOKEN environment variable.</p> <code>''</code> <code>base_layer_picker</code> <code>bool</code> <p>Show base layer picker widget</p> <code>True</code> <code>fullscreen_button</code> <code>bool</code> <p>Show fullscreen button</p> <code>True</code> <code>vr_button</code> <code>bool</code> <p>Show VR button</p> <code>False</code> <code>geocoder</code> <code>bool</code> <p>Show geocoder search widget</p> <code>True</code> <code>home_button</code> <code>bool</code> <p>Show home button</p> <code>True</code> <code>info_box</code> <code>bool</code> <p>Show info box when clicking entities</p> <code>True</code> <code>scene_mode_picker</code> <code>bool</code> <p>Show 3D/2D/Columbus view picker</p> <code>True</code> <code>selection_indicator</code> <code>bool</code> <p>Show selection indicator</p> <code>True</code> <code>timeline</code> <code>bool</code> <p>Show timeline widget</p> <code>False</code> <code>navigation_help_button</code> <code>bool</code> <p>Show navigation help button</p> <code>False</code> <code>animation</code> <code>bool</code> <p>Show animation widget</p> <code>False</code> <code>should_animate</code> <code>bool</code> <p>Enable automatic animation</p> <code>False</code> Source code in <code>anymap/cesium.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    camera_height: float = 10000000.0,\n    heading: float = 0.0,\n    pitch: float = -90.0,\n    roll: float = 0.0,\n    access_token: str = \"\",\n    base_layer_picker: bool = True,\n    fullscreen_button: bool = True,\n    vr_button: bool = False,\n    geocoder: bool = True,\n    home_button: bool = True,\n    info_box: bool = True,\n    scene_mode_picker: bool = True,\n    selection_indicator: bool = True,\n    timeline: bool = False,\n    navigation_help_button: bool = False,\n    animation: bool = False,\n    should_animate: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize Cesium map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level (used for camera height calculation)\n        width: Widget width\n        height: Widget height\n        camera_height: Camera height above ground in meters\n        heading: Camera heading in degrees (0 = north, 90 = east)\n        pitch: Camera pitch in degrees (-90 = looking down, 0 = horizon)\n        roll: Camera roll in degrees\n        access_token: Cesium ion access token (required for Cesium services).\n                     Get a free token at https://cesium.com/ion/signup\n                     Can also be set via CESIUM_TOKEN environment variable.\n        base_layer_picker: Show base layer picker widget\n        fullscreen_button: Show fullscreen button\n        vr_button: Show VR button\n        geocoder: Show geocoder search widget\n        home_button: Show home button\n        info_box: Show info box when clicking entities\n        scene_mode_picker: Show 3D/2D/Columbus view picker\n        selection_indicator: Show selection indicator\n        timeline: Show timeline widget\n        navigation_help_button: Show navigation help button\n        animation: Show animation widget\n        should_animate: Enable automatic animation\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        camera_height=camera_height,\n        heading=heading,\n        pitch=pitch,\n        roll=roll,\n        access_token=access_token,\n        base_layer_picker=base_layer_picker,\n        fullscreen_button=fullscreen_button,\n        vr_button=vr_button,\n        geocoder=geocoder,\n        home_button=home_button,\n        info_box=info_box,\n        scene_mode_picker=scene_mode_picker,\n        selection_indicator=selection_indicator,\n        timeline=timeline,\n        navigation_help_button=navigation_help_button,\n        animation=animation,\n        should_animate=should_animate,\n        **kwargs,\n    )\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_billboard","title":"<code>add_billboard(self, latitude, longitude, image_url, height=0.0, scale=1.0, name=None, description=None, entity_id=None)</code>","text":"<p>Add a billboard (image marker) to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_billboard(\n    self,\n    latitude: float,\n    longitude: float,\n    image_url: str,\n    height: float = 0.0,\n    scale: float = 1.0,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a billboard (image marker) to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"billboard_{len(self._layers)}\"\n\n    entity_config = {\n        \"id\": entity_id,\n        \"position\": {\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"height\": height,\n        },\n        \"billboard\": {\n            \"image\": image_url,\n            \"scale\": scale,\n            \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_czml","title":"<code>add_czml(self, czml_data, options=None)</code>","text":"<p>Add CZML data to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_czml(\n    self, czml_data: List[Dict[str, Any]], options: Optional[Dict[str, Any]] = None\n) -&gt; None:\n    \"\"\"Add CZML data to the globe.\"\"\"\n    self.add_data_source(\"czml\", czml_data, options)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_data_source","title":"<code>add_data_source(self, source_type, data, options=None)</code>","text":"<p>Add a data source (GeoJSON, KML, CZML) to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_data_source(\n    self,\n    source_type: str,\n    data: Union[str, Dict[str, Any]],\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a data source (GeoJSON, KML, CZML) to the globe.\"\"\"\n    config = {\"data\": data, \"options\": options or {}}\n    self.call_js_method(\"addDataSource\", source_type, config)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_entity","title":"<code>add_entity(self, entity_config)</code>","text":"<p>Add an entity to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_entity(self, entity_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add an entity to the globe.\"\"\"\n    self.call_js_method(\"addEntity\", entity_config)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_geojson","title":"<code>add_geojson(self, geojson_data, options=None)</code>","text":"<p>Add GeoJSON data to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_geojson(\n    self, geojson_data: Dict[str, Any], options: Optional[Dict[str, Any]] = None\n) -&gt; None:\n    \"\"\"Add GeoJSON data to the globe.\"\"\"\n    self.add_data_source(\"geojson\", geojson_data, options)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_kml","title":"<code>add_kml(self, kml_url, options=None)</code>","text":"<p>Add KML data to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_kml(self, kml_url: str, options: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Add KML data to the globe.\"\"\"\n    self.add_data_source(\"kml\", kml_url, options)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_point","title":"<code>add_point(self, latitude, longitude, height=0.0, name=None, description=None, color='#ffff00', pixel_size=10, entity_id=None)</code>","text":"<p>Add a point to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_point(\n    self,\n    latitude: float,\n    longitude: float,\n    height: float = 0.0,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    color: str = \"#ffff00\",\n    pixel_size: int = 10,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a point to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"point_{len(self._layers)}\"\n\n    entity_config = {\n        \"id\": entity_id,\n        \"position\": {\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"height\": height,\n        },\n        \"point\": {\n            \"pixelSize\": pixel_size,\n            \"color\": color,\n            \"outlineColor\": \"#000000\",\n            \"outlineWidth\": 2,\n            \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_polygon","title":"<code>add_polygon(self, coordinates, color='#0000ff', outline_color='#000000', height=0.0, extrude_height=None, name=None, description=None, entity_id=None)</code>","text":"<p>Add a polygon to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_polygon(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"#0000ff\",\n    outline_color: str = \"#000000\",\n    height: float = 0.0,\n    extrude_height: Optional[float] = None,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a polygon to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"polygon_{len(self._layers)}\"\n\n    # Convert coordinates to Cesium format\n    positions = []\n    for coord in coordinates:\n        if len(coord) &gt;= 2:\n            positions.extend([coord[1], coord[0]])\n\n    entity_config = {\n        \"id\": entity_id,\n        \"polygon\": {\n            \"hierarchy\": positions,\n            \"material\": color,\n            \"outline\": True,\n            \"outlineColor\": outline_color,\n            \"height\": height,\n        },\n    }\n\n    if extrude_height is not None:\n        entity_config[\"polygon\"][\"extrudedHeight\"] = extrude_height\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.add_polyline","title":"<code>add_polyline(self, coordinates, color='#ff0000', width=2, clamp_to_ground=True, name=None, description=None, entity_id=None)</code>","text":"<p>Add a polyline to the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def add_polyline(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"#ff0000\",\n    width: int = 2,\n    clamp_to_ground: bool = True,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a polyline to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"polyline_{len(self._layers)}\"\n\n    # Convert coordinates to Cesium format\n    positions = []\n    for coord in coordinates:\n        if len(coord) &gt;= 2:\n            positions.extend(\n                [coord[1], coord[0], coord[2] if len(coord) &gt; 2 else 0]\n            )\n\n    entity_config = {\n        \"id\": entity_id,\n        \"polyline\": {\n            \"positions\": positions,\n            \"width\": width,\n            \"material\": color,\n            \"clampToGround\": clamp_to_ground,\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.clear_entities","title":"<code>clear_entities(self)</code>","text":"<p>Clear all entities from the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def clear_entities(self) -&gt; None:\n    \"\"\"Clear all entities from the globe.\"\"\"\n    # This would require tracking entities, for now use clear_layers\n    self.clear_layers()\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.enable_fog","title":"<code>enable_fog(self, enabled=True)</code>","text":"<p>Enable or disable atmospheric fog.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def enable_fog(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable atmospheric fog.\"\"\"\n    self.call_js_method(\"enableFog\", enabled)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.enable_lighting","title":"<code>enable_lighting(self, enabled=True)</code>","text":"<p>Enable or disable globe lighting effects.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def enable_lighting(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable globe lighting effects.\"\"\"\n    self.call_js_method(\"enableLighting\", enabled)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.fly_to","title":"<code>fly_to(self, latitude, longitude, height=None, heading=None, pitch=None, roll=None, duration=3.0)</code>","text":"<p>Fly the camera to a specific location.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def fly_to(\n    self,\n    latitude: float,\n    longitude: float,\n    height: Optional[float] = None,\n    heading: Optional[float] = None,\n    pitch: Optional[float] = None,\n    roll: Optional[float] = None,\n    duration: float = 3.0,\n) -&gt; None:\n    \"\"\"Fly the camera to a specific location.\"\"\"\n    options = {\"latitude\": latitude, \"longitude\": longitude, \"duration\": duration}\n    if height is not None:\n        options[\"height\"] = height\n    if heading is not None:\n        options[\"heading\"] = heading\n    if pitch is not None:\n        options[\"pitch\"] = pitch\n    if roll is not None:\n        options[\"roll\"] = roll\n\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.home","title":"<code>home(self)</code>","text":"<p>Reset camera to home position.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def home(self) -&gt; None:\n    \"\"\"Reset camera to home position.\"\"\"\n    self.call_js_method(\"home\")\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.remove_entity","title":"<code>remove_entity(self, entity_id)</code>","text":"<p>Remove an entity from the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def remove_entity(self, entity_id: str) -&gt; None:\n    \"\"\"Remove an entity from the globe.\"\"\"\n    self.call_js_method(\"removeEntity\", entity_id)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Cesium ion access token.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Cesium ion access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_camera_position","title":"<code>set_camera_position(self, latitude, longitude, height, heading=0.0, pitch=-90.0, roll=0.0)</code>","text":"<p>Set camera position immediately.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_camera_position(\n    self,\n    latitude: float,\n    longitude: float,\n    height: float,\n    heading: float = 0.0,\n    pitch: float = -90.0,\n    roll: float = 0.0,\n) -&gt; None:\n    \"\"\"Set camera position immediately.\"\"\"\n    self.center = [latitude, longitude]\n    self.camera_height = height\n    self.heading = heading\n    self.pitch = pitch\n    self.roll = roll\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_cesium_world_terrain","title":"<code>set_cesium_world_terrain(self, request_water_mask=False, request_vertex_normals=False)</code>","text":"<p>Set Cesium World Terrain as the terrain provider.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_cesium_world_terrain(\n    self, request_water_mask: bool = False, request_vertex_normals: bool = False\n) -&gt; None:\n    \"\"\"Set Cesium World Terrain as the terrain provider.\"\"\"\n    terrain_config = {\n        \"type\": \"cesium-world-terrain\",\n        \"requestWaterMask\": request_water_mask,\n        \"requestVertexNormals\": request_vertex_normals,\n    }\n    self.set_terrain(terrain_config)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_imagery","title":"<code>set_imagery(self, imagery_config)</code>","text":"<p>Set imagery provider for the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_imagery(self, imagery_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Set imagery provider for the globe.\"\"\"\n    self.call_js_method(\"setImagery\", imagery_config)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_scene_mode_2d","title":"<code>set_scene_mode_2d(self)</code>","text":"<p>Set scene to 2D mode.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_scene_mode_2d(self) -&gt; None:\n    \"\"\"Set scene to 2D mode.\"\"\"\n    self.call_js_method(\"setScene2D\")\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_scene_mode_3d","title":"<code>set_scene_mode_3d(self)</code>","text":"<p>Set scene to 3D mode.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_scene_mode_3d(self) -&gt; None:\n    \"\"\"Set scene to 3D mode.\"\"\"\n    self.call_js_method(\"setScene3D\")\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_scene_mode_columbus","title":"<code>set_scene_mode_columbus(self)</code>","text":"<p>Set scene to Columbus view (2.5D).</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_scene_mode_columbus(self) -&gt; None:\n    \"\"\"Set scene to Columbus view (2.5D).\"\"\"\n    self.call_js_method(\"setSceneColumbusView\")\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set terrain provider for the globe.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set terrain provider for the globe.\"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"cesium/#anymap.cesium.CesiumMap.zoom_to_entity","title":"<code>zoom_to_entity(self, entity_id)</code>","text":"<p>Zoom the camera to focus on a specific entity.</p> Source code in <code>anymap/cesium.py</code> <pre><code>def zoom_to_entity(self, entity_id: str) -&gt; None:\n    \"\"\"Zoom the camera to focus on a specific entity.\"\"\"\n    self.call_js_method(\"zoomToEntity\", entity_id)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"compare/","title":"compare module","text":"<p>Map comparison widget for side-by-side comparison of two maps.</p>"},{"location":"compare/#anymap.compare.MapCompare","title":"<code> MapCompare            (AnyWidget)         </code>","text":"<p>Map comparison widget for side-by-side comparison of two maps.</p> Source code in <code>anymap/compare.py</code> <pre><code>class MapCompare(anywidget.AnyWidget):\n    \"\"\"Map comparison widget for side-by-side comparison of two maps.\"\"\"\n\n    # Map configuration traits\n    left_map_config = traitlets.Dict({}).tag(sync=True)\n    right_map_config = traitlets.Dict({}).tag(sync=True)\n\n    # Widget dimensions\n    width = traitlets.Unicode(\"100%\").tag(sync=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True)\n\n    # Comparison options\n    orientation = traitlets.Unicode(\"vertical\").tag(\n        sync=True\n    )  # \"vertical\" or \"horizontal\"\n    mousemove = traitlets.Bool(False).tag(sync=True)  # Enable swipe on mouse move\n    slider_position = traitlets.Float(0.5).tag(sync=True)  # Slider position (0-1)\n\n    # Backend type\n    backend = traitlets.Unicode(\"maplibre\").tag(sync=True)  # \"maplibre\" or \"mapbox\"\n\n    # Synchronization options\n    sync_center = traitlets.Bool(True).tag(sync=True)\n    sync_zoom = traitlets.Bool(True).tag(sync=True)\n    sync_bearing = traitlets.Bool(True).tag(sync=True)\n    sync_pitch = traitlets.Bool(True).tag(sync=True)\n\n    # Communication traits\n    _js_calls = traitlets.List([]).tag(sync=True)\n    _js_events = traitlets.List([]).tag(sync=True)\n\n    def __init__(\n        self,\n        left_map: Optional[Dict[str, Any]] = None,\n        right_map: Optional[Dict[str, Any]] = None,\n        backend: str = \"maplibre\",\n        orientation: str = \"vertical\",\n        mousemove: bool = False,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        sync_center: bool = True,\n        sync_zoom: bool = True,\n        sync_bearing: bool = True,\n        sync_pitch: bool = True,\n        **kwargs,\n    ):\n        \"\"\"Initialize MapCompare widget.\n\n        Args:\n            left_map: Configuration for the left/before map\n            right_map: Configuration for the right/after map\n            backend: Map backend to use (\"maplibre\" or \"mapbox\")\n            orientation: Comparison orientation (\"vertical\" or \"horizontal\")\n            mousemove: Enable swipe on mouse move\n            width: Widget width\n            height: Widget height\n            sync_center: Synchronize map center\n            sync_zoom: Synchronize map zoom\n            sync_bearing: Synchronize map bearing\n            sync_pitch: Synchronize map pitch\n        \"\"\"\n        # Set default map configurations\n        if left_map is None:\n            left_map = {\n                \"center\": [0.0, 0.0],\n                \"zoom\": 2.0,\n                \"style\": (\n                    \"https://demotiles.maplibre.org/style.json\"\n                    if backend == \"maplibre\"\n                    else \"mapbox://styles/mapbox/streets-v12\"\n                ),\n            }\n        if right_map is None:\n            right_map = {\n                \"center\": [0.0, 0.0],\n                \"zoom\": 2.0,\n                \"style\": (\n                    \"https://demotiles.maplibre.org/style.json\"\n                    if backend == \"maplibre\"\n                    else \"mapbox://styles/mapbox/satellite-v9\"\n                ),\n            }\n\n        super().__init__(\n            left_map_config=left_map,\n            right_map_config=right_map,\n            backend=backend,\n            orientation=orientation,\n            mousemove=mousemove,\n            width=width,\n            height=height,\n            sync_center=sync_center,\n            sync_zoom=sync_zoom,\n            sync_bearing=sync_bearing,\n            sync_pitch=sync_pitch,\n            **kwargs,\n        )\n\n        self._event_handlers = {}\n        self._js_method_counter = 0\n\n        # Set JavaScript and CSS based on backend\n        if backend == \"maplibre\":\n            self._esm = self._load_maplibre_compare_js()\n            self._css = self._load_maplibre_compare_css()\n        else:  # mapbox\n            self._esm = self._load_mapbox_compare_js()\n            self._css = self._load_mapbox_compare_css()\n\n    def _load_maplibre_compare_js(self) -&gt; str:\n        \"\"\"Load MapLibre comparison JavaScript code.\"\"\"\n        # This will be implemented when we create the JS file\n        try:\n            with open(\n                pathlib.Path(__file__).parent / \"static\" / \"maplibre_compare_widget.js\",\n                \"r\",\n            ) as f:\n                return f.read()\n        except FileNotFoundError:\n            return \"\"\n\n    def _load_maplibre_compare_css(self) -&gt; str:\n        \"\"\"Load MapLibre comparison CSS styles.\"\"\"\n        try:\n            with open(\n                pathlib.Path(__file__).parent\n                / \"static\"\n                / \"maplibre_compare_widget.css\",\n                \"r\",\n            ) as f:\n                return f.read()\n        except FileNotFoundError:\n            return \"\"\n\n    def _load_mapbox_compare_js(self) -&gt; str:\n        \"\"\"Load Mapbox comparison JavaScript code.\"\"\"\n        try:\n            with open(\n                pathlib.Path(__file__).parent / \"static\" / \"mapbox_compare_widget.js\",\n                \"r\",\n            ) as f:\n                return f.read()\n        except FileNotFoundError:\n            return \"\"\n\n    def _load_mapbox_compare_css(self) -&gt; str:\n        \"\"\"Load Mapbox comparison CSS styles.\"\"\"\n        try:\n            with open(\n                pathlib.Path(__file__).parent / \"static\" / \"mapbox_compare_widget.css\",\n                \"r\",\n            ) as f:\n                return f.read()\n        except FileNotFoundError:\n            return \"\"\n\n    def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n        \"\"\"Call a JavaScript method on the compare instance.\"\"\"\n        call_data = {\n            \"id\": self._js_method_counter,\n            \"method\": method_name,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n        self._js_method_counter += 1\n\n        # Trigger sync by creating new list\n        current_calls = list(self._js_calls)\n        current_calls.append(call_data)\n        self._js_calls = current_calls\n\n    def on_event(self, event_type: str, callback):\n        \"\"\"Register a callback for comparison events.\"\"\"\n        if event_type not in self._event_handlers:\n            self._event_handlers[event_type] = []\n        self._event_handlers[event_type].append(callback)\n\n    @traitlets.observe(\"_js_events\")\n    def _handle_js_events(self, change):\n        \"\"\"Handle events from JavaScript.\"\"\"\n        events = change[\"new\"]\n        for event in events:\n            event_type = event.get(\"type\")\n            if event_type in self._event_handlers:\n                for handler in self._event_handlers[event_type]:\n                    handler(event)\n\n    def set_slider_position(self, position: float) -&gt; None:\n        \"\"\"Set the slider position.\n\n        Args:\n            position: Slider position (0.0 to 1.0)\n        \"\"\"\n        if not 0.0 &lt;= position &lt;= 1.0:\n            raise ValueError(\"Position must be between 0.0 and 1.0\")\n        self.slider_position = position\n        self.call_js_method(\"setSlider\", position)\n\n    def set_orientation(self, orientation: str) -&gt; None:\n        \"\"\"Set the comparison orientation.\n\n        Args:\n            orientation: \"vertical\" or \"horizontal\"\n        \"\"\"\n        if orientation not in [\"vertical\", \"horizontal\"]:\n            raise ValueError(\"Orientation must be 'vertical' or 'horizontal'\")\n        self.orientation = orientation\n        self.call_js_method(\"setOrientation\", orientation)\n\n    def enable_mousemove(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable swipe on mouse move.\n\n        Args:\n            enabled: Whether to enable mousemove\n        \"\"\"\n        self.mousemove = enabled\n        self.call_js_method(\"setMousemove\", enabled)\n\n    def set_sync_options(\n        self,\n        center: Optional[bool] = None,\n        zoom: Optional[bool] = None,\n        bearing: Optional[bool] = None,\n        pitch: Optional[bool] = None,\n    ) -&gt; None:\n        \"\"\"Set synchronization options.\n\n        Args:\n            center: Synchronize map center\n            zoom: Synchronize map zoom\n            bearing: Synchronize map bearing\n            pitch: Synchronize map pitch\n        \"\"\"\n        if center is not None:\n            self.sync_center = center\n        if zoom is not None:\n            self.sync_zoom = zoom\n        if bearing is not None:\n            self.sync_bearing = bearing\n        if pitch is not None:\n            self.sync_pitch = pitch\n\n        sync_options = {\n            \"center\": self.sync_center,\n            \"zoom\": self.sync_zoom,\n            \"bearing\": self.sync_bearing,\n            \"pitch\": self.sync_pitch,\n        }\n        self.call_js_method(\"setSyncOptions\", sync_options)\n\n    def update_left_map(self, config: Dict[str, Any]) -&gt; None:\n        \"\"\"Update the left map configuration.\n\n        Args:\n            config: New configuration for the left map\n        \"\"\"\n        self.left_map_config = config\n        self.call_js_method(\"updateLeftMap\", config)\n\n    def update_right_map(self, config: Dict[str, Any]) -&gt; None:\n        \"\"\"Update the right map configuration.\n\n        Args:\n            config: New configuration for the right map\n        \"\"\"\n        self.right_map_config = config\n        self.call_js_method(\"updateRightMap\", config)\n\n    def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n        \"\"\"Fly both maps to a specific location.\n\n        Args:\n            lat: Latitude\n            lng: Longitude\n            zoom: Zoom level (optional)\n        \"\"\"\n        options = {\"center\": [lat, lng]}\n        if zoom is not None:\n            options[\"zoom\"] = zoom\n        self.call_js_method(\"flyTo\", options)\n\n    def to_html(\n        self,\n        filename: Optional[str] = None,\n        title: str = \"Map Comparison\",\n        **kwargs,\n    ) -&gt; str:\n        \"\"\"Export the comparison widget to a standalone HTML file.\n\n        Args:\n            filename: Optional filename to save the HTML. If None, returns HTML string.\n            title: Title for the HTML page\n            **kwargs: Additional arguments passed to the HTML template\n\n        Returns:\n            HTML string content\n        \"\"\"\n        # Get the current widget state\n        widget_state = {\n            \"left_map_config\": dict(self.left_map_config),\n            \"right_map_config\": dict(self.right_map_config),\n            \"backend\": self.backend,\n            \"orientation\": self.orientation,\n            \"mousemove\": self.mousemove,\n            \"slider_position\": self.slider_position,\n            \"sync_center\": self.sync_center,\n            \"sync_zoom\": self.sync_zoom,\n            \"sync_bearing\": self.sync_bearing,\n            \"sync_pitch\": self.sync_pitch,\n            \"width\": self.width,\n            \"height\": self.height,\n        }\n\n        # Generate HTML content\n        html_content = self._generate_html_template(widget_state, title, **kwargs)\n\n        # Save to file if filename is provided\n        if filename:\n            with open(filename, \"w\", encoding=\"utf-8\") as f:\n                f.write(html_content)\n\n        return html_content\n\n    def _generate_html_template(\n        self, widget_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate the HTML template for map comparison.\"\"\"\n        # Serialize widget state for JavaScript\n        widget_state_json = json.dumps(widget_state, indent=2)\n\n        # Choose CDN URLs based on backend\n        if widget_state[\"backend\"] == \"maplibre\":\n            map_js_url = \"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.js\"\n            map_css_url = \"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.css\"\n            global_var = \"maplibregl\"\n        else:  # mapbox\n            map_js_url = \"https://api.mapbox.com/mapbox-gl-js/v3.13.0/mapbox-gl.js\"\n            map_css_url = \"https://api.mapbox.com/mapbox-gl-js/v3.13.0/mapbox-gl.css\"\n            global_var = \"mapboxgl\"\n\n        # Generate access token warning for Mapbox\n        access_token_warning = \"\"\n        if widget_state[\"backend\"] == \"mapbox\":\n            left_token = widget_state[\"left_map_config\"].get(\"access_token\", \"\")\n            right_token = widget_state[\"right_map_config\"].get(\"access_token\", \"\")\n            if not left_token and not right_token:\n                access_token_warning = \"\"\"\n                    &lt;div class=\"access-token-warning\"&gt;\n                        &lt;strong&gt;Warning:&lt;/strong&gt; This map requires a Mapbox access token.\n                        Get a free token at &lt;a href=\"https://account.mapbox.com/access-tokens/\" target=\"_blank\"&gt;Mapbox&lt;/a&gt;\n                        and set it in the JavaScript code below.\n                    &lt;/div&gt;\n                \"\"\"\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"{map_js_url}\"&gt;&lt;/script&gt;\n    &lt;link href=\"{map_css_url}\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://unpkg.com/@maplibre/maplibre-gl-compare@0.5.0/dist/maplibre-gl-compare.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://unpkg.com/@maplibre/maplibre-gl-compare@0.5.0/dist/maplibre-gl-compare.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n            background-color: #f5f5f5;\n        }}\n        .container {{\n            max-width: 1200px;\n            margin: 0 auto;\n            background-color: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            overflow: hidden;\n        }}\n        .header {{\n            padding: 20px;\n            background-color: #fff;\n            border-bottom: 1px solid #eee;\n        }}\n        h1 {{\n            margin: 0;\n            color: #333;\n            font-size: 24px;\n        }}\n        .map-container {{\n            position: relative;\n            width: {widget_state['width']};\n            height: {widget_state['height']};\n            margin: 20px;\n        }}\n        #comparison-container {{\n            position: relative;\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n        }}\n        #before, #after {{\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            width: 100%;\n            height: 100%;\n        }}\n        .access-token-warning {{\n            background-color: #fff3cd;\n            border: 1px solid #ffeaa7;\n            color: #856404;\n            padding: 15px;\n            margin: 20px;\n            border-radius: 4px;\n        }}\n        .access-token-warning a {{\n            color: #856404;\n            text-decoration: underline;\n        }}\n        .controls {{\n            padding: 20px;\n            background-color: #f8f9fa;\n            border-top: 1px solid #eee;\n        }}\n        .control-group {{\n            margin-bottom: 15px;\n        }}\n        .control-group label {{\n            display: inline-block;\n            width: 120px;\n            font-weight: bold;\n            color: #333;\n        }}\n        .control-group input, .control-group select {{\n            padding: 5px 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            font-size: 14px;\n        }}\n        .control-group button {{\n            padding: 8px 16px;\n            background-color: #007cba;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n        }}\n        .control-group button:hover {{\n            background-color: #005a8b;\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;h1&gt;{title}&lt;/h1&gt;\n            &lt;p&gt;Interactive map comparison powered by anymap&lt;/p&gt;\n        &lt;/div&gt;\n\n        {access_token_warning}\n\n        &lt;div class=\"map-container\"&gt;\n            &lt;div id=\"comparison-container\"&gt;\n                &lt;div id=\"before\"&gt;&lt;/div&gt;\n                &lt;div id=\"after\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"controls\"&gt;\n            &lt;div class=\"control-group\"&gt;\n                &lt;label&gt;Note:&lt;/label&gt;\n                &lt;span&gt;Use the slider on the map to adjust position&lt;/span&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"control-group\"&gt;\n                &lt;label for=\"orientation\"&gt;Orientation:&lt;/label&gt;\n                &lt;select id=\"orientation\"&gt;\n                    &lt;option value=\"vertical\" {\"selected\" if widget_state['orientation'] == 'vertical' else \"\"}&gt;Vertical&lt;/option&gt;\n                    &lt;option value=\"horizontal\" {\"selected\" if widget_state['orientation'] == 'horizontal' else \"\"}&gt;Horizontal&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"control-group\"&gt;\n                &lt;label for=\"mousemove\"&gt;Mouse Move:&lt;/label&gt;\n                &lt;input type=\"checkbox\" id=\"mousemove\" {\"checked\" if widget_state['mousemove'] else \"\"}&gt;\n                &lt;span&gt;Enable swipe on mouse move&lt;/span&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"control-group\"&gt;\n                &lt;button onclick=\"flyToSanFrancisco()\"&gt;Fly to San Francisco&lt;/button&gt;\n                &lt;button onclick=\"flyToNewYork()\"&gt;Fly to New York&lt;/button&gt;\n                &lt;button onclick=\"flyToLondon()\"&gt;Fly to London&lt;/button&gt;\n                &lt;button onclick=\"flyToTokyo()\"&gt;Fly to Tokyo&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // Widget state from Python\n        const widgetState = {widget_state_json};\n\n        // Set access token for Mapbox if needed\n        if (widgetState.backend === 'mapbox') {{\n            const accessToken = widgetState.left_map_config.access_token || widgetState.right_map_config.access_token || '';\n            if (accessToken) {{\n                {global_var}.accessToken = accessToken;\n            }}\n        }}\n\n        // Initialize maps\n        let beforeMap, afterMap, compare;\n\n        function initializeMaps() {{\n            const leftConfig = widgetState.left_map_config;\n            const rightConfig = widgetState.right_map_config;\n\n            // Create before map\n            beforeMap = new {global_var}.Map({{\n                container: 'before',\n                style: leftConfig.style,\n                center: leftConfig.center ? [leftConfig.center[1], leftConfig.center[0]] : [0, 0],\n                zoom: leftConfig.zoom || 2,\n                bearing: leftConfig.bearing || 0,\n                pitch: leftConfig.pitch || 0,\n                antialias: leftConfig.antialias !== undefined ? leftConfig.antialias : true\n            }});\n\n            // Create after map\n            afterMap = new {global_var}.Map({{\n                container: 'after',\n                style: rightConfig.style,\n                center: rightConfig.center ? [rightConfig.center[1], rightConfig.center[0]] : [0, 0],\n                zoom: rightConfig.zoom || 2,\n                bearing: rightConfig.bearing || 0,\n                pitch: rightConfig.pitch || 0,\n                antialias: rightConfig.antialias !== undefined ? rightConfig.antialias : true\n            }});\n\n            // Wait for both maps to load\n            Promise.all([\n                new Promise(resolve =&gt; beforeMap.on('load', resolve)),\n                new Promise(resolve =&gt; afterMap.on('load', resolve))\n            ]).then(() =&gt; {{\n                createComparison();\n                setupEventListeners();\n                // Note: MapLibre Compare plugin handles synchronization internally\n                // Custom synchronization disabled to prevent conflicts and improve performance\n            }});\n        }}\n\n        function createComparison() {{\n            if (compare) {{\n                compare.remove();\n            }}\n\n            compare = new {global_var}.Compare(beforeMap, afterMap, \"#comparison-container\", {{\n                orientation: widgetState.orientation,\n                mousemove: widgetState.mousemove\n            }});\n\n            console.log('Compare widget created successfully');\n            console.log('Before map scrollZoom enabled:', beforeMap.scrollZoom.isEnabled());\n            console.log('After map scrollZoom enabled:', afterMap.scrollZoom.isEnabled());\n        }}\n\n        function setupSynchronization() {{\n            if (widgetState.sync_center || widgetState.sync_zoom || widgetState.sync_bearing || widgetState.sync_pitch) {{\n                let isSync = false;\n\n                function syncMaps(sourceMap, targetMap) {{\n                    if (isSync) return; // Prevent infinite loops\n                    isSync = true;\n\n                    try {{\n                        if (widgetState.sync_center) {{\n                            targetMap.setCenter(sourceMap.getCenter());\n                        }}\n                        if (widgetState.sync_zoom) {{\n                            targetMap.setZoom(sourceMap.getZoom());\n                        }}\n                        if (widgetState.sync_bearing) {{\n                            targetMap.setBearing(sourceMap.getBearing());\n                        }}\n                        if (widgetState.sync_pitch) {{\n                            targetMap.setPitch(sourceMap.getPitch());\n                        }}\n                    }} finally {{\n                        // Use requestAnimationFrame to reset flag after current event loop\n                        requestAnimationFrame(() =&gt; {{\n                            isSync = false;\n                        }});\n                    }}\n                }}\n\n                // Use 'moveend' instead of 'move' to avoid interfering with scroll zoom\n                beforeMap.on('moveend', () =&gt; syncMaps(beforeMap, afterMap));\n                afterMap.on('moveend', () =&gt; syncMaps(afterMap, beforeMap));\n            }}\n        }}\n\n        function setupEventListeners() {{\n            // Orientation control\n            document.getElementById('orientation').addEventListener('change', function(e) {{\n                widgetState.orientation = e.target.value;\n                createComparison();\n            }});\n\n            // Mousemove control\n            document.getElementById('mousemove').addEventListener('change', function(e) {{\n                widgetState.mousemove = e.target.checked;\n                createComparison();\n            }});\n        }}\n\n        // Navigation functions\n        function flyToSanFrancisco() {{\n            const center = [-122.4194, 37.7749];\n            const zoom = 12;\n            beforeMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n            afterMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n        }}\n\n        function flyToNewYork() {{\n            const center = [-74.0060, 40.7128];\n            const zoom = 12;\n            beforeMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n            afterMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n        }}\n\n        function flyToLondon() {{\n            const center = [-0.1278, 51.5074];\n            const zoom = 12;\n            beforeMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n            afterMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n        }}\n\n        function flyToTokyo() {{\n            const center = [139.6917, 35.6895];\n            const zoom = 12;\n            beforeMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n            afterMap.flyTo({{ center: center, zoom: zoom, essential: true }});\n        }}\n\n        // Initialize the comparison\n        initializeMaps();\n\n        // Log successful initialization\n        console.log('Map comparison initialized successfully');\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n        return html_template\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.__init__","title":"<code>__init__(self, left_map=None, right_map=None, backend='maplibre', orientation='vertical', mousemove=False, width='100%', height='600px', sync_center=True, sync_zoom=True, sync_bearing=True, sync_pitch=True, **kwargs)</code>  <code>special</code>","text":"<p>Initialize MapCompare widget.</p> <p>Parameters:</p> Name Type Description Default <code>left_map</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration for the left/before map</p> <code>None</code> <code>right_map</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration for the right/after map</p> <code>None</code> <code>backend</code> <code>str</code> <p>Map backend to use (\"maplibre\" or \"mapbox\")</p> <code>'maplibre'</code> <code>orientation</code> <code>str</code> <p>Comparison orientation (\"vertical\" or \"horizontal\")</p> <code>'vertical'</code> <code>mousemove</code> <code>bool</code> <p>Enable swipe on mouse move</p> <code>False</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>sync_center</code> <code>bool</code> <p>Synchronize map center</p> <code>True</code> <code>sync_zoom</code> <code>bool</code> <p>Synchronize map zoom</p> <code>True</code> <code>sync_bearing</code> <code>bool</code> <p>Synchronize map bearing</p> <code>True</code> <code>sync_pitch</code> <code>bool</code> <p>Synchronize map pitch</p> <code>True</code> Source code in <code>anymap/compare.py</code> <pre><code>def __init__(\n    self,\n    left_map: Optional[Dict[str, Any]] = None,\n    right_map: Optional[Dict[str, Any]] = None,\n    backend: str = \"maplibre\",\n    orientation: str = \"vertical\",\n    mousemove: bool = False,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    sync_center: bool = True,\n    sync_zoom: bool = True,\n    sync_bearing: bool = True,\n    sync_pitch: bool = True,\n    **kwargs,\n):\n    \"\"\"Initialize MapCompare widget.\n\n    Args:\n        left_map: Configuration for the left/before map\n        right_map: Configuration for the right/after map\n        backend: Map backend to use (\"maplibre\" or \"mapbox\")\n        orientation: Comparison orientation (\"vertical\" or \"horizontal\")\n        mousemove: Enable swipe on mouse move\n        width: Widget width\n        height: Widget height\n        sync_center: Synchronize map center\n        sync_zoom: Synchronize map zoom\n        sync_bearing: Synchronize map bearing\n        sync_pitch: Synchronize map pitch\n    \"\"\"\n    # Set default map configurations\n    if left_map is None:\n        left_map = {\n            \"center\": [0.0, 0.0],\n            \"zoom\": 2.0,\n            \"style\": (\n                \"https://demotiles.maplibre.org/style.json\"\n                if backend == \"maplibre\"\n                else \"mapbox://styles/mapbox/streets-v12\"\n            ),\n        }\n    if right_map is None:\n        right_map = {\n            \"center\": [0.0, 0.0],\n            \"zoom\": 2.0,\n            \"style\": (\n                \"https://demotiles.maplibre.org/style.json\"\n                if backend == \"maplibre\"\n                else \"mapbox://styles/mapbox/satellite-v9\"\n            ),\n        }\n\n    super().__init__(\n        left_map_config=left_map,\n        right_map_config=right_map,\n        backend=backend,\n        orientation=orientation,\n        mousemove=mousemove,\n        width=width,\n        height=height,\n        sync_center=sync_center,\n        sync_zoom=sync_zoom,\n        sync_bearing=sync_bearing,\n        sync_pitch=sync_pitch,\n        **kwargs,\n    )\n\n    self._event_handlers = {}\n    self._js_method_counter = 0\n\n    # Set JavaScript and CSS based on backend\n    if backend == \"maplibre\":\n        self._esm = self._load_maplibre_compare_js()\n        self._css = self._load_maplibre_compare_css()\n    else:  # mapbox\n        self._esm = self._load_mapbox_compare_js()\n        self._css = self._load_mapbox_compare_css()\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.call_js_method","title":"<code>call_js_method(self, method_name, *args, **kwargs)</code>","text":"<p>Call a JavaScript method on the compare instance.</p> Source code in <code>anymap/compare.py</code> <pre><code>def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n    \"\"\"Call a JavaScript method on the compare instance.\"\"\"\n    call_data = {\n        \"id\": self._js_method_counter,\n        \"method\": method_name,\n        \"args\": args,\n        \"kwargs\": kwargs,\n    }\n    self._js_method_counter += 1\n\n    # Trigger sync by creating new list\n    current_calls = list(self._js_calls)\n    current_calls.append(call_data)\n    self._js_calls = current_calls\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.enable_mousemove","title":"<code>enable_mousemove(self, enabled=True)</code>","text":"<p>Enable or disable swipe on mouse move.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable mousemove</p> <code>True</code> Source code in <code>anymap/compare.py</code> <pre><code>def enable_mousemove(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable swipe on mouse move.\n\n    Args:\n        enabled: Whether to enable mousemove\n    \"\"\"\n    self.mousemove = enabled\n    self.call_js_method(\"setMousemove\", enabled)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.fly_to","title":"<code>fly_to(self, lat, lng, zoom=None)</code>","text":"<p>Fly both maps to a specific location.</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>float</code> <p>Latitude</p> required <code>lng</code> <code>float</code> <p>Longitude</p> required <code>zoom</code> <code>Optional[float]</code> <p>Zoom level (optional)</p> <code>None</code> Source code in <code>anymap/compare.py</code> <pre><code>def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n    \"\"\"Fly both maps to a specific location.\n\n    Args:\n        lat: Latitude\n        lng: Longitude\n        zoom: Zoom level (optional)\n    \"\"\"\n    options = {\"center\": [lat, lng]}\n    if zoom is not None:\n        options[\"zoom\"] = zoom\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.on_event","title":"<code>on_event(self, event_type, callback)</code>","text":"<p>Register a callback for comparison events.</p> Source code in <code>anymap/compare.py</code> <pre><code>def on_event(self, event_type: str, callback):\n    \"\"\"Register a callback for comparison events.\"\"\"\n    if event_type not in self._event_handlers:\n        self._event_handlers[event_type] = []\n    self._event_handlers[event_type].append(callback)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.set_orientation","title":"<code>set_orientation(self, orientation)</code>","text":"<p>Set the comparison orientation.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>str</code> <p>\"vertical\" or \"horizontal\"</p> required Source code in <code>anymap/compare.py</code> <pre><code>def set_orientation(self, orientation: str) -&gt; None:\n    \"\"\"Set the comparison orientation.\n\n    Args:\n        orientation: \"vertical\" or \"horizontal\"\n    \"\"\"\n    if orientation not in [\"vertical\", \"horizontal\"]:\n        raise ValueError(\"Orientation must be 'vertical' or 'horizontal'\")\n    self.orientation = orientation\n    self.call_js_method(\"setOrientation\", orientation)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.set_slider_position","title":"<code>set_slider_position(self, position)</code>","text":"<p>Set the slider position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>float</code> <p>Slider position (0.0 to 1.0)</p> required Source code in <code>anymap/compare.py</code> <pre><code>def set_slider_position(self, position: float) -&gt; None:\n    \"\"\"Set the slider position.\n\n    Args:\n        position: Slider position (0.0 to 1.0)\n    \"\"\"\n    if not 0.0 &lt;= position &lt;= 1.0:\n        raise ValueError(\"Position must be between 0.0 and 1.0\")\n    self.slider_position = position\n    self.call_js_method(\"setSlider\", position)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.set_sync_options","title":"<code>set_sync_options(self, center=None, zoom=None, bearing=None, pitch=None)</code>","text":"<p>Set synchronization options.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>Optional[bool]</code> <p>Synchronize map center</p> <code>None</code> <code>zoom</code> <code>Optional[bool]</code> <p>Synchronize map zoom</p> <code>None</code> <code>bearing</code> <code>Optional[bool]</code> <p>Synchronize map bearing</p> <code>None</code> <code>pitch</code> <code>Optional[bool]</code> <p>Synchronize map pitch</p> <code>None</code> Source code in <code>anymap/compare.py</code> <pre><code>def set_sync_options(\n    self,\n    center: Optional[bool] = None,\n    zoom: Optional[bool] = None,\n    bearing: Optional[bool] = None,\n    pitch: Optional[bool] = None,\n) -&gt; None:\n    \"\"\"Set synchronization options.\n\n    Args:\n        center: Synchronize map center\n        zoom: Synchronize map zoom\n        bearing: Synchronize map bearing\n        pitch: Synchronize map pitch\n    \"\"\"\n    if center is not None:\n        self.sync_center = center\n    if zoom is not None:\n        self.sync_zoom = zoom\n    if bearing is not None:\n        self.sync_bearing = bearing\n    if pitch is not None:\n        self.sync_pitch = pitch\n\n    sync_options = {\n        \"center\": self.sync_center,\n        \"zoom\": self.sync_zoom,\n        \"bearing\": self.sync_bearing,\n        \"pitch\": self.sync_pitch,\n    }\n    self.call_js_method(\"setSyncOptions\", sync_options)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.to_html","title":"<code>to_html(self, filename=None, title='Map Comparison', **kwargs)</code>","text":"<p>Export the comparison widget to a standalone HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Optional[str]</code> <p>Optional filename to save the HTML. If None, returns HTML string.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title for the HTML page</p> <code>'Map Comparison'</code> <code>**kwargs</code> <p>Additional arguments passed to the HTML template</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML string content</p> Source code in <code>anymap/compare.py</code> <pre><code>def to_html(\n    self,\n    filename: Optional[str] = None,\n    title: str = \"Map Comparison\",\n    **kwargs,\n) -&gt; str:\n    \"\"\"Export the comparison widget to a standalone HTML file.\n\n    Args:\n        filename: Optional filename to save the HTML. If None, returns HTML string.\n        title: Title for the HTML page\n        **kwargs: Additional arguments passed to the HTML template\n\n    Returns:\n        HTML string content\n    \"\"\"\n    # Get the current widget state\n    widget_state = {\n        \"left_map_config\": dict(self.left_map_config),\n        \"right_map_config\": dict(self.right_map_config),\n        \"backend\": self.backend,\n        \"orientation\": self.orientation,\n        \"mousemove\": self.mousemove,\n        \"slider_position\": self.slider_position,\n        \"sync_center\": self.sync_center,\n        \"sync_zoom\": self.sync_zoom,\n        \"sync_bearing\": self.sync_bearing,\n        \"sync_pitch\": self.sync_pitch,\n        \"width\": self.width,\n        \"height\": self.height,\n    }\n\n    # Generate HTML content\n    html_content = self._generate_html_template(widget_state, title, **kwargs)\n\n    # Save to file if filename is provided\n    if filename:\n        with open(filename, \"w\", encoding=\"utf-8\") as f:\n            f.write(html_content)\n\n    return html_content\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.update_left_map","title":"<code>update_left_map(self, config)</code>","text":"<p>Update the left map configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>New configuration for the left map</p> required Source code in <code>anymap/compare.py</code> <pre><code>def update_left_map(self, config: Dict[str, Any]) -&gt; None:\n    \"\"\"Update the left map configuration.\n\n    Args:\n        config: New configuration for the left map\n    \"\"\"\n    self.left_map_config = config\n    self.call_js_method(\"updateLeftMap\", config)\n</code></pre>"},{"location":"compare/#anymap.compare.MapCompare.update_right_map","title":"<code>update_right_map(self, config)</code>","text":"<p>Update the right map configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>New configuration for the right map</p> required Source code in <code>anymap/compare.py</code> <pre><code>def update_right_map(self, config: Dict[str, Any]) -&gt; None:\n    \"\"\"Update the right map configuration.\n\n    Args:\n        config: New configuration for the right map\n    \"\"\"\n    self.right_map_config = config\n    self.call_js_method(\"updateRightMap\", config)\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/anymap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>anymap could always use more documentation, whether as part of the official anymap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/anymap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up anymap for local development.</p> <ol> <li> <p>Fork the anymap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/anymap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv anymap\n$ cd anymap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 anymap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/opengeos/anymap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"deckgl/","title":"deckgl module","text":"<p>DeckGL implementation of the map widget that extends MapLibre.</p>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap","title":"<code> DeckGLMap            (MapLibreMap)         </code>","text":"<p>DeckGL implementation of the map widget that extends MapLibre.</p> Source code in <code>anymap/deckgl.py</code> <pre><code>class DeckGLMap(MapLibreMap):\n    \"\"\"DeckGL implementation of the map widget that extends MapLibre.\"\"\"\n\n    # DeckGL-specific traits\n    deckgl_layers = traitlets.List([]).tag(sync=True)\n    controller_options = traitlets.Dict({}).tag(sync=True)\n\n    # Override the JavaScript module\n    _esm = _esm_deckgl\n    _css = _css_deckgl\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        style: str = \"https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        controller_options: Dict[str, Any] = None,\n        **kwargs,\n    ):\n        \"\"\"Initialize DeckGL map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            style: MapLibre style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            controller_options: DeckGL controller options\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            style=style,\n            width=width,\n            height=height,\n            bearing=bearing,\n            pitch=pitch,\n            **kwargs,\n        )\n\n        if controller_options is None:\n            controller_options = {\"doubleClickZoom\": False}\n        self.controller_options = controller_options\n\n    def add_deckgl_layer(self, layer_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a DeckGL layer to the map.\n\n        Args:\n            layer_config: DeckGL layer configuration dictionary\n        \"\"\"\n        current_layers = list(self.deckgl_layers)\n        current_layers.append(layer_config)\n        self.deckgl_layers = current_layers\n\n    def remove_deckgl_layer(self, layer_id: str) -&gt; None:\n        \"\"\"Remove a DeckGL layer from the map.\n\n        Args:\n            layer_id: ID of the layer to remove\n        \"\"\"\n        current_layers = [\n            layer for layer in self.deckgl_layers if layer.get(\"id\") != layer_id\n        ]\n        self.deckgl_layers = current_layers\n\n    def clear_deckgl_layers(self) -&gt; None:\n        \"\"\"Clear all DeckGL layers from the map.\"\"\"\n        self.deckgl_layers = []\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"GeoJsonLayer\",\n        **layer_props,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer using DeckGL.\n\n        Args:\n            layer_id: Unique identifier for the layer\n            geojson_data: GeoJSON data\n            layer_type: DeckGL layer type (e.g., 'GeoJsonLayer')\n            **layer_props: Additional DeckGL layer properties\n        \"\"\"\n        layer_config = {\n            \"@@type\": layer_type,\n            \"id\": layer_id,\n            \"data\": geojson_data,\n            \"pickable\": True,\n            \"autoHighlight\": True,\n            **layer_props,\n        }\n        self.add_deckgl_layer(layer_config)\n\n    def add_arc_layer(\n        self,\n        layer_id: str,\n        data: Union[str, List[Dict[str, Any]]],\n        get_source_position: Union[List[float], str] = None,\n        get_target_position: Union[List[float], str] = None,\n        **layer_props,\n    ) -&gt; None:\n        \"\"\"Add an Arc layer using DeckGL.\n\n        Args:\n            layer_id: Unique identifier for the layer\n            data: Data source (URL or array of objects)\n            get_source_position: Source position accessor (coordinates or accessor function)\n            get_target_position: Target position accessor (coordinates or accessor function)\n            **layer_props: Additional DeckGL layer properties\n        \"\"\"\n        layer_config = {\n            \"@@type\": \"ArcLayer\",\n            \"id\": layer_id,\n            \"data\": data,\n            \"pickable\": True,\n            \"autoHighlight\": True,\n            **layer_props,\n        }\n\n        if get_source_position:\n            layer_config[\"getSourcePosition\"] = get_source_position\n        if get_target_position:\n            layer_config[\"getTargetPosition\"] = get_target_position\n\n        self.add_deckgl_layer(layer_config)\n\n    def add_scatterplot_layer(\n        self,\n        layer_id: str,\n        data: Union[str, List[Dict[str, Any]]],\n        get_position: List[float] = None,\n        get_radius: Union[int, List[int]] = 100,\n        get_fill_color: List[int] = [255, 140, 0, 160],\n        **layer_props,\n    ) -&gt; None:\n        \"\"\"Add a Scatterplot layer using DeckGL.\n\n        Args:\n            layer_id: Unique identifier for the layer\n            data: Data source (URL or array of objects)\n            get_position: Position accessor\n            get_radius: Radius accessor\n            get_fill_color: Fill color accessor\n            **layer_props: Additional DeckGL layer properties\n        \"\"\"\n        layer_config = {\n            \"@@type\": \"ScatterplotLayer\",\n            \"id\": layer_id,\n            \"data\": data,\n            \"pickable\": True,\n            \"autoHighlight\": True,\n            \"radiusMinPixels\": 2,\n            \"radiusMaxPixels\": 100,\n            \"getRadius\": get_radius,\n            \"getFillColor\": get_fill_color,\n            **layer_props,\n        }\n\n        if get_position:\n            layer_config[\"getPosition\"] = get_position\n\n        self.add_deckgl_layer(layer_config)\n\n    def to_html(\n        self,\n        filename: Optional[str] = None,\n        title: str = \"DeckGL Map Export\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        **kwargs,\n    ) -&gt; str:\n        \"\"\"Export the DeckGL map to a standalone HTML file.\n\n        Args:\n            filename: Optional filename to save the HTML. If None, returns HTML string.\n            title: Title for the HTML page\n            width: Width of the map container\n            height: Height of the map container\n            **kwargs: Additional arguments passed to the HTML template\n\n        Returns:\n            HTML string content\n        \"\"\"\n        # Get the current map state\n        map_state = {\n            \"center\": self.center,\n            \"zoom\": self.zoom,\n            \"width\": width,\n            \"height\": height,\n            \"style\": self.style,\n            \"_layers\": dict(self._layers),\n            \"_sources\": dict(self._sources),\n            \"deckgl_layers\": list(self.deckgl_layers),  # Include DeckGL layers\n            \"controller_options\": dict(self.controller_options),\n        }\n\n        # Add class-specific attributes\n        if hasattr(self, \"style\"):\n            map_state[\"style\"] = self.style\n        if hasattr(self, \"bearing\"):\n            map_state[\"bearing\"] = self.bearing\n        if hasattr(self, \"pitch\"):\n            map_state[\"pitch\"] = self.pitch\n        if hasattr(self, \"antialias\"):\n            map_state[\"antialias\"] = self.antialias\n\n        # Generate HTML content\n        html_content = self._generate_html_template(map_state, title, **kwargs)\n\n        # Save to file if filename is provided\n        if filename:\n            with open(filename, \"w\", encoding=\"utf-8\") as f:\n                f.write(html_content)\n\n        return html_content\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate HTML template for DeckGL.\"\"\"\n        # Serialize map state for JavaScript\n        map_state_json = json.dumps(map_state, indent=2)\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://unpkg.com/deck.gl@9.1.12/dist.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }}\n        #map {{\n            width: {map_state['width']};\n            height: {map_state['height']};\n            border: 1px solid #ccc;\n        }}\n        h1 {{\n            margin-top: 0;\n            color: #333;\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{title}&lt;/h1&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Map state from Python\n        const mapState = {map_state_json};\n\n        // Parse DeckGL layers from configuration\n        function parseDeckGLLayers(layerConfigs) {{\n            // Helper function to convert accessor expressions to functions\n            function parseAccessor(accessor) {{\n                if (typeof accessor === 'string' &amp;&amp; accessor.startsWith('@@=')) {{\n                    const expression = accessor.substring(3); // Remove '@@=' prefix\n\n                    try {{\n                        // Handle arrow function expressions directly\n                        if (expression.includes('=&gt;')) {{\n                            // This is already an arrow function, just evaluate it\n                            return eval(`(${{expression}})`);\n                        }}\n                        // Create a function from the expression\n                        // Handle different variable contexts (d = data item, f = feature, etc.)\n                        else if (expression.includes('f.geometry.coordinates')) {{\n                            return new Function('f', `return ${{expression}}`);\n                        }} else if (expression.includes('f.properties')) {{\n                            return new Function('f', `return ${{expression}}`);\n                        }} else if (expression.includes('d.features')) {{\n                            // For dataTransform functions\n                            return new Function('d', `return ${{expression}}`);\n                        }} else if (expression.includes('d.')) {{\n                            return new Function('d', `return ${{expression}}`);\n                        }} else {{\n                            // Default context\n                            return new Function('d', `return ${{expression}}`);\n                        }}\n                    }} catch (error) {{\n                        console.warn('Failed to parse accessor expression:', accessor, error);\n                        return accessor; // Return original if parsing fails\n                    }}\n                }}\n                return accessor;\n            }}\n\n            // Helper function to process layer properties and convert accessors\n            function processLayerProps(props) {{\n                const processed = {{ ...props }};\n\n                // List of properties that should be treated as accessors\n                const accessorProps = [\n                    'getSourcePosition', 'getTargetPosition', 'getPosition',\n                    'getRadius', 'getFillColor', 'getLineColor', 'getWidth',\n                    'getPointRadius', 'dataTransform'\n                ];\n\n                accessorProps.forEach(prop =&gt; {{\n                    if (prop in processed) {{\n                        processed[prop] = parseAccessor(processed[prop]);\n                    }}\n                }});\n\n                return processed;\n            }}\n\n            return layerConfigs.map(config =&gt; {{\n                const layerType = config[\"@@type\"];\n                const layerProps = processLayerProps({{ ...config }});\n                delete layerProps[\"@@type\"];\n\n                try {{\n                    switch (layerType) {{\n                        case \"GeoJsonLayer\":\n                            return new deck.GeoJsonLayer(layerProps);\n                        case \"ArcLayer\":\n                            return new deck.ArcLayer(layerProps);\n                        case \"ScatterplotLayer\":\n                            return new deck.ScatterplotLayer(layerProps);\n                        default:\n                            console.warn(`Unknown DeckGL layer type: ${{layerType}}`);\n                            return null;\n                    }}\n                }} catch (error) {{\n                    console.error(`Error creating ${{layerType}}:`, error, layerProps);\n                    return null;\n                }}\n            }}).filter(layer =&gt; layer !== null);\n        }}\n\n        // Initialize DeckGL with MapLibre\n        const deckgl = new deck.DeckGL({{\n            container: 'map',\n            mapStyle: mapState.style || 'https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json',\n            initialViewState: {{\n                latitude: mapState.center[0],\n                longitude: mapState.center[1],\n                zoom: mapState.zoom || 2,\n                bearing: mapState.bearing || 0,\n                pitch: mapState.pitch || 0\n            }},\n            controller: true,\n            layers: parseDeckGLLayers(mapState.deckgl_layers || []),\n            onViewStateChange: ({{viewState}}) =&gt; {{\n                console.log('View state changed:', viewState);\n            }},\n            onClick: (info) =&gt; {{\n                if (info.object) {{\n                    console.log('Clicked object:', info.object);\n                    if (info.object.properties &amp;&amp; info.object.properties.name) {{\n                        alert(`${{info.object.properties.name}} (${{info.object.properties.abbrev || 'N/A'}})`);\n                    }}\n                }}\n            }}\n        }});\n\n        // Add navigation controls styling\n        const mapContainer = document.getElementById('map');\n        mapContainer.style.position = 'relative';\n\n        console.log('DeckGL map initialized successfully');\n        console.log('Loaded layers:', mapState.deckgl_layers ? mapState.deckgl_layers.length : 0);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n        return html_template\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, style='https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json', width='100%', height='600px', bearing=0.0, pitch=0.0, controller_options=None, **kwargs)</code>  <code>special</code>","text":"<p>Initialize DeckGL map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>style</code> <code>str</code> <p>MapLibre style URL or style object</p> <code>'https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>controller_options</code> <code>Dict[str, Any]</code> <p>DeckGL controller options</p> <code>None</code> Source code in <code>anymap/deckgl.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    style: str = \"https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    controller_options: Dict[str, Any] = None,\n    **kwargs,\n):\n    \"\"\"Initialize DeckGL map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        style: MapLibre style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        controller_options: DeckGL controller options\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        style=style,\n        width=width,\n        height=height,\n        bearing=bearing,\n        pitch=pitch,\n        **kwargs,\n    )\n\n    if controller_options is None:\n        controller_options = {\"doubleClickZoom\": False}\n    self.controller_options = controller_options\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.add_arc_layer","title":"<code>add_arc_layer(self, layer_id, data, get_source_position=None, get_target_position=None, **layer_props)</code>","text":"<p>Add an Arc layer using DeckGL.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer</p> required <code>data</code> <code>Union[str, List[Dict[str, Any]]]</code> <p>Data source (URL or array of objects)</p> required <code>get_source_position</code> <code>Union[List[float], str]</code> <p>Source position accessor (coordinates or accessor function)</p> <code>None</code> <code>get_target_position</code> <code>Union[List[float], str]</code> <p>Target position accessor (coordinates or accessor function)</p> <code>None</code> <code>**layer_props</code> <p>Additional DeckGL layer properties</p> <code>{}</code> Source code in <code>anymap/deckgl.py</code> <pre><code>def add_arc_layer(\n    self,\n    layer_id: str,\n    data: Union[str, List[Dict[str, Any]]],\n    get_source_position: Union[List[float], str] = None,\n    get_target_position: Union[List[float], str] = None,\n    **layer_props,\n) -&gt; None:\n    \"\"\"Add an Arc layer using DeckGL.\n\n    Args:\n        layer_id: Unique identifier for the layer\n        data: Data source (URL or array of objects)\n        get_source_position: Source position accessor (coordinates or accessor function)\n        get_target_position: Target position accessor (coordinates or accessor function)\n        **layer_props: Additional DeckGL layer properties\n    \"\"\"\n    layer_config = {\n        \"@@type\": \"ArcLayer\",\n        \"id\": layer_id,\n        \"data\": data,\n        \"pickable\": True,\n        \"autoHighlight\": True,\n        **layer_props,\n    }\n\n    if get_source_position:\n        layer_config[\"getSourcePosition\"] = get_source_position\n    if get_target_position:\n        layer_config[\"getTargetPosition\"] = get_target_position\n\n    self.add_deckgl_layer(layer_config)\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.add_deckgl_layer","title":"<code>add_deckgl_layer(self, layer_config)</code>","text":"<p>Add a DeckGL layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_config</code> <code>Dict[str, Any]</code> <p>DeckGL layer configuration dictionary</p> required Source code in <code>anymap/deckgl.py</code> <pre><code>def add_deckgl_layer(self, layer_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a DeckGL layer to the map.\n\n    Args:\n        layer_config: DeckGL layer configuration dictionary\n    \"\"\"\n    current_layers = list(self.deckgl_layers)\n    current_layers.append(layer_config)\n    self.deckgl_layers = current_layers\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='GeoJsonLayer', **layer_props)</code>","text":"<p>Add a GeoJSON layer using DeckGL.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer</p> required <code>geojson_data</code> <code>Dict[str, Any]</code> <p>GeoJSON data</p> required <code>layer_type</code> <code>str</code> <p>DeckGL layer type (e.g., 'GeoJsonLayer')</p> <code>'GeoJsonLayer'</code> <code>**layer_props</code> <p>Additional DeckGL layer properties</p> <code>{}</code> Source code in <code>anymap/deckgl.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"GeoJsonLayer\",\n    **layer_props,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer using DeckGL.\n\n    Args:\n        layer_id: Unique identifier for the layer\n        geojson_data: GeoJSON data\n        layer_type: DeckGL layer type (e.g., 'GeoJsonLayer')\n        **layer_props: Additional DeckGL layer properties\n    \"\"\"\n    layer_config = {\n        \"@@type\": layer_type,\n        \"id\": layer_id,\n        \"data\": geojson_data,\n        \"pickable\": True,\n        \"autoHighlight\": True,\n        **layer_props,\n    }\n    self.add_deckgl_layer(layer_config)\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.add_scatterplot_layer","title":"<code>add_scatterplot_layer(self, layer_id, data, get_position=None, get_radius=100, get_fill_color=[255, 140, 0, 160], **layer_props)</code>","text":"<p>Add a Scatterplot layer using DeckGL.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer</p> required <code>data</code> <code>Union[str, List[Dict[str, Any]]]</code> <p>Data source (URL or array of objects)</p> required <code>get_position</code> <code>List[float]</code> <p>Position accessor</p> <code>None</code> <code>get_radius</code> <code>Union[int, List[int]]</code> <p>Radius accessor</p> <code>100</code> <code>get_fill_color</code> <code>List[int]</code> <p>Fill color accessor</p> <code>[255, 140, 0, 160]</code> <code>**layer_props</code> <p>Additional DeckGL layer properties</p> <code>{}</code> Source code in <code>anymap/deckgl.py</code> <pre><code>def add_scatterplot_layer(\n    self,\n    layer_id: str,\n    data: Union[str, List[Dict[str, Any]]],\n    get_position: List[float] = None,\n    get_radius: Union[int, List[int]] = 100,\n    get_fill_color: List[int] = [255, 140, 0, 160],\n    **layer_props,\n) -&gt; None:\n    \"\"\"Add a Scatterplot layer using DeckGL.\n\n    Args:\n        layer_id: Unique identifier for the layer\n        data: Data source (URL or array of objects)\n        get_position: Position accessor\n        get_radius: Radius accessor\n        get_fill_color: Fill color accessor\n        **layer_props: Additional DeckGL layer properties\n    \"\"\"\n    layer_config = {\n        \"@@type\": \"ScatterplotLayer\",\n        \"id\": layer_id,\n        \"data\": data,\n        \"pickable\": True,\n        \"autoHighlight\": True,\n        \"radiusMinPixels\": 2,\n        \"radiusMaxPixels\": 100,\n        \"getRadius\": get_radius,\n        \"getFillColor\": get_fill_color,\n        **layer_props,\n    }\n\n    if get_position:\n        layer_config[\"getPosition\"] = get_position\n\n    self.add_deckgl_layer(layer_config)\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.clear_deckgl_layers","title":"<code>clear_deckgl_layers(self)</code>","text":"<p>Clear all DeckGL layers from the map.</p> Source code in <code>anymap/deckgl.py</code> <pre><code>def clear_deckgl_layers(self) -&gt; None:\n    \"\"\"Clear all DeckGL layers from the map.\"\"\"\n    self.deckgl_layers = []\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.remove_deckgl_layer","title":"<code>remove_deckgl_layer(self, layer_id)</code>","text":"<p>Remove a DeckGL layer from the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>ID of the layer to remove</p> required Source code in <code>anymap/deckgl.py</code> <pre><code>def remove_deckgl_layer(self, layer_id: str) -&gt; None:\n    \"\"\"Remove a DeckGL layer from the map.\n\n    Args:\n        layer_id: ID of the layer to remove\n    \"\"\"\n    current_layers = [\n        layer for layer in self.deckgl_layers if layer.get(\"id\") != layer_id\n    ]\n    self.deckgl_layers = current_layers\n</code></pre>"},{"location":"deckgl/#anymap.deckgl.DeckGLMap.to_html","title":"<code>to_html(self, filename=None, title='DeckGL Map Export', width='100%', height='600px', **kwargs)</code>","text":"<p>Export the DeckGL map to a standalone HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Optional[str]</code> <p>Optional filename to save the HTML. If None, returns HTML string.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title for the HTML page</p> <code>'DeckGL Map Export'</code> <code>width</code> <code>str</code> <p>Width of the map container</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Height of the map container</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional arguments passed to the HTML template</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML string content</p> Source code in <code>anymap/deckgl.py</code> <pre><code>def to_html(\n    self,\n    filename: Optional[str] = None,\n    title: str = \"DeckGL Map Export\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    **kwargs,\n) -&gt; str:\n    \"\"\"Export the DeckGL map to a standalone HTML file.\n\n    Args:\n        filename: Optional filename to save the HTML. If None, returns HTML string.\n        title: Title for the HTML page\n        width: Width of the map container\n        height: Height of the map container\n        **kwargs: Additional arguments passed to the HTML template\n\n    Returns:\n        HTML string content\n    \"\"\"\n    # Get the current map state\n    map_state = {\n        \"center\": self.center,\n        \"zoom\": self.zoom,\n        \"width\": width,\n        \"height\": height,\n        \"style\": self.style,\n        \"_layers\": dict(self._layers),\n        \"_sources\": dict(self._sources),\n        \"deckgl_layers\": list(self.deckgl_layers),  # Include DeckGL layers\n        \"controller_options\": dict(self.controller_options),\n    }\n\n    # Add class-specific attributes\n    if hasattr(self, \"style\"):\n        map_state[\"style\"] = self.style\n    if hasattr(self, \"bearing\"):\n        map_state[\"bearing\"] = self.bearing\n    if hasattr(self, \"pitch\"):\n        map_state[\"pitch\"] = self.pitch\n    if hasattr(self, \"antialias\"):\n        map_state[\"antialias\"] = self.antialias\n\n    # Generate HTML content\n    html_content = self._generate_html_template(map_state, title, **kwargs)\n\n    # Save to file if filename is provided\n    if filename:\n        with open(filename, \"w\", encoding=\"utf-8\") as f:\n            f.write(html_content)\n\n    return html_content\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install anymap, run this command in your terminal:</p> <pre><code>pip install anymap\n</code></pre> <p>This is the preferred method to install anymap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install anymap from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/opengeos/anymap\n</code></pre>"},{"location":"keplergl/","title":"keplergl module","text":"<p>KeplerGL implementation of the map widget.</p>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap","title":"<code> KeplerGLMap            (MapWidget)         </code>","text":"<p>KeplerGL implementation of the map widget.</p> Source code in <code>anymap/keplergl.py</code> <pre><code>class KeplerGLMap(MapWidget):\n    \"\"\"KeplerGL implementation of the map widget.\"\"\"\n\n    # KeplerGL-specific traits\n    map_config = traitlets.Dict({}).tag(sync=True)\n    show_docs = traitlets.Bool(False).tag(sync=True)\n    read_only = traitlets.Bool(False).tag(sync=True)\n    _data = traitlets.Dict({}).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_keplergl\n    _css = _css_keplergl\n\n    def __init__(\n        self,\n        center: List[float] = [37.7749, -122.4194],\n        zoom: float = 9.0,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        show_docs: bool = False,\n        read_only: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize KeplerGL map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            width: Widget width\n            height: Widget height\n            show_docs: Whether to show documentation panel\n            read_only: Whether the map is read-only\n            **kwargs: Additional widget arguments\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            **kwargs,\n        )\n        self.show_docs = show_docs\n        self.read_only = read_only\n        self._initialize_config()\n\n    def _initialize_config(self):\n        \"\"\"Initialize the KeplerGL configuration.\"\"\"\n        self.map_config = {\n            \"version\": \"v1\",\n            \"config\": {\n                \"mapState\": {\n                    \"latitude\": self.center[0],\n                    \"longitude\": self.center[1],\n                    \"zoom\": self.zoom,\n                    \"bearing\": 0,\n                    \"pitch\": 0,\n                    \"dragRotate\": False,\n                    \"width\": self.width,\n                    \"height\": self.height,\n                    \"isSplit\": False,\n                },\n                \"mapStyle\": {\n                    \"styleType\": \"dark\",\n                    \"topLayerGroups\": {},\n                    \"visibleLayerGroups\": {\n                        \"label\": True,\n                        \"road\": True,\n                        \"border\": False,\n                        \"building\": True,\n                        \"water\": True,\n                        \"land\": True,\n                        \"3d building\": False,\n                    },\n                    \"mapStyles\": {},\n                },\n                \"visState\": {\n                    \"layers\": [],\n                    \"interactionConfig\": {\n                        \"tooltip\": {\"fieldsToShow\": {}, \"enabled\": True},\n                        \"brush\": {\"size\": 0.5, \"enabled\": False},\n                        \"geocoder\": {\"enabled\": False},\n                        \"coordinate\": {\"enabled\": False},\n                    },\n                    \"filters\": [],\n                    \"layerBlending\": \"normal\",\n                    \"splitMaps\": [],\n                    \"animationConfig\": {\"currentTime\": None, \"speed\": 1},\n                },\n            },\n        }\n\n    def add_data(self, data: Union[Dict, List], name: str = \"dataset\") -&gt; None:\n        \"\"\"Add data to the map.\n\n        Args:\n            data: Data to add (GeoJSON, DataFrame, etc.)\n            name: Name for the dataset\n        \"\"\"\n        # Determine data type and format\n        if isinstance(data, dict) and data.get(\"type\") == \"FeatureCollection\":\n            # GeoJSON data\n            data_type = \"geojson\"\n        elif isinstance(data, list):\n            # Array of objects (CSV-like data)\n            data_type = \"csv\"\n        else:\n            # Default to geojson\n            data_type = \"geojson\"\n\n        # Store the data in the widget's internal data structure\n        current_data = dict(self._data)\n        current_data[name] = {\"type\": data_type, \"data\": data}\n        self._data = current_data\n\n    def add_geojson(\n        self, geojson: Union[str, Dict], layer_name: str = \"geojson_layer\", **kwargs\n    ) -&gt; None:\n        \"\"\"Add GeoJSON data to the map.\n\n        Args:\n            geojson: GeoJSON data (dict or file path)\n            layer_name: Name for the layer\n            **kwargs: Additional layer configuration\n        \"\"\"\n        if isinstance(geojson, str):\n            # Load from file\n            with open(geojson, \"r\") as f:\n                geojson_data = json.load(f)\n        else:\n            geojson_data = geojson\n\n        # Store the data in the widget's internal data structure\n        current_data = dict(self._data)\n        current_data[layer_name] = {\"type\": \"geojson\", \"data\": geojson_data}\n        self._data = current_data\n\n    def add_csv(\n        self, csv_data: Union[str, List[Dict]], layer_name: str = \"csv_layer\", **kwargs\n    ) -&gt; None:\n        \"\"\"Add CSV data to the map.\n\n        Args:\n            csv_data: CSV data (file path or list of dictionaries)\n            layer_name: Name for the layer\n            **kwargs: Additional layer configuration\n        \"\"\"\n        if isinstance(csv_data, str):\n            # Load from file\n            import pandas as pd\n\n            df = pd.read_csv(csv_data)\n            csv_data = df.to_dict(\"records\")\n        elif isinstance(csv_data, list):\n            # Data is already in the correct format (list of dictionaries)\n            pass\n        else:\n            # Convert other formats to list of dictionaries\n            csv_data = [csv_data]\n\n        # Store the data in the widget's internal data structure\n        current_data = dict(self._data)\n        current_data[layer_name] = {\"type\": \"csv\", \"data\": csv_data}\n        self._data = current_data\n\n    def set_filter(self, filter_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Set filter configuration.\n\n        Args:\n            filter_config: Filter configuration\n        \"\"\"\n        self.call_js_method(\"setFilter\", filter_config)\n\n    def update_map_config(self, config: Dict[str, Any]) -&gt; None:\n        \"\"\"Update the map configuration.\n\n        Args:\n            config: New configuration to merge\n        \"\"\"\n\n        # Deep merge the configuration\n        def deep_merge(dict1, dict2):\n            result = dict1.copy()\n            for key, value in dict2.items():\n                if (\n                    key in result\n                    and isinstance(result[key], dict)\n                    and isinstance(value, dict)\n                ):\n                    result[key] = deep_merge(result[key], value)\n                else:\n                    result[key] = value\n            return result\n\n        self.map_config = deep_merge(self.map_config, config)\n\n    def get_map_state(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the current map state.\n\n        Returns:\n            Current map state dictionary\n        \"\"\"\n        return self.map_config\n\n    def save_config(self, filename: str) -&gt; None:\n        \"\"\"Save the current configuration to a file.\n\n        Args:\n            filename: Path to save the configuration\n        \"\"\"\n        with open(filename, \"w\") as f:\n            json.dump(self.map_config, f, indent=2)\n\n    def load_config(self, filename: str) -&gt; None:\n        \"\"\"Load configuration from a file.\n\n        Args:\n            filename: Path to the configuration file\n        \"\"\"\n        with open(filename, \"r\") as f:\n            config = json.load(f)\n        self.update_map_config(config)\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate HTML template for KeplerGL.\"\"\"\n        # Serialize map state for JavaScript\n        map_state_json = json.dumps(map_state, indent=2)\n\n        # Get the current configuration\n        config_json = json.dumps(self.map_config, indent=2)\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 0;\n            font-family: sans-serif;\n        }}\n        #map {{\n            width: {map_state.get('width', '100%')};\n            height: {map_state.get('height', '600px')};\n        }}\n        .loading {{\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            font-size: 18px;\n            color: #555;\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;\n        &lt;div class=\"loading\"&gt;Loading KeplerGL Map...&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://unpkg.com/react@16/umd/react.production.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/redux@3.7.2/dist/redux.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/react-redux@5.1.1/dist/react-redux.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/kepler.gl@3.0.0/umd/keplergl.min.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n        // Initialize KeplerGL\n        const {{ KeplerGl, injectComponents }} = window.KeplerGl;\n\n        // Map configuration\n        const mapConfig = {config_json};\n        const mapState = {map_state_json};\n\n        // Create KeplerGL instance\n        const App = () =&gt; {{\n            return React.createElement(KeplerGl, {{\n                id: \"map\",\n                width: mapState.width || \"100%\",\n                height: mapState.height || \"600px\",\n                mapboxApiAccessToken: undefined, // Use default map tiles\n                initialUiState: mapConfig.config || {{}},\n                getMapboxRef: () =&gt; {{}},\n                onSaveMap: () =&gt; {{}},\n                onViewStateChange: () =&gt; {{}},\n                onInteractionStateChange: () =&gt; {{}}\n            }});\n        }};\n\n        // Render the app\n        ReactDOM.render(React.createElement(App), document.getElementById('map'));\n\n        // Initialize with data if available\n        if (mapState._layers &amp;&amp; Object.keys(mapState._layers).length &gt; 0) {{\n            // Add layers to the map\n            console.log('Adding layers:', mapState._layers);\n        }}\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n        return html_template\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.__init__","title":"<code>__init__(self, center=[37.7749, -122.4194], zoom=9.0, width='100%', height='600px', show_docs=False, read_only=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize KeplerGL map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[37.7749, -122.4194]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>9.0</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>show_docs</code> <code>bool</code> <p>Whether to show documentation panel</p> <code>False</code> <code>read_only</code> <code>bool</code> <p>Whether the map is read-only</p> <code>False</code> <code>**kwargs</code> <p>Additional widget arguments</p> <code>{}</code> Source code in <code>anymap/keplergl.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [37.7749, -122.4194],\n    zoom: float = 9.0,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    show_docs: bool = False,\n    read_only: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize KeplerGL map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        width: Widget width\n        height: Widget height\n        show_docs: Whether to show documentation panel\n        read_only: Whether the map is read-only\n        **kwargs: Additional widget arguments\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        **kwargs,\n    )\n    self.show_docs = show_docs\n    self.read_only = read_only\n    self._initialize_config()\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.add_csv","title":"<code>add_csv(self, csv_data, layer_name='csv_layer', **kwargs)</code>","text":"<p>Add CSV data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>csv_data</code> <code>Union[str, List[Dict]]</code> <p>CSV data (file path or list of dictionaries)</p> required <code>layer_name</code> <code>str</code> <p>Name for the layer</p> <code>'csv_layer'</code> <code>**kwargs</code> <p>Additional layer configuration</p> <code>{}</code> Source code in <code>anymap/keplergl.py</code> <pre><code>def add_csv(\n    self, csv_data: Union[str, List[Dict]], layer_name: str = \"csv_layer\", **kwargs\n) -&gt; None:\n    \"\"\"Add CSV data to the map.\n\n    Args:\n        csv_data: CSV data (file path or list of dictionaries)\n        layer_name: Name for the layer\n        **kwargs: Additional layer configuration\n    \"\"\"\n    if isinstance(csv_data, str):\n        # Load from file\n        import pandas as pd\n\n        df = pd.read_csv(csv_data)\n        csv_data = df.to_dict(\"records\")\n    elif isinstance(csv_data, list):\n        # Data is already in the correct format (list of dictionaries)\n        pass\n    else:\n        # Convert other formats to list of dictionaries\n        csv_data = [csv_data]\n\n    # Store the data in the widget's internal data structure\n    current_data = dict(self._data)\n    current_data[layer_name] = {\"type\": \"csv\", \"data\": csv_data}\n    self._data = current_data\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.add_data","title":"<code>add_data(self, data, name='dataset')</code>","text":"<p>Add data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[Dict, List]</code> <p>Data to add (GeoJSON, DataFrame, etc.)</p> required <code>name</code> <code>str</code> <p>Name for the dataset</p> <code>'dataset'</code> Source code in <code>anymap/keplergl.py</code> <pre><code>def add_data(self, data: Union[Dict, List], name: str = \"dataset\") -&gt; None:\n    \"\"\"Add data to the map.\n\n    Args:\n        data: Data to add (GeoJSON, DataFrame, etc.)\n        name: Name for the dataset\n    \"\"\"\n    # Determine data type and format\n    if isinstance(data, dict) and data.get(\"type\") == \"FeatureCollection\":\n        # GeoJSON data\n        data_type = \"geojson\"\n    elif isinstance(data, list):\n        # Array of objects (CSV-like data)\n        data_type = \"csv\"\n    else:\n        # Default to geojson\n        data_type = \"geojson\"\n\n    # Store the data in the widget's internal data structure\n    current_data = dict(self._data)\n    current_data[name] = {\"type\": data_type, \"data\": data}\n    self._data = current_data\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.add_geojson","title":"<code>add_geojson(self, geojson, layer_name='geojson_layer', **kwargs)</code>","text":"<p>Add GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>geojson</code> <code>Union[str, Dict]</code> <p>GeoJSON data (dict or file path)</p> required <code>layer_name</code> <code>str</code> <p>Name for the layer</p> <code>'geojson_layer'</code> <code>**kwargs</code> <p>Additional layer configuration</p> <code>{}</code> Source code in <code>anymap/keplergl.py</code> <pre><code>def add_geojson(\n    self, geojson: Union[str, Dict], layer_name: str = \"geojson_layer\", **kwargs\n) -&gt; None:\n    \"\"\"Add GeoJSON data to the map.\n\n    Args:\n        geojson: GeoJSON data (dict or file path)\n        layer_name: Name for the layer\n        **kwargs: Additional layer configuration\n    \"\"\"\n    if isinstance(geojson, str):\n        # Load from file\n        with open(geojson, \"r\") as f:\n            geojson_data = json.load(f)\n    else:\n        geojson_data = geojson\n\n    # Store the data in the widget's internal data structure\n    current_data = dict(self._data)\n    current_data[layer_name] = {\"type\": \"geojson\", \"data\": geojson_data}\n    self._data = current_data\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.get_map_state","title":"<code>get_map_state(self)</code>","text":"<p>Get the current map state.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Current map state dictionary</p> Source code in <code>anymap/keplergl.py</code> <pre><code>def get_map_state(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the current map state.\n\n    Returns:\n        Current map state dictionary\n    \"\"\"\n    return self.map_config\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.load_config","title":"<code>load_config(self, filename)</code>","text":"<p>Load configuration from a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the configuration file</p> required Source code in <code>anymap/keplergl.py</code> <pre><code>def load_config(self, filename: str) -&gt; None:\n    \"\"\"Load configuration from a file.\n\n    Args:\n        filename: Path to the configuration file\n    \"\"\"\n    with open(filename, \"r\") as f:\n        config = json.load(f)\n    self.update_map_config(config)\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.save_config","title":"<code>save_config(self, filename)</code>","text":"<p>Save the current configuration to a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to save the configuration</p> required Source code in <code>anymap/keplergl.py</code> <pre><code>def save_config(self, filename: str) -&gt; None:\n    \"\"\"Save the current configuration to a file.\n\n    Args:\n        filename: Path to save the configuration\n    \"\"\"\n    with open(filename, \"w\") as f:\n        json.dump(self.map_config, f, indent=2)\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.set_filter","title":"<code>set_filter(self, filter_config)</code>","text":"<p>Set filter configuration.</p> <p>Parameters:</p> Name Type Description Default <code>filter_config</code> <code>Dict[str, Any]</code> <p>Filter configuration</p> required Source code in <code>anymap/keplergl.py</code> <pre><code>def set_filter(self, filter_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Set filter configuration.\n\n    Args:\n        filter_config: Filter configuration\n    \"\"\"\n    self.call_js_method(\"setFilter\", filter_config)\n</code></pre>"},{"location":"keplergl/#anymap.keplergl.KeplerGLMap.update_map_config","title":"<code>update_map_config(self, config)</code>","text":"<p>Update the map configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>New configuration to merge</p> required Source code in <code>anymap/keplergl.py</code> <pre><code>def update_map_config(self, config: Dict[str, Any]) -&gt; None:\n    \"\"\"Update the map configuration.\n\n    Args:\n        config: New configuration to merge\n    \"\"\"\n\n    # Deep merge the configuration\n    def deep_merge(dict1, dict2):\n        result = dict1.copy()\n        for key, value in dict2.items():\n            if (\n                key in result\n                and isinstance(result[key], dict)\n                and isinstance(value, dict)\n            ):\n                result[key] = deep_merge(result[key], value)\n            else:\n                result[key] = value\n        return result\n\n    self.map_config = deep_merge(self.map_config, config)\n</code></pre>"},{"location":"leaflet/","title":"leaflet module","text":"<p>Leaflet implementation of the map widget.</p>"},{"location":"leaflet/#anymap.leaflet.LeafletMap","title":"<code> LeafletMap            (MapWidget)         </code>","text":"<p>Leaflet implementation of the map widget.</p> Source code in <code>anymap/leaflet.py</code> <pre><code>class LeafletMap(MapWidget):\n    \"\"\"Leaflet implementation of the map widget.\"\"\"\n\n    # Leaflet-specific traits\n    tile_layer = traitlets.Unicode(\"OpenStreetMap\").tag(sync=True)\n    attribution = traitlets.Unicode(\"\").tag(sync=True)\n    map_options = traitlets.Dict(default_value={}).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_leaflet\n    _css = _css_leaflet\n\n    def __init__(\n        self,\n        center: List[float] = [51.505, -0.09],\n        zoom: float = 13.0,\n        tile_layer: str = \"OpenStreetMap\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        **kwargs,\n    ):\n        \"\"\"Initialize Leaflet map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            tile_layer: Tile layer provider name or URL template\n            width: Widget width\n            height: Widget height\n            map_options: Leaflet Map Options (see https://leafletjs.com/reference.html#map-option)\n            **kwargs: Additional widget arguments\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            **kwargs,\n        )\n        self.tile_layer = tile_layer\n\n    def add_tile_layer(\n        self,\n        url_template: str,\n        attribution: str = \"\",\n        layer_id: str = None,\n        **options,\n    ) -&gt; None:\n        \"\"\"Add a tile layer to the map.\n\n        Args:\n            url_template: URL template for the tile layer\n            attribution: Attribution text for the layer\n            layer_id: Unique identifier for the layer\n            **options: Additional layer options\n        \"\"\"\n        if layer_id is None:\n            layer_id = f\"tile_layer_{len(self._layers)}\"\n\n        layer_config = {\n            \"type\": \"tile\",\n            \"url\": url_template,\n            \"attribution\": attribution,\n            **options,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(\n        self,\n        latlng: List[float],\n        popup: str = \"\",\n        tooltip: str = \"\",\n        tooltip_options: Optional[Dict] = None,\n        icon: Optional[Dict[str, Any]] = None,\n        draggable: bool = False,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a marker to the map.\n\n        Args:\n            latlng: Marker position as [latitude, longitude]\n            popup: Popup text\n            tooltip: Tooltip text\n            tooltip_options: Tooltip options\n            icon: Icon configuration\n            draggable: Whether the marker is draggable\n            **options: Additional marker options\n\n        Returns:\n            Marker ID\n        \"\"\"\n        marker_id = f\"marker_{len(self._layers)}\"\n\n        marker_config = {\n            \"type\": \"marker\",\n            \"latlng\": latlng,\n            \"popup\": popup,\n            \"tooltip\": tooltip,\n            \"tooltip_options\": tooltip_options,\n            \"draggable\": draggable,\n            **options,\n        }\n\n        if icon:\n            marker_config[\"icon\"] = icon\n\n        self.add_layer(marker_id, marker_config)\n        return marker_id\n\n    def add_circle(\n        self,\n        latlng: List[float],\n        radius: float,\n        color: str = \"blue\",\n        fillColor: str = \"blue\",\n        fillOpacity: float = 0.2,\n        tooltip: str = \"\",\n        tooltip_options: Optional[Dict] = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a circle to the map.\n\n        Args:\n            latlng: Circle center as [latitude, longitude]\n            radius: Circle radius in meters\n            color: Circle stroke color\n            fillColor: Circle fill color\n            fillOpacity: Circle fill opacity\n            tooltip: Tooltip text\n            tooltip_options: Tooltip options\n            **options: Additional circle options\n\n        Returns:\n            Circle ID\n        \"\"\"\n        circle_id = f\"circle_{len(self._layers)}\"\n\n        circle_config = {\n            \"type\": \"circle\",\n            \"latlng\": latlng,\n            \"radius\": radius,\n            \"color\": color,\n            \"fillColor\": fillColor,\n            \"fillOpacity\": fillOpacity,\n            \"tooltip\": tooltip,\n            \"tooltip_options\": tooltip_options,\n            **options,\n        }\n\n        self.add_layer(circle_id, circle_config)\n        return circle_id\n\n    def add_polygon(\n        self,\n        latlngs: List[List[float]],\n        color: str = \"blue\",\n        fillColor: str = \"blue\",\n        fillOpacity: float = 0.2,\n        tooltip: str = \"\",\n        tooltip_options: Optional[Dict] = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a polygon to the map.\n\n        Args:\n            latlngs: Polygon vertices as [[lat, lng], [lat, lng], ...]\n            color: Polygon stroke color\n            fillColor: Polygon fill color\n            fillOpacity: Polygon fill opacity\n            **options: Additional polygon options\n\n        Returns:\n            Polygon ID\n        \"\"\"\n        polygon_id = f\"polygon_{len(self._layers)}\"\n\n        polygon_config = {\n            \"type\": \"polygon\",\n            \"latlngs\": latlngs,\n            \"color\": color,\n            \"fillColor\": fillColor,\n            \"fillOpacity\": fillOpacity,\n            \"tooltip\": tooltip,\n            \"tooltip_options\": tooltip_options,\n            **options,\n        }\n\n        self.add_layer(polygon_id, polygon_config)\n        return polygon_id\n\n    def add_polyline(\n        self,\n        latlngs: List[List[float]],\n        color: str = \"blue\",\n        weight: float = 3,\n        tooltip: str = \"\",\n        tooltip_options: Optional[Dict] = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a polyline to the map.\n\n        Args:\n            latlngs: Polyline vertices as [[lat, lng], [lat, lng], ...]\n            color: Polyline color\n            weight: Polyline weight\n            **options: Additional polyline options\n\n        Returns:\n            Polyline ID\n        \"\"\"\n        polyline_id = f\"polyline_{len(self._layers)}\"\n\n        polyline_config = {\n            \"type\": \"polyline\",\n            \"latlngs\": latlngs,\n            \"color\": color,\n            \"weight\": weight,\n            \"tooltip\": tooltip,\n            \"tooltip_options\": tooltip_options,\n            **options,\n        }\n\n        self.add_layer(polyline_id, polyline_config)\n        return polyline_id\n\n    def add_geojson(\n        self,\n        data: Union[str, Dict[str, Any]],\n        style: Optional[Dict[str, Any]] = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add GeoJSON data to the map.\n\n        Args:\n            data: GeoJSON data as string or dict\n            style: Style configuration\n            **options: Additional GeoJSON options\n\n        Returns:\n            GeoJSON layer ID\n        \"\"\"\n        geojson_id = f\"geojson_{len(self._layers)}\"\n\n        geojson_config = {\n            \"type\": \"geojson\",\n            \"data\": data,\n            **options,\n        }\n\n        if style:\n            geojson_config[\"style\"] = style\n\n        self.add_layer(geojson_id, geojson_config)\n        return geojson_id\n\n    def fit_bounds(self, bounds: List[List[float]]) -&gt; None:\n        \"\"\"Fit the map view to given bounds.\n\n        Args:\n            bounds: Bounds as [[south, west], [north, east]]\n        \"\"\"\n        self.call_js_method(\"fitBounds\", bounds)\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate the HTML template with map state for Leaflet.\"\"\"\n\n        # Get tile layer URL template\n        tile_providers = {\n            \"OpenStreetMap\": \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"CartoDB.Positron\": \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\",\n            \"CartoDB.DarkMatter\": \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\",\n            \"Stamen.Terrain\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg\",\n            \"Stamen.Watercolor\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\",\n        }\n\n        tile_url = tile_providers.get(map_state.get(\"tile_layer\", \"OpenStreetMap\"))\n        if not tile_url:\n            tile_url = map_state.get(\"tile_layer\", tile_providers[\"OpenStreetMap\"])\n\n        html_template = f\"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\"\n          integrity=\"sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=\"\n          crossorigin=\"\"/&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n        }}\n        #map {{\n            width: {map_state.get('width', '100%')};\n            height: {map_state.get('height', '600px')};\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"\n            integrity=\"sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=\"\n            crossorigin=\"\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Initialize the map\n        var map = L.map('map', {{\n            center: {map_state.get('center', [51.505, -0.09])},\n            zoom: {map_state.get('zoom', 13)}\n        }});\n\n        // Add tile layer\n        L.tileLayer('{tile_url}', {{\n            attribution: '\u00a9 OpenStreetMap contributors'\n        }}).addTo(map);\n\n        // Add layers\n        var layers = {json.dumps(map_state.get('_layers', {}))};\n        for (var layerId in layers) {{\n            var layer = layers[layerId];\n            var leafletLayer = null;\n\n            if (layer.type === 'tile') {{\n                leafletLayer = L.tileLayer(layer.url, {{\n                    attribution: layer.attribution || ''\n                }});\n            }} else if (layer.type === 'marker') {{\n                leafletLayer = L.marker(layer.latlng, {{\n                    draggable: layer.draggable || false\n                }});\n                if (layer.popup) {{\n                    leafletLayer.bindPopup(layer.popup);\n                }}\n                if (layer.tooltip) {{\n                    leafletLayer.bindTooltip(layer.tooltip);\n                }}\n            }} else if (layer.type === 'circle') {{\n                leafletLayer = L.circle(layer.latlng, {{\n                    radius: layer.radius,\n                    color: layer.color || 'blue',\n                    fillColor: layer.fillColor || 'blue',\n                    fillOpacity: layer.fillOpacity || 0.2\n                }});\n            }} else if (layer.type === 'polygon') {{\n                leafletLayer = L.polygon(layer.latlngs, {{\n                    color: layer.color || 'blue',\n                    fillColor: layer.fillColor || 'blue',\n                    fillOpacity: layer.fillOpacity || 0.2\n                }});\n            }} else if (layer.type === 'polyline') {{\n                leafletLayer = L.polyline(layer.latlngs, {{\n                    color: layer.color || 'blue',\n                    weight: layer.weight || 3\n                }});\n            }} else if (layer.type === 'geojson') {{\n                leafletLayer = L.geoJSON(layer.data, layer.style || {{}});\n            }}\n\n            if (leafletLayer) {{\n                leafletLayer.addTo(map);\n            }}\n        }}\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n        return html_template\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.__init__","title":"<code>__init__(self, center=[51.505, -0.09], zoom=13.0, tile_layer='OpenStreetMap', width='100%', height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initialize Leaflet map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[51.505, -0.09]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>13.0</code> <code>tile_layer</code> <code>str</code> <p>Tile layer provider name or URL template</p> <code>'OpenStreetMap'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>map_options</code> <p>Leaflet Map Options (see https://leafletjs.com/reference.html#map-option)</p> required <code>**kwargs</code> <p>Additional widget arguments</p> <code>{}</code> Source code in <code>anymap/leaflet.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [51.505, -0.09],\n    zoom: float = 13.0,\n    tile_layer: str = \"OpenStreetMap\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    **kwargs,\n):\n    \"\"\"Initialize Leaflet map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        tile_layer: Tile layer provider name or URL template\n        width: Widget width\n        height: Widget height\n        map_options: Leaflet Map Options (see https://leafletjs.com/reference.html#map-option)\n        **kwargs: Additional widget arguments\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        **kwargs,\n    )\n    self.tile_layer = tile_layer\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.add_circle","title":"<code>add_circle(self, latlng, radius, color='blue', fillColor='blue', fillOpacity=0.2, tooltip='', tooltip_options=None, **options)</code>","text":"<p>Add a circle to the map.</p> <p>Parameters:</p> Name Type Description Default <code>latlng</code> <code>List[float]</code> <p>Circle center as [latitude, longitude]</p> required <code>radius</code> <code>float</code> <p>Circle radius in meters</p> required <code>color</code> <code>str</code> <p>Circle stroke color</p> <code>'blue'</code> <code>fillColor</code> <code>str</code> <p>Circle fill color</p> <code>'blue'</code> <code>fillOpacity</code> <code>float</code> <p>Circle fill opacity</p> <code>0.2</code> <code>tooltip</code> <code>str</code> <p>Tooltip text</p> <code>''</code> <code>tooltip_options</code> <code>Optional[Dict]</code> <p>Tooltip options</p> <code>None</code> <code>**options</code> <p>Additional circle options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Circle ID</p> Source code in <code>anymap/leaflet.py</code> <pre><code>def add_circle(\n    self,\n    latlng: List[float],\n    radius: float,\n    color: str = \"blue\",\n    fillColor: str = \"blue\",\n    fillOpacity: float = 0.2,\n    tooltip: str = \"\",\n    tooltip_options: Optional[Dict] = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add a circle to the map.\n\n    Args:\n        latlng: Circle center as [latitude, longitude]\n        radius: Circle radius in meters\n        color: Circle stroke color\n        fillColor: Circle fill color\n        fillOpacity: Circle fill opacity\n        tooltip: Tooltip text\n        tooltip_options: Tooltip options\n        **options: Additional circle options\n\n    Returns:\n        Circle ID\n    \"\"\"\n    circle_id = f\"circle_{len(self._layers)}\"\n\n    circle_config = {\n        \"type\": \"circle\",\n        \"latlng\": latlng,\n        \"radius\": radius,\n        \"color\": color,\n        \"fillColor\": fillColor,\n        \"fillOpacity\": fillOpacity,\n        \"tooltip\": tooltip,\n        \"tooltip_options\": tooltip_options,\n        **options,\n    }\n\n    self.add_layer(circle_id, circle_config)\n    return circle_id\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.add_geojson","title":"<code>add_geojson(self, data, style=None, **options)</code>","text":"<p>Add GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[str, Dict[str, Any]]</code> <p>GeoJSON data as string or dict</p> required <code>style</code> <code>Optional[Dict[str, Any]]</code> <p>Style configuration</p> <code>None</code> <code>**options</code> <p>Additional GeoJSON options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>GeoJSON layer ID</p> Source code in <code>anymap/leaflet.py</code> <pre><code>def add_geojson(\n    self,\n    data: Union[str, Dict[str, Any]],\n    style: Optional[Dict[str, Any]] = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add GeoJSON data to the map.\n\n    Args:\n        data: GeoJSON data as string or dict\n        style: Style configuration\n        **options: Additional GeoJSON options\n\n    Returns:\n        GeoJSON layer ID\n    \"\"\"\n    geojson_id = f\"geojson_{len(self._layers)}\"\n\n    geojson_config = {\n        \"type\": \"geojson\",\n        \"data\": data,\n        **options,\n    }\n\n    if style:\n        geojson_config[\"style\"] = style\n\n    self.add_layer(geojson_id, geojson_config)\n    return geojson_id\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.add_marker","title":"<code>add_marker(self, latlng, popup='', tooltip='', tooltip_options=None, icon=None, draggable=False, **options)</code>","text":"<p>Add a marker to the map.</p> <p>Parameters:</p> Name Type Description Default <code>latlng</code> <code>List[float]</code> <p>Marker position as [latitude, longitude]</p> required <code>popup</code> <code>str</code> <p>Popup text</p> <code>''</code> <code>tooltip</code> <code>str</code> <p>Tooltip text</p> <code>''</code> <code>tooltip_options</code> <code>Optional[Dict]</code> <p>Tooltip options</p> <code>None</code> <code>icon</code> <code>Optional[Dict[str, Any]]</code> <p>Icon configuration</p> <code>None</code> <code>draggable</code> <code>bool</code> <p>Whether the marker is draggable</p> <code>False</code> <code>**options</code> <p>Additional marker options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Marker ID</p> Source code in <code>anymap/leaflet.py</code> <pre><code>def add_marker(\n    self,\n    latlng: List[float],\n    popup: str = \"\",\n    tooltip: str = \"\",\n    tooltip_options: Optional[Dict] = None,\n    icon: Optional[Dict[str, Any]] = None,\n    draggable: bool = False,\n    **options,\n) -&gt; str:\n    \"\"\"Add a marker to the map.\n\n    Args:\n        latlng: Marker position as [latitude, longitude]\n        popup: Popup text\n        tooltip: Tooltip text\n        tooltip_options: Tooltip options\n        icon: Icon configuration\n        draggable: Whether the marker is draggable\n        **options: Additional marker options\n\n    Returns:\n        Marker ID\n    \"\"\"\n    marker_id = f\"marker_{len(self._layers)}\"\n\n    marker_config = {\n        \"type\": \"marker\",\n        \"latlng\": latlng,\n        \"popup\": popup,\n        \"tooltip\": tooltip,\n        \"tooltip_options\": tooltip_options,\n        \"draggable\": draggable,\n        **options,\n    }\n\n    if icon:\n        marker_config[\"icon\"] = icon\n\n    self.add_layer(marker_id, marker_config)\n    return marker_id\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.add_polygon","title":"<code>add_polygon(self, latlngs, color='blue', fillColor='blue', fillOpacity=0.2, tooltip='', tooltip_options=None, **options)</code>","text":"<p>Add a polygon to the map.</p> <p>Parameters:</p> Name Type Description Default <code>latlngs</code> <code>List[List[float]]</code> <p>Polygon vertices as [[lat, lng], [lat, lng], ...]</p> required <code>color</code> <code>str</code> <p>Polygon stroke color</p> <code>'blue'</code> <code>fillColor</code> <code>str</code> <p>Polygon fill color</p> <code>'blue'</code> <code>fillOpacity</code> <code>float</code> <p>Polygon fill opacity</p> <code>0.2</code> <code>**options</code> <p>Additional polygon options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Polygon ID</p> Source code in <code>anymap/leaflet.py</code> <pre><code>def add_polygon(\n    self,\n    latlngs: List[List[float]],\n    color: str = \"blue\",\n    fillColor: str = \"blue\",\n    fillOpacity: float = 0.2,\n    tooltip: str = \"\",\n    tooltip_options: Optional[Dict] = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add a polygon to the map.\n\n    Args:\n        latlngs: Polygon vertices as [[lat, lng], [lat, lng], ...]\n        color: Polygon stroke color\n        fillColor: Polygon fill color\n        fillOpacity: Polygon fill opacity\n        **options: Additional polygon options\n\n    Returns:\n        Polygon ID\n    \"\"\"\n    polygon_id = f\"polygon_{len(self._layers)}\"\n\n    polygon_config = {\n        \"type\": \"polygon\",\n        \"latlngs\": latlngs,\n        \"color\": color,\n        \"fillColor\": fillColor,\n        \"fillOpacity\": fillOpacity,\n        \"tooltip\": tooltip,\n        \"tooltip_options\": tooltip_options,\n        **options,\n    }\n\n    self.add_layer(polygon_id, polygon_config)\n    return polygon_id\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.add_polyline","title":"<code>add_polyline(self, latlngs, color='blue', weight=3, tooltip='', tooltip_options=None, **options)</code>","text":"<p>Add a polyline to the map.</p> <p>Parameters:</p> Name Type Description Default <code>latlngs</code> <code>List[List[float]]</code> <p>Polyline vertices as [[lat, lng], [lat, lng], ...]</p> required <code>color</code> <code>str</code> <p>Polyline color</p> <code>'blue'</code> <code>weight</code> <code>float</code> <p>Polyline weight</p> <code>3</code> <code>**options</code> <p>Additional polyline options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Polyline ID</p> Source code in <code>anymap/leaflet.py</code> <pre><code>def add_polyline(\n    self,\n    latlngs: List[List[float]],\n    color: str = \"blue\",\n    weight: float = 3,\n    tooltip: str = \"\",\n    tooltip_options: Optional[Dict] = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add a polyline to the map.\n\n    Args:\n        latlngs: Polyline vertices as [[lat, lng], [lat, lng], ...]\n        color: Polyline color\n        weight: Polyline weight\n        **options: Additional polyline options\n\n    Returns:\n        Polyline ID\n    \"\"\"\n    polyline_id = f\"polyline_{len(self._layers)}\"\n\n    polyline_config = {\n        \"type\": \"polyline\",\n        \"latlngs\": latlngs,\n        \"color\": color,\n        \"weight\": weight,\n        \"tooltip\": tooltip,\n        \"tooltip_options\": tooltip_options,\n        **options,\n    }\n\n    self.add_layer(polyline_id, polyline_config)\n    return polyline_id\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.add_tile_layer","title":"<code>add_tile_layer(self, url_template, attribution='', layer_id=None, **options)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url_template</code> <code>str</code> <p>URL template for the tile layer</p> required <code>attribution</code> <code>str</code> <p>Attribution text for the layer</p> <code>''</code> <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer</p> <code>None</code> <code>**options</code> <p>Additional layer options</p> <code>{}</code> Source code in <code>anymap/leaflet.py</code> <pre><code>def add_tile_layer(\n    self,\n    url_template: str,\n    attribution: str = \"\",\n    layer_id: str = None,\n    **options,\n) -&gt; None:\n    \"\"\"Add a tile layer to the map.\n\n    Args:\n        url_template: URL template for the tile layer\n        attribution: Attribution text for the layer\n        layer_id: Unique identifier for the layer\n        **options: Additional layer options\n    \"\"\"\n    if layer_id is None:\n        layer_id = f\"tile_layer_{len(self._layers)}\"\n\n    layer_config = {\n        \"type\": \"tile\",\n        \"url\": url_template,\n        \"attribution\": attribution,\n        **options,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"leaflet/#anymap.leaflet.LeafletMap.fit_bounds","title":"<code>fit_bounds(self, bounds)</code>","text":"<p>Fit the map view to given bounds.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>List[List[float]]</code> <p>Bounds as [[south, west], [north, east]]</p> required Source code in <code>anymap/leaflet.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]]) -&gt; None:\n    \"\"\"Fit the map view to given bounds.\n\n    Args:\n        bounds: Bounds as [[south, west], [north, east]]\n    \"\"\"\n    self.call_js_method(\"fitBounds\", bounds)\n</code></pre>"},{"location":"mapbox/","title":"mapbox module","text":"<p>Mapbox GL JS implementation of the map widget.</p> <p>This module provides the MapboxMap class which implements an interactive map widget using the Mapbox GL JS library. Mapbox GL JS provides fast vector map rendering with WebGL and requires an access token for Mapbox services.</p> <p>Classes</p> <p>MapboxMap: Main map widget class for Mapbox GL JS.</p> <p>Note</p> <p>Mapbox services require an access token. You can get a free token at https://account.mapbox.com/access-tokens/</p> <p>Examples:</p> <p>Basic usage of MapboxMap:</p> <pre><code>&gt;&gt;&gt; from anymap.mapbox import MapboxMap\n&gt;&gt;&gt; m = MapboxMap(\n...     center=[40.7, -74.0],\n...     zoom=10,\n...     access_token=\"your_mapbox_token\"\n... )\n&gt;&gt;&gt; m.add_basemap(\"OpenStreetMap.Mapnik\")\n&gt;&gt;&gt; m\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap","title":"<code> MapboxMap            (MapWidget)         </code>","text":"<p>Mapbox GL JS implementation of the map widget.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>class MapboxMap(MapWidget):\n    \"\"\"Mapbox GL JS implementation of the map widget.\"\"\"\n\n    # Mapbox-specific traits\n    style = traitlets.Unicode(\"mapbox://styles/mapbox/streets-v12\").tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_mapbox\n    _css = _css_mapbox\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        style: str = \"mapbox://styles/mapbox/streets-v12\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        access_token: str = \"\",\n        **kwargs,\n    ):\n        \"\"\"Initialize Mapbox map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            style: Mapbox style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            access_token: Mapbox access token (required for Mapbox services).\n                         Get a free token at https://account.mapbox.com/access-tokens/\n                         Can also be set via MAPBOX_TOKEN environment variable.\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            style=style,\n            bearing=bearing,\n            pitch=pitch,\n            access_token=access_token,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Mapbox access token from environment or return demo token.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"MAPBOX_TOKEN\") or os.environ.get(\"MAPBOX_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Mapbox access token.\"\"\"\n        self.access_token = token\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def add_tile_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_control(\n        self,\n        control_type: str,\n        position: str = \"top-right\",\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a control to the map.\n\n        Args:\n            control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            options: Additional options for the control\n        \"\"\"\n        control_options = options or {}\n        control_options[\"position\"] = position\n        self.call_js_method(\"addControl\", control_type, control_options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set 3D terrain on the map.\n\n        Args:\n            terrain_config: Terrain configuration dict, or None to remove terrain\n        \"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set atmospheric fog on the map.\n\n        Args:\n            fog_config: Fog configuration dict, or None to remove fog\n        \"\"\"\n        self.call_js_method(\"setFog\", fog_config)\n\n    def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n        \"\"\"Add 3D buildings layer to the map.\"\"\"\n        # Add the layer for 3D buildings\n        layer_config = {\n            \"id\": layer_id,\n            \"source\": \"composite\",\n            \"source-layer\": \"building\",\n            \"filter\": [\"==\", \"extrude\", \"true\"],\n            \"type\": \"fill-extrusion\",\n            \"minzoom\": 15,\n            \"paint\": {\n                \"fill-extrusion-color\": \"#aaa\",\n                \"fill-extrusion-height\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"height\"],\n                ],\n                \"fill-extrusion-base\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"min_height\"],\n                ],\n                \"fill-extrusion-opacity\": 0.6,\n            },\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_basemap(self, basemap: str, layer_id: str = \"basemap\") -&gt; None:\n        \"\"\"Add a basemap to the map using xyzservices providers.\n\n        Args:\n            basemap: Name of the basemap from xyzservices (e.g., \"Esri.WorldImagery\")\n            layer_id: ID for the basemap layer (default: \"basemap\")\n        \"\"\"\n        if basemap not in available_basemaps:\n            available_names = list(available_basemaps.keys())\n            raise ValueError(\n                f\"Basemap '{basemap}' not found. Available basemaps: {available_names}\"\n            )\n\n        basemap_config = available_basemaps[basemap]\n\n        # Convert xyzservices URL template to tile URL\n        tile_url = basemap_config.build_url()\n\n        # Get attribution if available\n        attribution = basemap_config.get(\"attribution\", \"\")\n\n        # Add as raster layer\n        self.add_tile_layer(\n            layer_id=layer_id, source_url=tile_url, paint={\"raster-opacity\": 1.0}\n        )\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate HTML template for Mapbox GL JS.\"\"\"\n        # Serialize map state for JavaScript\n        map_state_json = json.dumps(map_state, indent=2)\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://api.mapbox.com/mapbox-gl-js/v3.13.0/mapbox-gl.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://api.mapbox.com/mapbox-gl-js/v3.13.0/mapbox-gl.css\" rel=\"stylesheet\"&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }}\n        #map {{\n            width: {map_state['width']};\n            height: {map_state['height']};\n            border: 1px solid #ccc;\n        }}\n        h1 {{\n            margin-top: 0;\n            color: #333;\n        }}\n        .access-token-warning {{\n            background-color: #fff3cd;\n            border: 1px solid #ffeaa7;\n            color: #856404;\n            padding: 10px;\n            margin-bottom: 20px;\n            border-radius: 4px;\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{title}&lt;/h1&gt;\n    {\"&lt;div class='access-token-warning'&gt;Warning: This map requires a Mapbox access token. Please add your token to the mapboxgl.accessToken property.&lt;/div&gt;\" if not map_state.get('access_token') else \"\"}\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Map state from Python\n        const mapState = {map_state_json};\n\n        // Set Mapbox access token\n        mapboxgl.accessToken = mapState.access_token || '';\n\n        // Initialize Mapbox map\n        const map = new mapboxgl.Map({{\n            container: 'map',\n            style: mapState.style || 'mapbox://styles/mapbox/streets-v12',\n            center: [mapState.center[1], mapState.center[0]], // Convert [lat, lng] to [lng, lat]\n            zoom: mapState.zoom || 2,\n            bearing: mapState.bearing || 0,\n            pitch: mapState.pitch || 0,\n            antialias: mapState.antialias !== undefined ? mapState.antialias : true\n        }});\n\n        // Restore layers and sources after map loads\n        map.on('load', function() {{\n            // Add sources first\n            const sources = mapState._sources || {{}};\n            Object.entries(sources).forEach(([sourceId, sourceConfig]) =&gt; {{\n                try {{\n                    map.addSource(sourceId, sourceConfig);\n                }} catch (error) {{\n                    console.warn(`Failed to add source ${{sourceId}}:`, error);\n                }}\n            }});\n\n            // Then add layers\n            const layers = mapState._layers || {{}};\n            Object.entries(layers).forEach(([layerId, layerConfig]) =&gt; {{\n                try {{\n                    map.addLayer(layerConfig);\n                }} catch (error) {{\n                    console.warn(`Failed to add layer ${{layerId}}:`, error);\n                }}\n            }});\n        }});\n\n        // Add navigation controls\n        map.addControl(new mapboxgl.NavigationControl());\n\n        // Add scale control\n        map.addControl(new mapboxgl.ScaleControl());\n\n        // Log map events for debugging\n        map.on('click', function(e) {{\n            console.log('Map clicked at:', e.lngLat);\n        }});\n\n        map.on('load', function() {{\n            console.log('Map loaded successfully');\n        }});\n\n        map.on('error', function(e) {{\n            console.error('Map error:', e);\n        }});\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n        return html_template\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, style='mapbox://styles/mapbox/streets-v12', width='100%', height='600px', bearing=0.0, pitch=0.0, access_token='', **kwargs)</code>  <code>special</code>","text":"<p>Initialize Mapbox map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>style</code> <code>str</code> <p>Mapbox style URL or style object</p> <code>'mapbox://styles/mapbox/streets-v12'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Mapbox access token (required for Mapbox services).          Get a free token at https://account.mapbox.com/access-tokens/          Can also be set via MAPBOX_TOKEN environment variable.</p> <code>''</code> Source code in <code>anymap/mapbox.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    style: str = \"mapbox://styles/mapbox/streets-v12\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    access_token: str = \"\",\n    **kwargs,\n):\n    \"\"\"Initialize Mapbox map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        style: Mapbox style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        access_token: Mapbox access token (required for Mapbox services).\n                     Get a free token at https://account.mapbox.com/access-tokens/\n                     Can also be set via MAPBOX_TOKEN environment variable.\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        style=style,\n        bearing=bearing,\n        pitch=pitch,\n        access_token=access_token,\n        **kwargs,\n    )\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_3d_buildings","title":"<code>add_3d_buildings(self, layer_id='3d-buildings')</code>","text":"<p>Add 3D buildings layer to the map.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n    \"\"\"Add 3D buildings layer to the map.\"\"\"\n    # Add the layer for 3D buildings\n    layer_config = {\n        \"id\": layer_id,\n        \"source\": \"composite\",\n        \"source-layer\": \"building\",\n        \"filter\": [\"==\", \"extrude\", \"true\"],\n        \"type\": \"fill-extrusion\",\n        \"minzoom\": 15,\n        \"paint\": {\n            \"fill-extrusion-color\": \"#aaa\",\n            \"fill-extrusion-height\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"height\"],\n            ],\n            \"fill-extrusion-base\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"min_height\"],\n            ],\n            \"fill-extrusion-opacity\": 0.6,\n        },\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_basemap","title":"<code>add_basemap(self, basemap, layer_id='basemap')</code>","text":"<p>Add a basemap to the map using xyzservices providers.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Name of the basemap from xyzservices (e.g., \"Esri.WorldImagery\")</p> required <code>layer_id</code> <code>str</code> <p>ID for the basemap layer (default: \"basemap\")</p> <code>'basemap'</code> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_basemap(self, basemap: str, layer_id: str = \"basemap\") -&gt; None:\n    \"\"\"Add a basemap to the map using xyzservices providers.\n\n    Args:\n        basemap: Name of the basemap from xyzservices (e.g., \"Esri.WorldImagery\")\n        layer_id: ID for the basemap layer (default: \"basemap\")\n    \"\"\"\n    if basemap not in available_basemaps:\n        available_names = list(available_basemaps.keys())\n        raise ValueError(\n            f\"Basemap '{basemap}' not found. Available basemaps: {available_names}\"\n        )\n\n    basemap_config = available_basemaps[basemap]\n\n    # Convert xyzservices URL template to tile URL\n    tile_url = basemap_config.build_url()\n\n    # Get attribution if available\n    attribution = basemap_config.get(\"attribution\", \"\")\n\n    # Add as raster layer\n    self.add_tile_layer(\n        layer_id=layer_id, source_url=tile_url, paint={\"raster-opacity\": 1.0}\n    )\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_control","title":"<code>add_control(self, control_type, position='top-right', options=None)</code>","text":"<p>Add a control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')</p> required <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the control</p> <code>None</code> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_control(\n    self,\n    control_type: str,\n    position: str = \"top-right\",\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a control to the map.\n\n    Args:\n        control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        options: Additional options for the control\n    \"\"\"\n    control_options = options or {}\n    control_options[\"position\"] = position\n    self.call_js_method(\"addControl\", control_type, control_options)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_tile_layer","title":"<code>add_tile_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_tile_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Mapbox access token.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Mapbox access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.set_fog","title":"<code>set_fog(self, fog_config=None)</code>","text":"<p>Set atmospheric fog on the map.</p> <p>Parameters:</p> Name Type Description Default <code>fog_config</code> <code>Optional[Dict[str, Any]]</code> <p>Fog configuration dict, or None to remove fog</p> <code>None</code> Source code in <code>anymap/mapbox.py</code> <pre><code>def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set atmospheric fog on the map.\n\n    Args:\n        fog_config: Fog configuration dict, or None to remove fog\n    \"\"\"\n    self.call_js_method(\"setFog\", fog_config)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/mapbox.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"mapbox/#anymap.mapbox.MapboxMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set 3D terrain on the map.</p> <p>Parameters:</p> Name Type Description Default <code>terrain_config</code> <code>Optional[Dict[str, Any]]</code> <p>Terrain configuration dict, or None to remove terrain</p> <code>None</code> Source code in <code>anymap/mapbox.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set 3D terrain on the map.\n\n    Args:\n        terrain_config: Terrain configuration dict, or None to remove terrain\n    \"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"maplibre/","title":"maplibre module","text":"<p>MapLibre GL JS implementation of the map widget.</p> <p>This module provides the MapLibreMap class which implements an interactive map widget using the MapLibre GL JS library. MapLibre GL JS is an open-source fork of Mapbox GL JS, providing fast vector map rendering with WebGL.</p> <p>Classes</p> <p>MapLibreMap: Main map widget class for MapLibre GL JS.</p> <p>Examples:</p> <p>Basic usage of MapLibreMap:</p> <pre><code>&gt;&gt;&gt; from anymap.maplibre import MapLibreMap\n&gt;&gt;&gt; m = MapLibreMap(center=[-74.0, 40.7], zoom=10)\n&gt;&gt;&gt; m.add_basemap(\"OpenStreetMap.Mapnik\")\n&gt;&gt;&gt; m\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap","title":"<code> MapLibreMap            (MapWidget)         </code>","text":"<p>MapLibre GL JS implementation of the map widget.</p> <p>This class provides an interactive map widget using MapLibre GL JS, an open-source WebGL-based vector map renderer. It supports various data sources, custom styling, and interactive features.</p> <p>Attributes:</p> Name Type Description <code>style</code> <p>Map style configuration (URL string or style object).</p> <code>bearing</code> <p>Map rotation in degrees (0-360).</p> <code>pitch</code> <p>Map tilt in degrees (0-60).</p> <code>antialias</code> <p>Whether to enable antialiasing for better rendering quality.</p> <p>Examples:</p> <p>Creating a basic MapLibre map:</p> <pre><code>&gt;&gt;&gt; m = MapLibreMap(\n...     center=[40.7749, -122.4194],\n...     zoom=12,\n...     style=\"3d-satellite\"\n... )\n&gt;&gt;&gt; m.add_basemap(\"OpenStreetMap.Mapnik\")\n</code></pre> Source code in <code>anymap/maplibre.py</code> <pre><code>class MapLibreMap(MapWidget):\n    \"\"\"MapLibre GL JS implementation of the map widget.\n\n    This class provides an interactive map widget using MapLibre GL JS,\n    an open-source WebGL-based vector map renderer. It supports various\n    data sources, custom styling, and interactive features.\n\n    Attributes:\n        style: Map style configuration (URL string or style object).\n        bearing: Map rotation in degrees (0-360).\n        pitch: Map tilt in degrees (0-60).\n        antialias: Whether to enable antialiasing for better rendering quality.\n\n    Example:\n        Creating a basic MapLibre map:\n\n        &gt;&gt;&gt; m = MapLibreMap(\n        ...     center=[40.7749, -122.4194],\n        ...     zoom=12,\n        ...     style=\"3d-satellite\"\n        ... )\n        &gt;&gt;&gt; m.add_basemap(\"OpenStreetMap.Mapnik\")\n    \"\"\"\n\n    # MapLibre-specific traits\n    style = traitlets.Union(\n        [traitlets.Unicode(), traitlets.Dict()],\n        default_value=\"dark-matter\",\n    ).tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n    _draw_data = traitlets.Dict().tag(sync=True)\n    _terra_draw_data = traitlets.Dict().tag(sync=True)\n    _terra_draw_enabled = traitlets.Bool(False).tag(sync=True)\n    _layer_dict = traitlets.Dict().tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_maplibre\n    _css = _css_maplibre\n\n    def __init__(\n        self,\n        center: List[float] = [0, 20],\n        zoom: float = 1.0,\n        style: Union[str, Dict[str, Any]] = \"dark-matter\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        controls: Dict[str, str] = {\n            \"navigation\": \"top-right\",\n            \"fullscreen\": \"top-right\",\n            \"scale\": \"bottom-left\",\n            \"globe\": \"top-right\",\n            \"layers\": \"top-right\",\n        },\n        projection: str = \"mercator\",\n        add_sidebar: bool = False,\n        sidebar_visible: bool = False,\n        sidebar_width: int = 360,\n        sidebar_args: Optional[Dict] = None,\n        layer_manager_expanded: bool = True,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"Initialize MapLibre map widget.\n\n        Args:\n            center: Map center coordinates as [longitude, latitude]. Default is [0, 20].\n            zoom: Initial zoom level (typically 0-20). Default is 1.0.\n            style: MapLibre style URL string or style object dictionary.\n            width: Widget width as CSS string (e.g., \"100%\", \"800px\").\n            height: Widget height as CSS string (e.g., \"600px\", \"50vh\").\n            bearing: Map bearing (rotation) in degrees (0-360).\n            pitch: Map pitch (tilt) in degrees (0-60).\n            controls: Dictionary of control names and their positions. Default is {\n                \"navigation\": \"top-right\",\n                \"fullscreen\": \"top-right\",\n                \"scale\": \"bottom-left\",\n                \"globe\": \"top-right\",\n                \"layers\": \"top-right\",\n            }.\n            projection: Map projection type. Can be \"mercator\" or \"globe\". Default is \"mercator\".\n            add_sidebar: Whether to add a sidebar to the map. Default is False.\n            sidebar_visible: Whether the sidebar is visible. Default is False.\n            sidebar_width: Width of the sidebar in pixels. Default is 360.\n            sidebar_args: Additional keyword arguments for the sidebar. Default is None.\n            layer_manager_expanded: Whether the layer manager is expanded. Default is True.\n            **kwargs: Additional keyword arguments passed to parent class.\n        \"\"\"\n\n        if isinstance(style, str):\n            style = construct_maplibre_style(style)\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            style=style,\n            bearing=bearing,\n            pitch=pitch,\n            **kwargs,\n        )\n\n        self.layer_dict = {}\n        self.layer_dict[\"Background\"] = {\n            \"layer\": {\n                \"id\": \"Background\",\n                \"type\": \"background\",\n            },\n            \"opacity\": 1.0,\n            \"visible\": True,\n            \"type\": \"background\",\n            \"color\": None,\n        }\n\n        # Initialize the _layer_dict trait with the layer_dict content\n        self._layer_dict = dict(self.layer_dict)\n\n        # Initialize current state attributes\n        self._current_center = center\n        self._current_zoom = zoom\n        self._current_bearing = bearing\n        self._current_pitch = pitch\n        self._current_bounds = None  # Will be set after map loads\n\n        # Register event handler to update current state\n        self.on_map_event(\"moveend\", self._update_current_state)\n\n        self._style = style\n        self.style_dict = {}\n        for layer in self.get_style_layers():\n            self.style_dict[layer[\"id\"]] = layer\n        self.source_dict = {}\n\n        if projection.lower() == \"globe\":\n            self.set_projection(\n                {\n                    \"type\": [\n                        \"interpolate\",\n                        [\"linear\"],\n                        [\"zoom\"],\n                        10,\n                        \"vertical-perspective\",\n                        12,\n                        \"mercator\",\n                    ]\n                }\n            )\n\n        self.controls = {}\n        for control, position in controls.items():\n            if control == \"layers\":\n                self.add_layer_control(position)\n            else:\n                self.add_control(control, position)\n                self.controls[control] = position\n\n        if sidebar_args is None:\n            sidebar_args = {}\n        if \"sidebar_visible\" not in sidebar_args:\n            sidebar_args[\"sidebar_visible\"] = sidebar_visible\n        if \"sidebar_width\" not in sidebar_args:\n            if isinstance(sidebar_width, str):\n                sidebar_width = int(sidebar_width.replace(\"px\", \"\"))\n            sidebar_args[\"min_width\"] = sidebar_width\n            sidebar_args[\"max_width\"] = sidebar_width\n        if \"expanded\" not in sidebar_args:\n            sidebar_args[\"expanded\"] = layer_manager_expanded\n        self.sidebar_args = sidebar_args\n        self.layer_manager = None\n        self.container = None\n        if add_sidebar:\n            self._ipython_display_ = self._patched_display\n\n    def show(\n        self,\n        sidebar_visible: bool = False,\n        min_width: int = 360,\n        max_width: int = 360,\n        sidebar_content: Optional[Any] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Displays the map with an optional sidebar.\n\n        Args:\n            sidebar_visible (bool): Whether the sidebar is visible. Defaults to False.\n            min_width (int): Minimum width of the sidebar in pixels. Defaults to 250.\n            max_width (int): Maximum width of the sidebar in pixels. Defaults to 300.\n            sidebar_content (Optional[Any]): Content to display in the sidebar. Defaults to None.\n            **kwargs (Any): Additional keyword arguments.\n\n        Returns:\n            None\n        \"\"\"\n        return Container(\n            self,\n            sidebar_visible=sidebar_visible,\n            min_width=min_width,\n            max_width=max_width,\n            sidebar_content=sidebar_content,\n            **kwargs,\n        )\n\n    def create_container(\n        self,\n        sidebar_visible: bool = None,\n        min_width: int = None,\n        max_width: int = None,\n        expanded: bool = None,\n        **kwargs: Any,\n    ):\n        \"\"\"\n        Creates a container widget for the map with an optional sidebar.\n\n        This method initializes a `LayerManagerWidget` and a `Container` widget to display the map\n        alongside a sidebar. The sidebar can be customized with visibility, width, and additional content.\n\n        Args:\n            sidebar_visible (bool): Whether the sidebar is visible. Defaults to False.\n            min_width (int): Minimum width of the sidebar in pixels. Defaults to 360.\n            max_width (int): Maximum width of the sidebar in pixels. Defaults to 360.\n            expanded (bool): Whether the `LayerManagerWidget` is expanded by default. Defaults to True.\n            **kwargs (Any): Additional keyword arguments passed to the `Container` widget.\n\n        Returns:\n            Container: The created container widget with the map and sidebar.\n        \"\"\"\n\n        if sidebar_visible is None:\n            sidebar_visible = self.sidebar_args.get(\"sidebar_visible\", False)\n        if min_width is None:\n            min_width = self.sidebar_args.get(\"min_width\", 360)\n        if max_width is None:\n            max_width = self.sidebar_args.get(\"max_width\", 360)\n        if expanded is None:\n            expanded = self.sidebar_args.get(\"expanded\", True)\n        if self.layer_manager is None:\n            self.layer_manager = LayerManagerWidget(self, expanded=expanded)\n\n        container = Container(\n            host_map=self,\n            sidebar_visible=sidebar_visible,\n            min_width=min_width,\n            max_width=max_width,\n            sidebar_content=[self.layer_manager],\n            **kwargs,\n        )\n        self.container = container\n        self.container.sidebar_widgets[\"Layers\"] = self.layer_manager\n        return container\n\n    def _repr_html_(self, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Displays the map in an IPython environment.\n\n        Args:\n            **kwargs (Any): Additional keyword arguments.\n\n        Returns:\n            None\n        \"\"\"\n\n        filename = os.environ.get(\"MAPLIBRE_OUTPUT\", None)\n        replace_key = os.environ.get(\"MAPTILER_REPLACE_KEY\", False)\n        if filename is not None:\n            self.to_html(filename, replace_key=replace_key)\n\n    def _patched_display(\n        self,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Displays the map in an IPython environment with a patched display method.\n\n        Args:\n            **kwargs (Any): Additional keyword arguments.\n\n        Returns:\n            None\n        \"\"\"\n\n        if self.container is not None:\n            container = self.container\n        else:\n            sidebar_visible = self.sidebar_args.get(\"sidebar_visible\", False)\n            min_width = self.sidebar_args.get(\"min_width\", 360)\n            max_width = self.sidebar_args.get(\"max_width\", 360)\n            expanded = self.sidebar_args.get(\"expanded\", True)\n            if self.layer_manager is None:\n                self.layer_manager = LayerManagerWidget(self, expanded=expanded)\n            container = Container(\n                host_map=self,\n                sidebar_visible=sidebar_visible,\n                min_width=min_width,\n                max_width=max_width,\n                sidebar_content=[self.layer_manager],\n                **kwargs,\n            )\n            container.sidebar_widgets[\"Layers\"] = self.layer_manager\n            self.container = container\n\n        if \"google.colab\" in sys.modules:\n            import ipyvue as vue\n\n            display(vue.Html(children=[]), container)\n        else:\n            display(container)\n\n    def add_layer_manager(\n        self,\n        expanded: bool = True,\n        height: str = \"40px\",\n        layer_icon: str = \"mdi-layers\",\n        close_icon: str = \"mdi-close\",\n        label=\"Layers\",\n        background_color: str = \"#f5f5f5\",\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; None:\n        if self.layer_manager is None:\n            self.layer_manager = LayerManagerWidget(\n                self,\n                expanded=expanded,\n                height=height,\n                layer_icon=layer_icon,\n                close_icon=close_icon,\n                label=label,\n                background_color=background_color,\n                *args,\n                **kwargs,\n            )\n\n    def set_sidebar_content(\n        self, content: Union[widgets.VBox, List[widgets.Widget]]\n    ) -&gt; None:\n        \"\"\"\n        Replaces all content in the sidebar (except the toggle button).\n\n        Args:\n            content (Union[widgets.VBox, List[widgets.Widget]]): The new content for the sidebar.\n        \"\"\"\n\n        if self.container is not None:\n            self.container.set_sidebar_content(content)\n\n    def add_to_sidebar(\n        self,\n        widget: widgets.Widget,\n        add_header: bool = True,\n        widget_icon: str = \"mdi-tools\",\n        close_icon: str = \"mdi-close\",\n        label: str = \"My Tools\",\n        background_color: str = \"#f5f5f5\",\n        height: str = \"40px\",\n        expanded: bool = True,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Appends a widget to the sidebar content.\n\n        Args:\n            widget (Optional[Union[widgets.Widget, List[widgets.Widget]]]): Initial widget(s) to display in the content box.\n            widget_icon (str): Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n            close_icon (str): Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n            background_color (str): Background color of the header. Defaults to \"#f5f5f5\".\n            label (str): Text label for the header. Defaults to \"My Tools\".\n            height (str): Height of the header. Defaults to \"40px\".\n            expanded (bool): Whether the panel is expanded by default. Defaults to True.\n            **kwargs (Any): Additional keyword arguments for the parent class.\n        \"\"\"\n        if self.container is None:\n            self.create_container(**self.sidebar_args)\n        self.container.add_to_sidebar(\n            widget,\n            add_header=add_header,\n            widget_icon=widget_icon,\n            close_icon=close_icon,\n            label=label,\n            background_color=background_color,\n            height=height,\n            expanded=expanded,\n            host_map=self,\n            **kwargs,\n        )\n\n    def remove_from_sidebar(\n        self, widget: widgets.Widget = None, name: str = None\n    ) -&gt; None:\n        \"\"\"\n        Removes a widget from the sidebar content.\n\n        Args:\n            widget (widgets.Widget): The widget to remove from the sidebar.\n            name (str): The name of the widget to remove from the sidebar.\n        \"\"\"\n        if self.container is not None:\n            self.container.remove_from_sidebar(widget, name)\n\n    def set_sidebar_width(self, min_width: int = None, max_width: int = None) -&gt; None:\n        \"\"\"\n        Dynamically updates the sidebar's minimum and maximum width.\n\n        Args:\n            min_width (int, optional): New minimum width in pixels. If None, keep current.\n            max_width (int, optional): New maximum width in pixels. If None, keep current.\n        \"\"\"\n        if self.container is None:\n            self.create_container()\n        self.container.set_sidebar_width(min_width, max_width)\n\n    @property\n    def sidebar_widgets(self) -&gt; Dict[str, widgets.Widget]:\n        \"\"\"\n        Returns a dictionary of widgets currently in the sidebar.\n\n        Returns:\n            Dict[str, widgets.Widget]: A dictionary where keys are the labels of the widgets and values are the widgets themselves.\n        \"\"\"\n        return self.container.sidebar_widgets\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\n\n        Args:\n            style: Map style as URL string or style object dictionary.\n        \"\"\"\n        if isinstance(style, str):\n            self.style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\n\n        Args:\n            bearing: Map rotation in degrees (0-360).\n        \"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\n\n        Args:\n            pitch: Map tilt in degrees (0-60).\n        \"\"\"\n        self.pitch = pitch\n\n    def set_layout_property(self, layer_id: str, name: str, value: Any) -&gt; None:\n        \"\"\"Set a layout property for a layer.\n\n        Args:\n            layer_id: Unique identifier of the layer.\n            name: Name of the layout property to set.\n            value: Value to set for the property.\n        \"\"\"\n        self.call_js_method(\"setLayoutProperty\", layer_id, name, value)\n\n    def set_paint_property(self, layer_id: str, name: str, value: Any) -&gt; None:\n        \"\"\"Set a paint property for a layer.\n\n        Args:\n            layer_id: Unique identifier of the layer.\n            name: Name of the paint property to set.\n            value: Value to set for the property.\n        \"\"\"\n        self.call_js_method(\"setPaintProperty\", layer_id, name, value)\n\n    def set_visibility(self, layer_id: str, visible: bool) -&gt; None:\n        \"\"\"Set the visibility of a layer.\n\n        Args:\n            layer_id: Unique identifier of the layer.\n            visible: Whether the layer should be visible.\n        \"\"\"\n        if visible:\n            visibility = \"visible\"\n        else:\n            visibility = \"none\"\n\n        if layer_id == \"Background\":\n            for layer in self.get_style_layers():\n                self.set_layout_property(layer[\"id\"], \"visibility\", visibility)\n        else:\n            self.set_layout_property(layer_id, \"visibility\", visibility)\n        if layer_id in self.layer_dict:\n            self.layer_dict[layer_id][\"visible\"] = visible\n            self._update_layer_controls()\n\n    def set_opacity(self, layer_id: str, opacity: float) -&gt; None:\n        \"\"\"Set the opacity of a layer.\n\n        Args:\n            layer_id: Unique identifier of the layer.\n            opacity: Opacity value between 0.0 (transparent) and 1.0 (opaque).\n        \"\"\"\n        layer_type = self.get_layer_type(layer_id)\n\n        if layer_id == \"Background\":\n            for layer in self.get_style_layers():\n                layer_type = layer.get(\"type\")\n                if layer_type != \"symbol\":\n                    self.set_paint_property(\n                        layer[\"id\"], f\"{layer_type}-opacity\", opacity\n                    )\n                else:\n                    self.set_paint_property(layer[\"id\"], \"icon-opacity\", opacity)\n                    self.set_paint_property(layer[\"id\"], \"text-opacity\", opacity)\n            return\n\n        if layer_id in self.layer_dict:\n            layer_type = self.layer_dict[layer_id][\"layer\"][\"type\"]\n            prop_name = f\"{layer_type}-opacity\"\n            self.layer_dict[layer_id][\"opacity\"] = opacity\n            self._update_layer_controls()\n        elif layer_id in self.style_dict:\n            layer = self.style_dict[layer_id]\n            layer_type = layer.get(\"type\")\n            prop_name = f\"{layer_type}-opacity\"\n            if \"paint\" in layer:\n                layer[\"paint\"][prop_name] = opacity\n\n        if layer_type != \"symbol\":\n            self.set_paint_property(layer_id, f\"{layer_type}-opacity\", opacity)\n        else:\n            self.set_paint_property(layer_id, \"icon-opacity\", opacity)\n            self.set_paint_property(layer_id, \"text-opacity\", opacity)\n\n    def set_projection(self, projection: Dict[str, Any]) -&gt; None:\n        \"\"\"Set the map projection.\n\n        Args:\n            projection: Projection configuration dictionary.\n        \"\"\"\n        # Store projection in persistent state\n        self._projection = projection\n        self.call_js_method(\"setProjection\", projection)\n\n    def set_terrain(\n        self,\n        source: str = \"https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png\",\n        exaggeration: float = 1.0,\n        tile_size: int = 256,\n        encoding: str = \"terrarium\",\n        source_id: str = \"terrain-dem\",\n    ) -&gt; None:\n        \"\"\"Add terrain visualization to the map.\n\n        Args:\n            source: URL template for terrain tiles. Defaults to AWS elevation tiles.\n            exaggeration: Terrain exaggeration factor. Defaults to 1.0.\n            tile_size: Tile size in pixels. Defaults to 256.\n            encoding: Encoding for the terrain tiles. Defaults to \"terrarium\".\n            source_id: Unique identifier for the terrain source. Defaults to \"terrain-dem\".\n        \"\"\"\n        # Add terrain source\n        self.add_source(\n            source_id,\n            {\n                \"type\": \"raster-dem\",\n                \"tiles\": [source],\n                \"tileSize\": tile_size,\n                \"encoding\": encoding,\n            },\n        )\n\n        # Set terrain on the map\n        terrain_config = {\"source\": source_id, \"exaggeration\": exaggeration}\n\n        # Store terrain configuration in persistent state\n        self._terrain = terrain_config\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def get_layer_type(self, layer_id: str) -&gt; Optional[str]:\n        \"\"\"Get the type of a layer.\n\n        Args:\n            layer_id: Unique identifier of the layer.\n\n        Returns:\n            Layer type string, or None if layer doesn't exist.\n        \"\"\"\n        if layer_id in self._layers:\n            return self._layers[layer_id][\"type\"]\n        else:\n            return None\n\n    def get_style(self):\n        \"\"\"\n        Get the style of the map.\n\n        Returns:\n            Dict: The style of the map.\n        \"\"\"\n        if self._style is not None:\n            if isinstance(self._style, str):\n                response = requests.get(self._style, timeout=10)\n                style = response.json()\n            elif isinstance(self._style, dict):\n                style = self._style\n            else:\n                style = {}\n            return style\n        else:\n            return {}\n\n    def get_style_layers(self, return_ids=False, sorted=True) -&gt; List[str]:\n        \"\"\"\n        Get the names of the basemap layers.\n\n        Returns:\n            List[str]: The names of the basemap layers.\n        \"\"\"\n        style = self.get_style()\n        if \"layers\" in style:\n            layers = style[\"layers\"]\n            if return_ids:\n                ids = [layer[\"id\"] for layer in layers]\n                if sorted:\n                    ids.sort()\n\n                return ids\n            else:\n                return layers\n        else:\n            return []\n\n    def add_layer(\n        self,\n        layer_id: str,\n        layer: Dict[str, Any],\n        before_id: Optional[str] = None,\n        opacity: Optional[float] = 1.0,\n        visible: Optional[bool] = True,\n    ) -&gt; None:\n        \"\"\"Add a layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the layer.\n            layer_config: Layer configuration dictionary containing\n                         properties like type, source, paint, and layout.\n            before_id: Optional layer ID to insert this layer before.\n                      If None, layer is added on top.\n        \"\"\"\n        # Store layer in local state for persistence\n        current_layers = dict(self._layers)\n        current_layers[layer_id] = layer\n        self._layers = current_layers\n\n        # Call JavaScript method with before_id if provided\n        if before_id:\n            self.call_js_method(\"addLayer\", layer, before_id)\n        else:\n            self.call_js_method(\"addLayer\", layer, layer_id)\n\n        self.set_visibility(layer_id, visible)\n        self.set_opacity(layer_id, opacity)\n        self.layer_dict[layer_id] = {\n            \"layer\": layer,\n            \"opacity\": opacity,\n            \"visible\": visible,\n            \"type\": layer[\"type\"],\n            # \"color\": color,\n        }\n\n        # Update the _layer_dict trait to trigger JavaScript sync\n        self._layer_dict = dict(self.layer_dict)\n\n        if self.layer_manager is not None:\n            self.layer_manager.refresh()\n\n        # Update layer controls if they exist\n        self._update_layer_controls()\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        before_id: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the layer.\n            geojson_data: GeoJSON data as a dictionary.\n            layer_type: Type of layer (e.g., 'fill', 'line', 'circle', 'symbol').\n            paint: Optional paint properties for styling the layer.\n            before_id: Optional layer ID to insert this layer before.\n        \"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config, before_id)\n\n    def add_marker(self, lng: float, lat: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\n\n        Args:\n            lng: Longitude coordinate for the marker.\n            lat: Latitude coordinate for the marker.\n            popup: Optional popup text to display when marker is clicked.\n        \"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\n\n        Args:\n            bounds: Bounding box as [[south, west], [north, east]].\n            padding: Padding around the bounds in pixels.\n        \"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def add_tile_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        attribution: Optional[str] = None,\n        opacity: Optional[float] = 1.0,\n        visible: Optional[bool] = True,\n        minzoom: Optional[int] = None,\n        maxzoom: Optional[int] = None,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n        before_id: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"Add a raster tile layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the layer.\n            source_url: URL template for the tile source (e.g., 'https://example.com/{z}/{x}/{y}.png').\n            attribution: Optional attribution text for the tile source.\n            opacity: Layer opacity between 0.0 and 1.0.\n            visible: Whether the layer should be visible initially.\n            minzoom: Minimum zoom level for the layer.\n            maxzoom: Maximum zoom level for the layer.\n            paint: Optional paint properties for the layer.\n            layout: Optional layout properties for the layer.\n            before_id: Optional layer ID to insert this layer before.\n            **kwargs: Additional source configuration options.\n        \"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id,\n            {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256, **kwargs},\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config, before_id)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n        before_id: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the layer.\n            source_url: URL for the vector tile source.\n            source_layer: Name of the source layer within the vector tiles.\n            layer_type: Type of layer (e.g., 'fill', 'line', 'circle', 'symbol').\n            paint: Optional paint properties for styling the layer.\n            layout: Optional layout properties for the layer.\n            before_id: Optional layer ID to insert this layer before.\n        \"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config, before_id)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n        before_id: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the layer.\n            image_url: URL of the image to display.\n            coordinates: Corner coordinates of the image as [[top-left], [top-right], [bottom-right], [bottom-left]].\n                        Each coordinate should be [longitude, latitude].\n            paint: Optional paint properties for the image layer.\n            before_id: Optional layer ID to insert this layer before.\n        \"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config, before_id)\n\n    def add_control(\n        self,\n        control_type: str,\n        position: str = \"top-right\",\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a control to the map.\n\n        Args:\n            control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate', 'attribution', 'globe')\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            options: Additional options for the control\n        \"\"\"\n        control_options = options or {}\n        control_options[\"position\"] = position\n\n        # Store control in persistent state\n        control_key = f\"{control_type}_{position}\"\n        current_controls = dict(self._controls)\n        current_controls[control_key] = {\n            \"type\": control_type,\n            \"position\": position,\n            \"options\": control_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addControl\", control_type, control_options)\n\n    def remove_control(\n        self,\n        control_type: str,\n        position: str = \"top-right\",\n    ) -&gt; None:\n        \"\"\"Remove a control from the map.\n\n        Args:\n            control_type: Type of control to remove ('navigation', 'scale', 'fullscreen', 'geolocate', 'attribution', 'globe')\n            position: Position where the control was added ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        \"\"\"\n        # Remove control from persistent state\n        control_key = f\"{control_type}_{position}\"\n        current_controls = dict(self._controls)\n        if control_key in current_controls:\n            del current_controls[control_key]\n            self._controls = current_controls\n\n        self.call_js_method(\"removeControl\", control_type, position)\n\n    def add_layer_control(\n        self,\n        position: str = \"top-right\",\n        collapsed: bool = True,\n        layers: Optional[List[str]] = None,\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a collapsible layer control panel to the map.\n\n        The layer control is a collapsible panel that allows users to toggle\n        visibility and adjust opacity of map layers. It displays as an icon\n        similar to other controls, and expands when clicked.\n\n        Args:\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            collapsed: Whether the control starts collapsed\n            layers: List of layer IDs to include. If None, includes all layers\n            options: Additional options for the control\n        \"\"\"\n        control_options = options or {}\n        control_options.update(\n            {\n                \"position\": position,\n                \"collapsed\": collapsed,\n                \"layers\": layers,\n            }\n        )\n\n        # Get current layer states for initialization\n        layer_states = {}\n        target_layers = layers if layers is not None else list(self.layer_dict.keys())\n\n        # Always include Background layer for controlling map style layers\n        if layers is None or \"Background\" in layers:\n            layer_states[\"Background\"] = {\n                \"visible\": True,\n                \"opacity\": 1.0,\n                \"name\": \"Background\",\n            }\n\n        for layer_id in target_layers:\n            if layer_id in self.layer_dict and layer_id != \"Background\":\n                layer_info = self.layer_dict[layer_id]\n                layer_states[layer_id] = {\n                    \"visible\": layer_info.get(\"visible\", True),\n                    \"opacity\": layer_info.get(\"opacity\", 1.0),\n                    \"name\": layer_id,  # Use layer_id as display name by default\n                }\n\n        control_options[\"layerStates\"] = layer_states\n\n        # Store control in persistent state\n        control_key = f\"layer_control_{position}\"\n        current_controls = dict(self._controls)\n        current_controls[control_key] = {\n            \"type\": \"layer_control\",\n            \"position\": position,\n            \"options\": control_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addControl\", \"layer_control\", control_options)\n\n    def add_geocoder_control(\n        self,\n        position: str = \"top-left\",\n        api_config: Optional[Dict[str, Any]] = None,\n        options: Optional[Dict[str, Any]] = None,\n        collapsed: bool = True,\n    ) -&gt; None:\n        \"\"\"Add a geocoder control to the map for searching locations.\n\n        The geocoder control allows users to search for locations using a geocoding service.\n        By default, it uses the Nominatim (OpenStreetMap) geocoding API.\n\n        Args:\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            api_config: Configuration for the geocoding API. If None, uses default Nominatim config\n            options: Additional options for the geocoder control\n            collapsed: If True, shows only search icon initially. Click to expand input box.\n        \"\"\"\n        if api_config is None:\n            # Default configuration using Nominatim API\n            api_config = {\n                \"forwardGeocode\": True,\n                \"reverseGeocode\": False,\n                \"placeholder\": \"Search for places...\",\n                \"limit\": 5,\n                \"api_url\": \"https://nominatim.openstreetmap.org/search\",\n            }\n\n        control_options = options or {}\n        control_options.update(\n            {\n                \"position\": position,\n                \"api_config\": api_config,\n                \"collapsed\": collapsed,\n            }\n        )\n\n        # Store control in persistent state\n        control_key = f\"geocoder_{position}\"\n        current_controls = dict(self._controls)\n        current_controls[control_key] = {\n            \"type\": \"geocoder\",\n            \"position\": position,\n            \"options\": control_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addControl\", \"geocoder\", control_options)\n\n    def add_google_streetview(\n        self,\n        position: str = \"top-left\",\n        api_key: Optional[str] = None,\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a Google Street View control to the map.\n\n        This method adds a Google Street View control that allows users to view\n        street-level imagery at clicked locations on the map.\n\n        Args:\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            api_key: Google Maps API key. If None, retrieves from GOOGLE_MAPS_API_KEY environment variable\n            options: Additional options for the Street View control\n\n        Raises:\n            ValueError: If no API key is provided and none can be found in environment variables\n        \"\"\"\n        if api_key is None:\n            api_key = get_env_var(\"GOOGLE_MAPS_API_KEY\")\n            if api_key is None:\n                raise ValueError(\n                    \"Google Maps API key is required. Please provide it as a parameter \"\n                    \"or set the GOOGLE_MAPS_API_KEY environment variable.\"\n                )\n\n        control_options = options or {}\n        control_options.update(\n            {\n                \"position\": position,\n                \"api_key\": api_key,\n            }\n        )\n\n        # Store control in persistent state\n        control_key = f\"google_streetview_{position}\"\n        current_controls = dict(self._controls)\n        current_controls[control_key] = {\n            \"type\": \"google_streetview\",\n            \"position\": position,\n            \"options\": control_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addControl\", \"google_streetview\", control_options)\n\n    def _update_layer_controls(self) -&gt; None:\n        \"\"\"Update all existing layer controls with the current layer state.\"\"\"\n        # Find all layer controls in the _controls dictionary\n        for control_key, control_config in self._controls.items():\n            if control_config.get(\"type\") == \"layer_control\":\n                # Update the layerStates in the control options\n                control_options = control_config.get(\"options\", {})\n                layers_filter = control_options.get(\"layers\")\n\n                # Get current layer states for this control\n                layer_states = {}\n                target_layers = (\n                    layers_filter\n                    if layers_filter is not None\n                    else list(self.layer_dict.keys())\n                )\n\n                # Always include Background layer for controlling map style layers\n                if layers_filter is None or \"Background\" in layers_filter:\n                    layer_states[\"Background\"] = {\n                        \"visible\": True,\n                        \"opacity\": 1.0,\n                        \"name\": \"Background\",\n                    }\n\n                for layer_id in target_layers:\n                    if layer_id in self.layer_dict and layer_id != \"Background\":\n                        layer_info = self.layer_dict[layer_id]\n                        layer_states[layer_id] = {\n                            \"visible\": layer_info.get(\"visible\", True),\n                            \"opacity\": layer_info.get(\"opacity\", 1.0),\n                            \"name\": layer_id,\n                        }\n\n                # Update the control options with new layer states\n                control_options[\"layerStates\"] = layer_states\n\n                # Update the control configuration\n                control_config[\"options\"] = control_options\n\n        # Trigger the JavaScript layer control to check for new layers\n        # by updating the _layer_dict trait that the JS listens to\n        self._layer_dict = dict(self.layer_dict)\n\n    def remove_layer(self, layer_id: str) -&gt; None:\n        \"\"\"Remove a layer from the map.\n\n        Args:\n            layer_id: Unique identifier for the layer to remove.\n        \"\"\"\n        # Remove from JavaScript map\n        self.call_js_method(\"removeLayer\", layer_id)\n\n        # Remove from local state\n        if layer_id in self._layers:\n            current_layers = dict(self._layers)\n            del current_layers[layer_id]\n            self._layers = current_layers\n\n        # Remove from layer_dict\n        if layer_id in self.layer_dict:\n            del self.layer_dict[layer_id]\n\n        # Update layer controls if they exist\n        self._update_layer_controls()\n\n    def add_cog_layer(\n        self,\n        layer_id: str,\n        cog_url: str,\n        opacity: Optional[float] = 1.0,\n        visible: Optional[bool] = True,\n        paint: Optional[Dict[str, Any]] = None,\n        before_id: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Add a Cloud Optimized GeoTIFF (COG) layer to the map.\n\n        Args:\n            layer_id: Unique identifier for the COG layer.\n            cog_url: URL to the COG file.\n            opacity: Layer opacity between 0.0 and 1.0.\n            visible: Whether the layer should be visible initially.\n            paint: Optional paint properties for the layer.\n            before_id: Optional layer ID to insert this layer before.\n        \"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add COG source using cog:// protocol\n        cog_source_url = f\"cog://{cog_url}\"\n\n        self.add_source(\n            source_id,\n            {\n                \"type\": \"raster\",\n                \"url\": cog_source_url,\n                \"tileSize\": 256,\n            },\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(\n            layer_id, layer_config, before_id, opacity=opacity, visible=visible\n        )\n\n    def add_pmtiles(\n        self,\n        pmtiles_url: str,\n        layer_id: Optional[str] = None,\n        layers: Optional[List[Dict[str, Any]]] = None,\n        opacity: Optional[float] = 1.0,\n        visible: Optional[bool] = True,\n        before_id: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Add PMTiles vector tiles to the map.\n\n        Args:\n            pmtiles_url: URL to the PMTiles file.\n            layer_id: Optional unique identifier for the layer. If None, uses filename.\n            layers: Optional list of layer configurations for rendering. If None, creates default layers.\n            opacity: Layer opacity between 0.0 and 1.0.\n            visible: Whether the layer should be visible initially.\n            before_id: Optional layer ID to insert this layer before.\n        \"\"\"\n        if layer_id is None:\n            layer_id = pmtiles_url.split(\"/\")[-1].replace(\".pmtiles\", \"\")\n\n        source_id = f\"{layer_id}_source\"\n\n        # Add PMTiles source using pmtiles:// protocol\n        pmtiles_source_url = f\"pmtiles://{pmtiles_url}\"\n\n        self.add_source(\n            source_id,\n            {\n                \"type\": \"vector\",\n                \"url\": pmtiles_source_url,\n                \"attribution\": \"PMTiles\",\n            },\n        )\n\n        # Add default layers if none provided\n        if layers is None:\n            layers = [\n                {\n                    \"id\": f\"{layer_id}_landuse\",\n                    \"source\": source_id,\n                    \"source-layer\": \"landuse\",\n                    \"type\": \"fill\",\n                    \"paint\": {\"fill-color\": \"steelblue\", \"fill-opacity\": 0.5},\n                },\n                {\n                    \"id\": f\"{layer_id}_roads\",\n                    \"source\": source_id,\n                    \"source-layer\": \"roads\",\n                    \"type\": \"line\",\n                    \"paint\": {\"line-color\": \"black\", \"line-width\": 1},\n                },\n                {\n                    \"id\": f\"{layer_id}_buildings\",\n                    \"source\": source_id,\n                    \"source-layer\": \"buildings\",\n                    \"type\": \"fill\",\n                    \"paint\": {\"fill-color\": \"gray\", \"fill-opacity\": 0.7},\n                },\n                {\n                    \"id\": f\"{layer_id}_water\",\n                    \"source\": source_id,\n                    \"source-layer\": \"water\",\n                    \"type\": \"fill\",\n                    \"paint\": {\"fill-color\": \"lightblue\", \"fill-opacity\": 0.8},\n                },\n            ]\n\n        # Add all layers\n        for layer_config in layers:\n            self.add_layer(\n                layer_config[\"id\"],\n                layer_config,\n                before_id,\n                opacity=opacity,\n                visible=visible,\n            )\n\n    def add_basemap(\n        self,\n        basemap: str,\n        layer_id: Optional[str] = None,\n        before_id: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Add a basemap to the map using xyzservices providers.\n\n        Args:\n            basemap: Name of the basemap from xyzservices (e.g., \"Esri.WorldImagery\").\n                    Use available_basemaps to see all available options.\n            layer_id: Optional ID for the basemap layer. If None, uses basemap name.\n            before_id: Optional layer ID to insert this layer before.\n                      If None, layer is added on top.\n\n        Raises:\n            ValueError: If the specified basemap is not available.\n        \"\"\"\n        from .basemaps import available_basemaps\n\n        if basemap not in available_basemaps:\n            available_names = list(available_basemaps.keys())\n            raise ValueError(\n                f\"Basemap '{basemap}' not found. Available basemaps: {available_names}\"\n            )\n\n        basemap_config = available_basemaps[basemap]\n\n        # Convert xyzservices URL template to tile URL\n        tile_url = basemap_config.build_url()\n\n        # Get attribution if available\n        attribution = basemap_config.get(\"attribution\", \"\")\n        if layer_id is None:\n            layer_id = basemap\n\n        # Add as raster layer\n        self.add_tile_layer(\n            layer_id=layer_id,\n            source_url=tile_url,\n            paint={\"raster-opacity\": 1.0},\n            before_id=before_id,\n        )\n\n    def add_draw_control(\n        self,\n        position: str = \"top-left\",\n        controls: Optional[Dict[str, bool]] = None,\n        default_mode: str = \"simple_select\",\n        keybindings: bool = True,\n        touch_enabled: bool = True,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"Add a draw control to the map for drawing and editing geometries.\n\n        Args:\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            controls: Dictionary specifying which drawing tools to show.\n                     Defaults to {'point': True, 'line_string': True, 'polygon': True, 'trash': True}\n            default_mode: Initial interaction mode ('simple_select', 'direct_select', 'draw_point', etc.)\n            keybindings: Whether to enable keyboard shortcuts\n            touch_enabled: Whether to enable touch interactions\n            **kwargs: Additional options to pass to MapboxDraw constructor\n        \"\"\"\n        if controls is None:\n            controls = {\n                \"point\": True,\n                \"line_string\": True,\n                \"polygon\": True,\n                \"trash\": True,\n            }\n\n        draw_options = {\n            \"displayControlsDefault\": False,\n            \"controls\": controls,\n            \"defaultMode\": default_mode,\n            \"keybindings\": keybindings,\n            \"touchEnabled\": touch_enabled,\n            \"position\": position,\n            **kwargs,\n        }\n\n        # Store draw control configuration\n        current_controls = dict(self._controls)\n        draw_key = f\"draw_{position}\"\n        current_controls[draw_key] = {\n            \"type\": \"draw\",\n            \"position\": position,\n            \"options\": draw_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addDrawControl\", draw_options)\n\n    def load_draw_data(self, geojson_data: Union[Dict[str, Any], str]) -&gt; None:\n        \"\"\"Load GeoJSON data into the draw control.\n\n        Args:\n            geojson_data: GeoJSON data as dictionary or JSON string\n        \"\"\"\n        if isinstance(geojson_data, str):\n            geojson_data = json.loads(geojson_data)\n\n        # Update the trait immediately to ensure consistency\n        self._draw_data = geojson_data\n\n        # Send to JavaScript\n        self.call_js_method(\"loadDrawData\", geojson_data)\n\n    def get_draw_data(self) -&gt; Dict[str, Any]:\n        \"\"\"Get all drawn features as GeoJSON.\n\n        Returns:\n            Dict containing GeoJSON FeatureCollection with drawn features\n        \"\"\"\n        # Try to get current data first\n        if self._draw_data:\n            return self._draw_data\n\n        # If no data in trait, call JavaScript to get fresh data\n        self.call_js_method(\"getDrawData\")\n        # Give JavaScript time to execute and sync data\n        import time\n\n        time.sleep(0.2)\n\n        # Return the synced data or empty FeatureCollection if nothing\n        return (\n            self._draw_data\n            if self._draw_data\n            else {\"type\": \"FeatureCollection\", \"features\": []}\n        )\n\n    def clear_draw_data(self) -&gt; None:\n        \"\"\"Clear all drawn features from the draw control.\"\"\"\n        # Clear the trait data immediately\n        self._draw_data = {\"type\": \"FeatureCollection\", \"features\": []}\n\n        # Clear in JavaScript\n        self.call_js_method(\"clearDrawData\")\n\n    def delete_draw_features(self, feature_ids: List[str]) -&gt; None:\n        \"\"\"Delete specific features from the draw control.\n\n        Args:\n            feature_ids: List of feature IDs to delete\n        \"\"\"\n        self.call_js_method(\"deleteDrawFeatures\", feature_ids)\n\n    def set_draw_mode(self, mode: str) -&gt; None:\n        \"\"\"Set the draw control mode.\n\n        Args:\n            mode: Draw mode ('simple_select', 'direct_select', 'draw_point',\n                 'draw_line_string', 'draw_polygon', 'static')\n        \"\"\"\n        self.call_js_method(\"setDrawMode\", mode)\n\n    def add_terra_draw(\n        self,\n        position: str = \"top-left\",\n        modes: Optional[List[str]] = None,\n        open: bool = True,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"Add a Terra Draw control to the map for drawing and editing geometries.\n\n        Args:\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            modes: List of drawing modes to enable. Available modes:\n                  ['render', 'point', 'linestring', 'polygon', 'rectangle', 'circle',\n                   'freehand', 'angled-rectangle', 'sensor', 'sector', 'select',\n                   'delete-selection', 'delete', 'download']\n                  Defaults to all modes except 'render'\n            open: Whether the draw control panel should be open by default\n            **kwargs: Additional options to pass to Terra Draw constructor\n        \"\"\"\n        if modes is None:\n            modes = [\n                # 'render',  # Commented out to always show drawing tool\n                \"point\",\n                \"linestring\",\n                \"polygon\",\n                \"rectangle\",\n                \"circle\",\n                \"freehand\",\n                \"angled-rectangle\",\n                \"sensor\",\n                \"sector\",\n                \"select\",\n                \"delete-selection\",\n                \"delete\",\n                \"download\",\n            ]\n\n        terra_draw_options = {\n            \"modes\": modes,\n            \"open\": open,\n            \"position\": position,\n            **kwargs,\n        }\n\n        # Mark that Terra Draw is enabled\n        self._terra_draw_enabled = True\n\n        # Store Terra Draw control configuration\n        current_controls = dict(self._controls)\n        terra_draw_key = f\"terra_draw_{position}\"\n        current_controls[terra_draw_key] = {\n            \"type\": \"terra_draw\",\n            \"position\": position,\n            \"options\": terra_draw_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addTerraDrawControl\", terra_draw_options)\n\n    def get_terra_draw_data(self) -&gt; Dict[str, Any]:\n        \"\"\"Get all Terra Draw features as GeoJSON.\n\n        Returns:\n            Dict containing GeoJSON FeatureCollection with drawn features\n        \"\"\"\n        # Try to get current data first\n        if self._terra_draw_data:\n            return self._terra_draw_data\n\n        # If no data in trait, call JavaScript to get fresh data\n        self.call_js_method(\"getTerraDrawData\")\n        # Give JavaScript time to execute and sync data\n        import time\n\n        time.sleep(0.2)\n\n        # Return the synced data or empty FeatureCollection if nothing\n        return (\n            self._terra_draw_data\n            if self._terra_draw_data\n            else {\"type\": \"FeatureCollection\", \"features\": []}\n        )\n\n    def clear_terra_draw_data(self) -&gt; None:\n        \"\"\"Clear all Terra Draw features from the draw control.\"\"\"\n        # Clear the trait data immediately\n        self._terra_draw_data = {\"type\": \"FeatureCollection\", \"features\": []}\n\n        # Clear in JavaScript\n        self.call_js_method(\"clearTerraDrawData\")\n\n    def load_terra_draw_data(self, geojson_data: Union[Dict[str, Any], str]) -&gt; None:\n        \"\"\"Load GeoJSON data into the Terra Draw control.\n\n        Args:\n            geojson_data: GeoJSON data as dictionary or JSON string\n        \"\"\"\n        if isinstance(geojson_data, str):\n            geojson_data = json.loads(geojson_data)\n\n        # Update the trait immediately to ensure consistency\n        self._terra_draw_data = geojson_data\n\n        # Send to JavaScript\n        self.call_js_method(\"loadTerraDrawData\", geojson_data)\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs: Any\n    ) -&gt; str:\n        \"\"\"Generate HTML template for MapLibre GL JS.\n\n        Args:\n            map_state: Dictionary containing the current map state including\n                      center, zoom, style, layers, and sources.\n            title: Title for the HTML page.\n            **kwargs: Additional arguments for template customization.\n\n        Returns:\n            Complete HTML string for a standalone MapLibre GL JS map.\n        \"\"\"\n        import os\n\n        # Get the directory of the current file\n        current_dir = os.path.dirname(os.path.abspath(__file__))\n        template_path = os.path.join(current_dir, \"templates\", \"maplibre_template.html\")\n\n        # Read the template file\n        with open(template_path, \"r\", encoding=\"utf-8\") as f:\n            template_content = f.read()\n\n        # Serialize map state for JavaScript\n        map_state_json = json.dumps(map_state, indent=2)\n\n        # Replace placeholders with actual values\n        html_template = template_content.format(\n            title=title,\n            width=map_state[\"width\"],\n            height=map_state[\"height\"],\n            map_state_json=map_state_json,\n        )\n\n        return html_template\n\n    def _update_current_state(self, event: Dict[str, Any]) -&gt; None:\n        \"\"\"Update current state attributes from moveend event.\"\"\"\n        if \"center\" in event:\n            self._current_center = event[\"center\"]\n        if \"zoom\" in event:\n            self._current_zoom = event[\"zoom\"]\n        if \"bearing\" in event:\n            self._current_bearing = event[\"bearing\"]\n        if \"pitch\" in event:\n            self._current_pitch = event[\"pitch\"]\n        if \"bounds\" in event:\n            self._current_bounds = event[\"bounds\"]\n\n    def set_center(self, lng: float, lat: float) -&gt; None:\n        \"\"\"Set the map center coordinates.\n\n        Args:\n            lng: Longitude coordinate.\n            lat: Latitude coordinate.\n        \"\"\"\n        self.center = [lng, lat]\n        self._current_center = [lng, lat]\n\n    def set_zoom(self, zoom: float) -&gt; None:\n        \"\"\"Set the map zoom level.\n\n        Args:\n            zoom: Zoom level (typically 0-20).\n        \"\"\"\n        self.zoom = zoom\n        self._current_zoom = zoom\n\n    @property\n    def current_center(self) -&gt; List[float]:\n        \"\"\"Get the current map center coordinates as [longitude, latitude].\"\"\"\n        return self._current_center\n\n    @property\n    def current_zoom(self) -&gt; float:\n        \"\"\"Get the current map zoom level.\"\"\"\n        return self._current_zoom\n\n    @property\n    def current_bounds(self) -&gt; Optional[List[List[float]]]:\n        \"\"\"Get the current map bounds as [[lng, lat], [lng, lat]] (southwest, northeast).\"\"\"\n        return self._current_bounds\n\n    @property\n    def viewstate(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the current map viewstate including center, zoom, bearing, pitch, and bounds.\"\"\"\n        return {\n            \"center\": self._current_center,\n            \"zoom\": self._current_zoom,\n            \"bearing\": self._current_bearing,\n            \"pitch\": self._current_pitch,\n            \"bounds\": self._current_bounds,\n        }\n\n    def add_basemap_control(\n        self,\n        position: str = \"top-right\",\n        basemaps: Optional[List[str]] = None,\n        labels: Optional[Dict[str, str]] = None,\n        initial_basemap: Optional[str] = None,\n        expand_direction: str = \"down\",\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a basemap control to the map for switching between different basemaps.\n\n        The basemap control allows users to switch between different basemap providers\n        using a dropdown or expandable control. It uses the maplibre-gl-basemaps library.\n\n        Args:\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            basemaps: List of basemap names to include. If None, uses a default set.\n                     Available basemaps can be found in anymap.basemaps.available_basemaps\n            labels: Dictionary mapping basemap names to display labels. If None, uses basemap names.\n            initial_basemap: Name of the initial basemap to show. If None, uses the first basemap.\n            expand_direction: Direction to expand the control ('up', 'down', 'left', 'right')\n            options: Additional options for the basemap control\n\n        Example:\n            &gt;&gt;&gt; m = MapLibreMap()\n            &gt;&gt;&gt; m.add_basemap_control(\n            ...     position=\"top-right\",\n            ...     basemaps=[\"OpenStreetMap.Mapnik\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"],\n            ...     labels={\"OpenStreetMap.Mapnik\": \"OpenStreetMap\", \"Esri.WorldImagery\": \"Satellite\"},\n            ...     initial_basemap=\"OpenStreetMap.Mapnik\"\n            ... )\n        \"\"\"\n        from .basemaps import available_basemaps\n\n        # Default basemaps if none provided\n        if basemaps is None:\n            basemaps = [\n                \"OpenStreetMap.Mapnik\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n                \"CartoDB.Positron\",\n            ]\n\n        # Filter available basemaps to only include those that exist\n        valid_basemaps = [name for name in basemaps if name in available_basemaps]\n        if not valid_basemaps:\n            raise ValueError(\n                f\"No valid basemaps found. Available basemaps: {list(available_basemaps.keys())}\"\n            )\n\n        # Set initial basemap if not provided\n        if initial_basemap is None:\n            initial_basemap = valid_basemaps[0]\n        elif initial_basemap not in valid_basemaps:\n            raise ValueError(\n                f\"Initial basemap '{initial_basemap}' not found in provided basemaps\"\n            )\n\n        # Create basemap configurations for the control\n        basemap_configs = []\n        for basemap_name in valid_basemaps:\n            basemap_provider = available_basemaps[basemap_name]\n            tile_url = basemap_provider.build_url()\n            attribution = basemap_provider.get(\"attribution\", \"\")\n\n            # Use custom label if provided, otherwise use basemap name\n            display_label = (\n                labels.get(basemap_name, basemap_name) if labels else basemap_name\n            )\n\n            basemap_config = {\n                \"id\": basemap_name,\n                \"tiles\": [tile_url],\n                \"sourceExtraParams\": {\n                    \"tileSize\": 256,\n                    \"attribution\": attribution,\n                    \"minzoom\": basemap_provider.get(\"min_zoom\", 0),\n                    \"maxzoom\": basemap_provider.get(\"max_zoom\", 22),\n                },\n                \"label\": display_label,\n            }\n            basemap_configs.append(basemap_config)\n\n        control_options = options or {}\n        control_options.update(\n            {\n                \"position\": position,\n                \"basemaps\": basemap_configs,\n                \"initialBasemap\": initial_basemap,\n                \"expandDirection\": expand_direction,\n            }\n        )\n\n        # Store control in persistent state\n        control_key = f\"basemap_control_{position}\"\n        current_controls = dict(self._controls)\n        current_controls[control_key] = {\n            \"type\": \"basemap_control\",\n            \"position\": position,\n            \"options\": control_options,\n        }\n        self._controls = current_controls\n\n        self.call_js_method(\"addControl\", \"basemap_control\", control_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.current_bounds","title":"<code>current_bounds: Optional[List[List[float]]]</code>  <code>property</code> <code>readonly</code>","text":"<p>Get the current map bounds as [[lng, lat], [lng, lat]] (southwest, northeast).</p>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.current_center","title":"<code>current_center: List[float]</code>  <code>property</code> <code>readonly</code>","text":"<p>Get the current map center coordinates as [longitude, latitude].</p>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.current_zoom","title":"<code>current_zoom: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Get the current map zoom level.</p>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.sidebar_widgets","title":"<code>sidebar_widgets: Dict[str, ipywidgets.widgets.widget.Widget]</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns a dictionary of widgets currently in the sidebar.</p> <p>Returns:</p> Type Description <code>Dict[str, widgets.Widget]</code> <p>A dictionary where keys are the labels of the widgets and values are the widgets themselves.</p>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.viewstate","title":"<code>viewstate: Dict[str, Any]</code>  <code>property</code> <code>readonly</code>","text":"<p>Get the current map viewstate including center, zoom, bearing, pitch, and bounds.</p>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.__init__","title":"<code>__init__(self, center=[0, 20], zoom=1.0, style='dark-matter', width='100%', height='600px', bearing=0.0, pitch=0.0, controls={'navigation': 'top-right', 'fullscreen': 'top-right', 'scale': 'bottom-left', 'globe': 'top-right', 'layers': 'top-right'}, projection='mercator', add_sidebar=False, sidebar_visible=False, sidebar_width=360, sidebar_args=None, layer_manager_expanded=True, **kwargs)</code>  <code>special</code>","text":"<p>Initialize MapLibre map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center coordinates as [longitude, latitude]. Default is [0, 20].</p> <code>[0, 20]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level (typically 0-20). Default is 1.0.</p> <code>1.0</code> <code>style</code> <code>Union[str, Dict[str, Any]]</code> <p>MapLibre style URL string or style object dictionary.</p> <code>'dark-matter'</code> <code>width</code> <code>str</code> <p>Widget width as CSS string (e.g., \"100%\", \"800px\").</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height as CSS string (e.g., \"600px\", \"50vh\").</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees (0-360).</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees (0-60).</p> <code>0.0</code> <code>controls</code> <code>Dict[str, str]</code> <p>Dictionary of control names and their positions. Default is { \"navigation\": \"top-right\", \"fullscreen\": \"top-right\", \"scale\": \"bottom-left\", \"globe\": \"top-right\", \"layers\": \"top-right\",</p> <code>{'navigation': 'top-right', 'fullscreen': 'top-right', 'scale': 'bottom-left', 'globe': 'top-right', 'layers': 'top-right'}</code> <code>projection</code> <code>str</code> <p>Map projection type. Can be \"mercator\" or \"globe\". Default is \"mercator\".</p> <code>'mercator'</code> <code>add_sidebar</code> <code>bool</code> <p>Whether to add a sidebar to the map. Default is False.</p> <code>False</code> <code>sidebar_visible</code> <code>bool</code> <p>Whether the sidebar is visible. Default is False.</p> <code>False</code> <code>sidebar_width</code> <code>int</code> <p>Width of the sidebar in pixels. Default is 360.</p> <code>360</code> <code>sidebar_args</code> <code>Optional[Dict]</code> <p>Additional keyword arguments for the sidebar. Default is None.</p> <code>None</code> <code>layer_manager_expanded</code> <code>bool</code> <p>Whether the layer manager is expanded. Default is True.</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments passed to parent class.</p> <code>{}</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0, 20],\n    zoom: float = 1.0,\n    style: Union[str, Dict[str, Any]] = \"dark-matter\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    controls: Dict[str, str] = {\n        \"navigation\": \"top-right\",\n        \"fullscreen\": \"top-right\",\n        \"scale\": \"bottom-left\",\n        \"globe\": \"top-right\",\n        \"layers\": \"top-right\",\n    },\n    projection: str = \"mercator\",\n    add_sidebar: bool = False,\n    sidebar_visible: bool = False,\n    sidebar_width: int = 360,\n    sidebar_args: Optional[Dict] = None,\n    layer_manager_expanded: bool = True,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Initialize MapLibre map widget.\n\n    Args:\n        center: Map center coordinates as [longitude, latitude]. Default is [0, 20].\n        zoom: Initial zoom level (typically 0-20). Default is 1.0.\n        style: MapLibre style URL string or style object dictionary.\n        width: Widget width as CSS string (e.g., \"100%\", \"800px\").\n        height: Widget height as CSS string (e.g., \"600px\", \"50vh\").\n        bearing: Map bearing (rotation) in degrees (0-360).\n        pitch: Map pitch (tilt) in degrees (0-60).\n        controls: Dictionary of control names and their positions. Default is {\n            \"navigation\": \"top-right\",\n            \"fullscreen\": \"top-right\",\n            \"scale\": \"bottom-left\",\n            \"globe\": \"top-right\",\n            \"layers\": \"top-right\",\n        }.\n        projection: Map projection type. Can be \"mercator\" or \"globe\". Default is \"mercator\".\n        add_sidebar: Whether to add a sidebar to the map. Default is False.\n        sidebar_visible: Whether the sidebar is visible. Default is False.\n        sidebar_width: Width of the sidebar in pixels. Default is 360.\n        sidebar_args: Additional keyword arguments for the sidebar. Default is None.\n        layer_manager_expanded: Whether the layer manager is expanded. Default is True.\n        **kwargs: Additional keyword arguments passed to parent class.\n    \"\"\"\n\n    if isinstance(style, str):\n        style = construct_maplibre_style(style)\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        style=style,\n        bearing=bearing,\n        pitch=pitch,\n        **kwargs,\n    )\n\n    self.layer_dict = {}\n    self.layer_dict[\"Background\"] = {\n        \"layer\": {\n            \"id\": \"Background\",\n            \"type\": \"background\",\n        },\n        \"opacity\": 1.0,\n        \"visible\": True,\n        \"type\": \"background\",\n        \"color\": None,\n    }\n\n    # Initialize the _layer_dict trait with the layer_dict content\n    self._layer_dict = dict(self.layer_dict)\n\n    # Initialize current state attributes\n    self._current_center = center\n    self._current_zoom = zoom\n    self._current_bearing = bearing\n    self._current_pitch = pitch\n    self._current_bounds = None  # Will be set after map loads\n\n    # Register event handler to update current state\n    self.on_map_event(\"moveend\", self._update_current_state)\n\n    self._style = style\n    self.style_dict = {}\n    for layer in self.get_style_layers():\n        self.style_dict[layer[\"id\"]] = layer\n    self.source_dict = {}\n\n    if projection.lower() == \"globe\":\n        self.set_projection(\n            {\n                \"type\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    10,\n                    \"vertical-perspective\",\n                    12,\n                    \"mercator\",\n                ]\n            }\n        )\n\n    self.controls = {}\n    for control, position in controls.items():\n        if control == \"layers\":\n            self.add_layer_control(position)\n        else:\n            self.add_control(control, position)\n            self.controls[control] = position\n\n    if sidebar_args is None:\n        sidebar_args = {}\n    if \"sidebar_visible\" not in sidebar_args:\n        sidebar_args[\"sidebar_visible\"] = sidebar_visible\n    if \"sidebar_width\" not in sidebar_args:\n        if isinstance(sidebar_width, str):\n            sidebar_width = int(sidebar_width.replace(\"px\", \"\"))\n        sidebar_args[\"min_width\"] = sidebar_width\n        sidebar_args[\"max_width\"] = sidebar_width\n    if \"expanded\" not in sidebar_args:\n        sidebar_args[\"expanded\"] = layer_manager_expanded\n    self.sidebar_args = sidebar_args\n    self.layer_manager = None\n    self.container = None\n    if add_sidebar:\n        self._ipython_display_ = self._patched_display\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_basemap","title":"<code>add_basemap(self, basemap, layer_id=None, before_id=None)</code>","text":"<p>Add a basemap to the map using xyzservices providers.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Name of the basemap from xyzservices (e.g., \"Esri.WorldImagery\").     Use available_basemaps to see all available options.</p> required <code>layer_id</code> <code>Optional[str]</code> <p>Optional ID for the basemap layer. If None, uses basemap name.</p> <code>None</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.       If None, layer is added on top.</p> <code>None</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the specified basemap is not available.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_basemap(\n    self,\n    basemap: str,\n    layer_id: Optional[str] = None,\n    before_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Add a basemap to the map using xyzservices providers.\n\n    Args:\n        basemap: Name of the basemap from xyzservices (e.g., \"Esri.WorldImagery\").\n                Use available_basemaps to see all available options.\n        layer_id: Optional ID for the basemap layer. If None, uses basemap name.\n        before_id: Optional layer ID to insert this layer before.\n                  If None, layer is added on top.\n\n    Raises:\n        ValueError: If the specified basemap is not available.\n    \"\"\"\n    from .basemaps import available_basemaps\n\n    if basemap not in available_basemaps:\n        available_names = list(available_basemaps.keys())\n        raise ValueError(\n            f\"Basemap '{basemap}' not found. Available basemaps: {available_names}\"\n        )\n\n    basemap_config = available_basemaps[basemap]\n\n    # Convert xyzservices URL template to tile URL\n    tile_url = basemap_config.build_url()\n\n    # Get attribution if available\n    attribution = basemap_config.get(\"attribution\", \"\")\n    if layer_id is None:\n        layer_id = basemap\n\n    # Add as raster layer\n    self.add_tile_layer(\n        layer_id=layer_id,\n        source_url=tile_url,\n        paint={\"raster-opacity\": 1.0},\n        before_id=before_id,\n    )\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_basemap_control","title":"<code>add_basemap_control(self, position='top-right', basemaps=None, labels=None, initial_basemap=None, expand_direction='down', options=None)</code>","text":"<p>Add a basemap control to the map for switching between different basemaps.</p> <p>The basemap control allows users to switch between different basemap providers using a dropdown or expandable control. It uses the maplibre-gl-basemaps library.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>basemaps</code> <code>Optional[List[str]]</code> <p>List of basemap names to include. If None, uses a default set.      Available basemaps can be found in anymap.basemaps.available_basemaps</p> <code>None</code> <code>labels</code> <code>Optional[Dict[str, str]]</code> <p>Dictionary mapping basemap names to display labels. If None, uses basemap names.</p> <code>None</code> <code>initial_basemap</code> <code>Optional[str]</code> <p>Name of the initial basemap to show. If None, uses the first basemap.</p> <code>None</code> <code>expand_direction</code> <code>str</code> <p>Direction to expand the control ('up', 'down', 'left', 'right')</p> <code>'down'</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the basemap control</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; m = MapLibreMap()\n&gt;&gt;&gt; m.add_basemap_control(\n...     position=\"top-right\",\n...     basemaps=[\"OpenStreetMap.Mapnik\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"],\n...     labels={\"OpenStreetMap.Mapnik\": \"OpenStreetMap\", \"Esri.WorldImagery\": \"Satellite\"},\n...     initial_basemap=\"OpenStreetMap.Mapnik\"\n... )\n</code></pre> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_basemap_control(\n    self,\n    position: str = \"top-right\",\n    basemaps: Optional[List[str]] = None,\n    labels: Optional[Dict[str, str]] = None,\n    initial_basemap: Optional[str] = None,\n    expand_direction: str = \"down\",\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a basemap control to the map for switching between different basemaps.\n\n    The basemap control allows users to switch between different basemap providers\n    using a dropdown or expandable control. It uses the maplibre-gl-basemaps library.\n\n    Args:\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        basemaps: List of basemap names to include. If None, uses a default set.\n                 Available basemaps can be found in anymap.basemaps.available_basemaps\n        labels: Dictionary mapping basemap names to display labels. If None, uses basemap names.\n        initial_basemap: Name of the initial basemap to show. If None, uses the first basemap.\n        expand_direction: Direction to expand the control ('up', 'down', 'left', 'right')\n        options: Additional options for the basemap control\n\n    Example:\n        &gt;&gt;&gt; m = MapLibreMap()\n        &gt;&gt;&gt; m.add_basemap_control(\n        ...     position=\"top-right\",\n        ...     basemaps=[\"OpenStreetMap.Mapnik\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"],\n        ...     labels={\"OpenStreetMap.Mapnik\": \"OpenStreetMap\", \"Esri.WorldImagery\": \"Satellite\"},\n        ...     initial_basemap=\"OpenStreetMap.Mapnik\"\n        ... )\n    \"\"\"\n    from .basemaps import available_basemaps\n\n    # Default basemaps if none provided\n    if basemaps is None:\n        basemaps = [\n            \"OpenStreetMap.Mapnik\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n            \"CartoDB.Positron\",\n        ]\n\n    # Filter available basemaps to only include those that exist\n    valid_basemaps = [name for name in basemaps if name in available_basemaps]\n    if not valid_basemaps:\n        raise ValueError(\n            f\"No valid basemaps found. Available basemaps: {list(available_basemaps.keys())}\"\n        )\n\n    # Set initial basemap if not provided\n    if initial_basemap is None:\n        initial_basemap = valid_basemaps[0]\n    elif initial_basemap not in valid_basemaps:\n        raise ValueError(\n            f\"Initial basemap '{initial_basemap}' not found in provided basemaps\"\n        )\n\n    # Create basemap configurations for the control\n    basemap_configs = []\n    for basemap_name in valid_basemaps:\n        basemap_provider = available_basemaps[basemap_name]\n        tile_url = basemap_provider.build_url()\n        attribution = basemap_provider.get(\"attribution\", \"\")\n\n        # Use custom label if provided, otherwise use basemap name\n        display_label = (\n            labels.get(basemap_name, basemap_name) if labels else basemap_name\n        )\n\n        basemap_config = {\n            \"id\": basemap_name,\n            \"tiles\": [tile_url],\n            \"sourceExtraParams\": {\n                \"tileSize\": 256,\n                \"attribution\": attribution,\n                \"minzoom\": basemap_provider.get(\"min_zoom\", 0),\n                \"maxzoom\": basemap_provider.get(\"max_zoom\", 22),\n            },\n            \"label\": display_label,\n        }\n        basemap_configs.append(basemap_config)\n\n    control_options = options or {}\n    control_options.update(\n        {\n            \"position\": position,\n            \"basemaps\": basemap_configs,\n            \"initialBasemap\": initial_basemap,\n            \"expandDirection\": expand_direction,\n        }\n    )\n\n    # Store control in persistent state\n    control_key = f\"basemap_control_{position}\"\n    current_controls = dict(self._controls)\n    current_controls[control_key] = {\n        \"type\": \"basemap_control\",\n        \"position\": position,\n        \"options\": control_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addControl\", \"basemap_control\", control_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_cog_layer","title":"<code>add_cog_layer(self, layer_id, cog_url, opacity=1.0, visible=True, paint=None, before_id=None)</code>","text":"<p>Add a Cloud Optimized GeoTIFF (COG) layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the COG layer.</p> required <code>cog_url</code> <code>str</code> <p>URL to the COG file.</p> required <code>opacity</code> <code>Optional[float]</code> <p>Layer opacity between 0.0 and 1.0.</p> <code>1.0</code> <code>visible</code> <code>Optional[bool]</code> <p>Whether the layer should be visible initially.</p> <code>True</code> <code>paint</code> <code>Optional[Dict[str, Any]]</code> <p>Optional paint properties for the layer.</p> <code>None</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_cog_layer(\n    self,\n    layer_id: str,\n    cog_url: str,\n    opacity: Optional[float] = 1.0,\n    visible: Optional[bool] = True,\n    paint: Optional[Dict[str, Any]] = None,\n    before_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Add a Cloud Optimized GeoTIFF (COG) layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the COG layer.\n        cog_url: URL to the COG file.\n        opacity: Layer opacity between 0.0 and 1.0.\n        visible: Whether the layer should be visible initially.\n        paint: Optional paint properties for the layer.\n        before_id: Optional layer ID to insert this layer before.\n    \"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add COG source using cog:// protocol\n    cog_source_url = f\"cog://{cog_url}\"\n\n    self.add_source(\n        source_id,\n        {\n            \"type\": \"raster\",\n            \"url\": cog_source_url,\n            \"tileSize\": 256,\n        },\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(\n        layer_id, layer_config, before_id, opacity=opacity, visible=visible\n    )\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_control","title":"<code>add_control(self, control_type, position='top-right', options=None)</code>","text":"<p>Add a control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control ('navigation', 'scale', 'fullscreen', 'geolocate', 'attribution', 'globe')</p> required <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the control</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_control(\n    self,\n    control_type: str,\n    position: str = \"top-right\",\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a control to the map.\n\n    Args:\n        control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate', 'attribution', 'globe')\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        options: Additional options for the control\n    \"\"\"\n    control_options = options or {}\n    control_options[\"position\"] = position\n\n    # Store control in persistent state\n    control_key = f\"{control_type}_{position}\"\n    current_controls = dict(self._controls)\n    current_controls[control_key] = {\n        \"type\": control_type,\n        \"position\": position,\n        \"options\": control_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addControl\", control_type, control_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_draw_control","title":"<code>add_draw_control(self, position='top-left', controls=None, default_mode='simple_select', keybindings=True, touch_enabled=True, **kwargs)</code>","text":"<p>Add a draw control to the map for drawing and editing geometries.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-left'</code> <code>controls</code> <code>Optional[Dict[str, bool]]</code> <p>Dictionary specifying which drawing tools to show.      Defaults to {'point': True, 'line_string': True, 'polygon': True, 'trash': True}</p> <code>None</code> <code>default_mode</code> <code>str</code> <p>Initial interaction mode ('simple_select', 'direct_select', 'draw_point', etc.)</p> <code>'simple_select'</code> <code>keybindings</code> <code>bool</code> <p>Whether to enable keyboard shortcuts</p> <code>True</code> <code>touch_enabled</code> <code>bool</code> <p>Whether to enable touch interactions</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional options to pass to MapboxDraw constructor</p> <code>{}</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_draw_control(\n    self,\n    position: str = \"top-left\",\n    controls: Optional[Dict[str, bool]] = None,\n    default_mode: str = \"simple_select\",\n    keybindings: bool = True,\n    touch_enabled: bool = True,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Add a draw control to the map for drawing and editing geometries.\n\n    Args:\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        controls: Dictionary specifying which drawing tools to show.\n                 Defaults to {'point': True, 'line_string': True, 'polygon': True, 'trash': True}\n        default_mode: Initial interaction mode ('simple_select', 'direct_select', 'draw_point', etc.)\n        keybindings: Whether to enable keyboard shortcuts\n        touch_enabled: Whether to enable touch interactions\n        **kwargs: Additional options to pass to MapboxDraw constructor\n    \"\"\"\n    if controls is None:\n        controls = {\n            \"point\": True,\n            \"line_string\": True,\n            \"polygon\": True,\n            \"trash\": True,\n        }\n\n    draw_options = {\n        \"displayControlsDefault\": False,\n        \"controls\": controls,\n        \"defaultMode\": default_mode,\n        \"keybindings\": keybindings,\n        \"touchEnabled\": touch_enabled,\n        \"position\": position,\n        **kwargs,\n    }\n\n    # Store draw control configuration\n    current_controls = dict(self._controls)\n    draw_key = f\"draw_{position}\"\n    current_controls[draw_key] = {\n        \"type\": \"draw\",\n        \"position\": position,\n        \"options\": draw_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addDrawControl\", draw_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_geocoder_control","title":"<code>add_geocoder_control(self, position='top-left', api_config=None, options=None, collapsed=True)</code>","text":"<p>Add a geocoder control to the map for searching locations.</p> <p>The geocoder control allows users to search for locations using a geocoding service. By default, it uses the Nominatim (OpenStreetMap) geocoding API.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-left'</code> <code>api_config</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration for the geocoding API. If None, uses default Nominatim config</p> <code>None</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the geocoder control</p> <code>None</code> <code>collapsed</code> <code>bool</code> <p>If True, shows only search icon initially. Click to expand input box.</p> <code>True</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_geocoder_control(\n    self,\n    position: str = \"top-left\",\n    api_config: Optional[Dict[str, Any]] = None,\n    options: Optional[Dict[str, Any]] = None,\n    collapsed: bool = True,\n) -&gt; None:\n    \"\"\"Add a geocoder control to the map for searching locations.\n\n    The geocoder control allows users to search for locations using a geocoding service.\n    By default, it uses the Nominatim (OpenStreetMap) geocoding API.\n\n    Args:\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        api_config: Configuration for the geocoding API. If None, uses default Nominatim config\n        options: Additional options for the geocoder control\n        collapsed: If True, shows only search icon initially. Click to expand input box.\n    \"\"\"\n    if api_config is None:\n        # Default configuration using Nominatim API\n        api_config = {\n            \"forwardGeocode\": True,\n            \"reverseGeocode\": False,\n            \"placeholder\": \"Search for places...\",\n            \"limit\": 5,\n            \"api_url\": \"https://nominatim.openstreetmap.org/search\",\n        }\n\n    control_options = options or {}\n    control_options.update(\n        {\n            \"position\": position,\n            \"api_config\": api_config,\n            \"collapsed\": collapsed,\n        }\n    )\n\n    # Store control in persistent state\n    control_key = f\"geocoder_{position}\"\n    current_controls = dict(self._controls)\n    current_controls[control_key] = {\n        \"type\": \"geocoder\",\n        \"position\": position,\n        \"options\": control_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addControl\", \"geocoder\", control_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None, before_id=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer.</p> required <code>geojson_data</code> <code>Dict[str, Any]</code> <p>GeoJSON data as a dictionary.</p> required <code>layer_type</code> <code>str</code> <p>Type of layer (e.g., 'fill', 'line', 'circle', 'symbol').</p> <code>'fill'</code> <code>paint</code> <code>Optional[Dict[str, Any]]</code> <p>Optional paint properties for styling the layer.</p> <code>None</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    before_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the layer.\n        geojson_data: GeoJSON data as a dictionary.\n        layer_type: Type of layer (e.g., 'fill', 'line', 'circle', 'symbol').\n        paint: Optional paint properties for styling the layer.\n        before_id: Optional layer ID to insert this layer before.\n    \"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config, before_id)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_google_streetview","title":"<code>add_google_streetview(self, position='top-left', api_key=None, options=None)</code>","text":"<p>Add a Google Street View control to the map.</p> <p>This method adds a Google Street View control that allows users to view street-level imagery at clicked locations on the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-left'</code> <code>api_key</code> <code>Optional[str]</code> <p>Google Maps API key. If None, retrieves from GOOGLE_MAPS_API_KEY environment variable</p> <code>None</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the Street View control</p> <code>None</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If no API key is provided and none can be found in environment variables</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_google_streetview(\n    self,\n    position: str = \"top-left\",\n    api_key: Optional[str] = None,\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a Google Street View control to the map.\n\n    This method adds a Google Street View control that allows users to view\n    street-level imagery at clicked locations on the map.\n\n    Args:\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        api_key: Google Maps API key. If None, retrieves from GOOGLE_MAPS_API_KEY environment variable\n        options: Additional options for the Street View control\n\n    Raises:\n        ValueError: If no API key is provided and none can be found in environment variables\n    \"\"\"\n    if api_key is None:\n        api_key = get_env_var(\"GOOGLE_MAPS_API_KEY\")\n        if api_key is None:\n            raise ValueError(\n                \"Google Maps API key is required. Please provide it as a parameter \"\n                \"or set the GOOGLE_MAPS_API_KEY environment variable.\"\n            )\n\n    control_options = options or {}\n    control_options.update(\n        {\n            \"position\": position,\n            \"api_key\": api_key,\n        }\n    )\n\n    # Store control in persistent state\n    control_key = f\"google_streetview_{position}\"\n    current_controls = dict(self._controls)\n    current_controls[control_key] = {\n        \"type\": \"google_streetview\",\n        \"position\": position,\n        \"options\": control_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addControl\", \"google_streetview\", control_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None, before_id=None)</code>","text":"<p>Add an image layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer.</p> required <code>image_url</code> <code>str</code> <p>URL of the image to display.</p> required <code>coordinates</code> <code>List[List[float]]</code> <p>Corner coordinates of the image as [[top-left], [top-right], [bottom-right], [bottom-left]].         Each coordinate should be [longitude, latitude].</p> required <code>paint</code> <code>Optional[Dict[str, Any]]</code> <p>Optional paint properties for the image layer.</p> <code>None</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n    before_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the layer.\n        image_url: URL of the image to display.\n        coordinates: Corner coordinates of the image as [[top-left], [top-right], [bottom-right], [bottom-left]].\n                    Each coordinate should be [longitude, latitude].\n        paint: Optional paint properties for the image layer.\n        before_id: Optional layer ID to insert this layer before.\n    \"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config, before_id)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_layer","title":"<code>add_layer(self, layer_id, layer, before_id=None, opacity=1.0, visible=True)</code>","text":"<p>Add a layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer.</p> required <code>layer_config</code> <p>Layer configuration dictionary containing          properties like type, source, paint, and layout.</p> required <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.       If None, layer is added on top.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_layer(\n    self,\n    layer_id: str,\n    layer: Dict[str, Any],\n    before_id: Optional[str] = None,\n    opacity: Optional[float] = 1.0,\n    visible: Optional[bool] = True,\n) -&gt; None:\n    \"\"\"Add a layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the layer.\n        layer_config: Layer configuration dictionary containing\n                     properties like type, source, paint, and layout.\n        before_id: Optional layer ID to insert this layer before.\n                  If None, layer is added on top.\n    \"\"\"\n    # Store layer in local state for persistence\n    current_layers = dict(self._layers)\n    current_layers[layer_id] = layer\n    self._layers = current_layers\n\n    # Call JavaScript method with before_id if provided\n    if before_id:\n        self.call_js_method(\"addLayer\", layer, before_id)\n    else:\n        self.call_js_method(\"addLayer\", layer, layer_id)\n\n    self.set_visibility(layer_id, visible)\n    self.set_opacity(layer_id, opacity)\n    self.layer_dict[layer_id] = {\n        \"layer\": layer,\n        \"opacity\": opacity,\n        \"visible\": visible,\n        \"type\": layer[\"type\"],\n        # \"color\": color,\n    }\n\n    # Update the _layer_dict trait to trigger JavaScript sync\n    self._layer_dict = dict(self.layer_dict)\n\n    if self.layer_manager is not None:\n        self.layer_manager.refresh()\n\n    # Update layer controls if they exist\n    self._update_layer_controls()\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_layer_control","title":"<code>add_layer_control(self, position='top-right', collapsed=True, layers=None, options=None)</code>","text":"<p>Add a collapsible layer control panel to the map.</p> <p>The layer control is a collapsible panel that allows users to toggle visibility and adjust opacity of map layers. It displays as an icon similar to other controls, and expands when clicked.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>collapsed</code> <code>bool</code> <p>Whether the control starts collapsed</p> <code>True</code> <code>layers</code> <code>Optional[List[str]]</code> <p>List of layer IDs to include. If None, includes all layers</p> <code>None</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the control</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_layer_control(\n    self,\n    position: str = \"top-right\",\n    collapsed: bool = True,\n    layers: Optional[List[str]] = None,\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a collapsible layer control panel to the map.\n\n    The layer control is a collapsible panel that allows users to toggle\n    visibility and adjust opacity of map layers. It displays as an icon\n    similar to other controls, and expands when clicked.\n\n    Args:\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        collapsed: Whether the control starts collapsed\n        layers: List of layer IDs to include. If None, includes all layers\n        options: Additional options for the control\n    \"\"\"\n    control_options = options or {}\n    control_options.update(\n        {\n            \"position\": position,\n            \"collapsed\": collapsed,\n            \"layers\": layers,\n        }\n    )\n\n    # Get current layer states for initialization\n    layer_states = {}\n    target_layers = layers if layers is not None else list(self.layer_dict.keys())\n\n    # Always include Background layer for controlling map style layers\n    if layers is None or \"Background\" in layers:\n        layer_states[\"Background\"] = {\n            \"visible\": True,\n            \"opacity\": 1.0,\n            \"name\": \"Background\",\n        }\n\n    for layer_id in target_layers:\n        if layer_id in self.layer_dict and layer_id != \"Background\":\n            layer_info = self.layer_dict[layer_id]\n            layer_states[layer_id] = {\n                \"visible\": layer_info.get(\"visible\", True),\n                \"opacity\": layer_info.get(\"opacity\", 1.0),\n                \"name\": layer_id,  # Use layer_id as display name by default\n            }\n\n    control_options[\"layerStates\"] = layer_states\n\n    # Store control in persistent state\n    control_key = f\"layer_control_{position}\"\n    current_controls = dict(self._controls)\n    current_controls[control_key] = {\n        \"type\": \"layer_control\",\n        \"position\": position,\n        \"options\": control_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addControl\", \"layer_control\", control_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_marker","title":"<code>add_marker(self, lng, lat, popup=None)</code>","text":"<p>Add a marker to the map.</p> <p>Parameters:</p> Name Type Description Default <code>lng</code> <code>float</code> <p>Longitude coordinate for the marker.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate for the marker.</p> required <code>popup</code> <code>Optional[str]</code> <p>Optional popup text to display when marker is clicked.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_marker(self, lng: float, lat: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\n\n    Args:\n        lng: Longitude coordinate for the marker.\n        lat: Latitude coordinate for the marker.\n        popup: Optional popup text to display when marker is clicked.\n    \"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_pmtiles","title":"<code>add_pmtiles(self, pmtiles_url, layer_id=None, layers=None, opacity=1.0, visible=True, before_id=None)</code>","text":"<p>Add PMTiles vector tiles to the map.</p> <p>Parameters:</p> Name Type Description Default <code>pmtiles_url</code> <code>str</code> <p>URL to the PMTiles file.</p> required <code>layer_id</code> <code>Optional[str]</code> <p>Optional unique identifier for the layer. If None, uses filename.</p> <code>None</code> <code>layers</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional list of layer configurations for rendering. If None, creates default layers.</p> <code>None</code> <code>opacity</code> <code>Optional[float]</code> <p>Layer opacity between 0.0 and 1.0.</p> <code>1.0</code> <code>visible</code> <code>Optional[bool]</code> <p>Whether the layer should be visible initially.</p> <code>True</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_pmtiles(\n    self,\n    pmtiles_url: str,\n    layer_id: Optional[str] = None,\n    layers: Optional[List[Dict[str, Any]]] = None,\n    opacity: Optional[float] = 1.0,\n    visible: Optional[bool] = True,\n    before_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Add PMTiles vector tiles to the map.\n\n    Args:\n        pmtiles_url: URL to the PMTiles file.\n        layer_id: Optional unique identifier for the layer. If None, uses filename.\n        layers: Optional list of layer configurations for rendering. If None, creates default layers.\n        opacity: Layer opacity between 0.0 and 1.0.\n        visible: Whether the layer should be visible initially.\n        before_id: Optional layer ID to insert this layer before.\n    \"\"\"\n    if layer_id is None:\n        layer_id = pmtiles_url.split(\"/\")[-1].replace(\".pmtiles\", \"\")\n\n    source_id = f\"{layer_id}_source\"\n\n    # Add PMTiles source using pmtiles:// protocol\n    pmtiles_source_url = f\"pmtiles://{pmtiles_url}\"\n\n    self.add_source(\n        source_id,\n        {\n            \"type\": \"vector\",\n            \"url\": pmtiles_source_url,\n            \"attribution\": \"PMTiles\",\n        },\n    )\n\n    # Add default layers if none provided\n    if layers is None:\n        layers = [\n            {\n                \"id\": f\"{layer_id}_landuse\",\n                \"source\": source_id,\n                \"source-layer\": \"landuse\",\n                \"type\": \"fill\",\n                \"paint\": {\"fill-color\": \"steelblue\", \"fill-opacity\": 0.5},\n            },\n            {\n                \"id\": f\"{layer_id}_roads\",\n                \"source\": source_id,\n                \"source-layer\": \"roads\",\n                \"type\": \"line\",\n                \"paint\": {\"line-color\": \"black\", \"line-width\": 1},\n            },\n            {\n                \"id\": f\"{layer_id}_buildings\",\n                \"source\": source_id,\n                \"source-layer\": \"buildings\",\n                \"type\": \"fill\",\n                \"paint\": {\"fill-color\": \"gray\", \"fill-opacity\": 0.7},\n            },\n            {\n                \"id\": f\"{layer_id}_water\",\n                \"source\": source_id,\n                \"source-layer\": \"water\",\n                \"type\": \"fill\",\n                \"paint\": {\"fill-color\": \"lightblue\", \"fill-opacity\": 0.8},\n            },\n        ]\n\n    # Add all layers\n    for layer_config in layers:\n        self.add_layer(\n            layer_config[\"id\"],\n            layer_config,\n            before_id,\n            opacity=opacity,\n            visible=visible,\n        )\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_terra_draw","title":"<code>add_terra_draw(self, position='top-left', modes=None, open=True, **kwargs)</code>","text":"<p>Add a Terra Draw control to the map for drawing and editing geometries.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-left'</code> <code>modes</code> <code>Optional[List[str]]</code> <p>List of drawing modes to enable. Available modes:   ['render', 'point', 'linestring', 'polygon', 'rectangle', 'circle',    'freehand', 'angled-rectangle', 'sensor', 'sector', 'select',    'delete-selection', 'delete', 'download']   Defaults to all modes except 'render'</p> <code>None</code> <code>open</code> <code>bool</code> <p>Whether the draw control panel should be open by default</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional options to pass to Terra Draw constructor</p> <code>{}</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_terra_draw(\n    self,\n    position: str = \"top-left\",\n    modes: Optional[List[str]] = None,\n    open: bool = True,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Add a Terra Draw control to the map for drawing and editing geometries.\n\n    Args:\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        modes: List of drawing modes to enable. Available modes:\n              ['render', 'point', 'linestring', 'polygon', 'rectangle', 'circle',\n               'freehand', 'angled-rectangle', 'sensor', 'sector', 'select',\n               'delete-selection', 'delete', 'download']\n              Defaults to all modes except 'render'\n        open: Whether the draw control panel should be open by default\n        **kwargs: Additional options to pass to Terra Draw constructor\n    \"\"\"\n    if modes is None:\n        modes = [\n            # 'render',  # Commented out to always show drawing tool\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"rectangle\",\n            \"circle\",\n            \"freehand\",\n            \"angled-rectangle\",\n            \"sensor\",\n            \"sector\",\n            \"select\",\n            \"delete-selection\",\n            \"delete\",\n            \"download\",\n        ]\n\n    terra_draw_options = {\n        \"modes\": modes,\n        \"open\": open,\n        \"position\": position,\n        **kwargs,\n    }\n\n    # Mark that Terra Draw is enabled\n    self._terra_draw_enabled = True\n\n    # Store Terra Draw control configuration\n    current_controls = dict(self._controls)\n    terra_draw_key = f\"terra_draw_{position}\"\n    current_controls[terra_draw_key] = {\n        \"type\": \"terra_draw\",\n        \"position\": position,\n        \"options\": terra_draw_options,\n    }\n    self._controls = current_controls\n\n    self.call_js_method(\"addTerraDrawControl\", terra_draw_options)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_tile_layer","title":"<code>add_tile_layer(self, layer_id, source_url, attribution=None, opacity=1.0, visible=True, minzoom=None, maxzoom=None, paint=None, layout=None, before_id=None, **kwargs)</code>","text":"<p>Add a raster tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer.</p> required <code>source_url</code> <code>str</code> <p>URL template for the tile source (e.g., 'https://example.com/{z}/{x}/{y}.png').</p> required <code>attribution</code> <code>Optional[str]</code> <p>Optional attribution text for the tile source.</p> <code>None</code> <code>opacity</code> <code>Optional[float]</code> <p>Layer opacity between 0.0 and 1.0.</p> <code>1.0</code> <code>visible</code> <code>Optional[bool]</code> <p>Whether the layer should be visible initially.</p> <code>True</code> <code>minzoom</code> <code>Optional[int]</code> <p>Minimum zoom level for the layer.</p> <code>None</code> <code>maxzoom</code> <code>Optional[int]</code> <p>Maximum zoom level for the layer.</p> <code>None</code> <code>paint</code> <code>Optional[Dict[str, Any]]</code> <p>Optional paint properties for the layer.</p> <code>None</code> <code>layout</code> <code>Optional[Dict[str, Any]]</code> <p>Optional layout properties for the layer.</p> <code>None</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional source configuration options.</p> <code>{}</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_tile_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    attribution: Optional[str] = None,\n    opacity: Optional[float] = 1.0,\n    visible: Optional[bool] = True,\n    minzoom: Optional[int] = None,\n    maxzoom: Optional[int] = None,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n    before_id: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Add a raster tile layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the layer.\n        source_url: URL template for the tile source (e.g., 'https://example.com/{z}/{x}/{y}.png').\n        attribution: Optional attribution text for the tile source.\n        opacity: Layer opacity between 0.0 and 1.0.\n        visible: Whether the layer should be visible initially.\n        minzoom: Minimum zoom level for the layer.\n        maxzoom: Maximum zoom level for the layer.\n        paint: Optional paint properties for the layer.\n        layout: Optional layout properties for the layer.\n        before_id: Optional layer ID to insert this layer before.\n        **kwargs: Additional source configuration options.\n    \"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id,\n        {\"type\": \"raster\", \"tiles\": [source_url], \"tileSize\": 256, **kwargs},\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config, before_id)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_to_sidebar","title":"<code>add_to_sidebar(self, widget, add_header=True, widget_icon='mdi-tools', close_icon='mdi-close', label='My Tools', background_color='#f5f5f5', height='40px', expanded=True, **kwargs)</code>","text":"<p>Appends a widget to the sidebar content.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Optional[Union[widgets.Widget, List[widgets.Widget]]]</code> <p>Initial widget(s) to display in the content box.</p> required <code>widget_icon</code> <code>str</code> <p>Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.</p> <code>'mdi-tools'</code> <code>close_icon</code> <code>str</code> <p>Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.</p> <code>'mdi-close'</code> <code>background_color</code> <code>str</code> <p>Background color of the header. Defaults to \"#f5f5f5\".</p> <code>'#f5f5f5'</code> <code>label</code> <code>str</code> <p>Text label for the header. Defaults to \"My Tools\".</p> <code>'My Tools'</code> <code>height</code> <code>str</code> <p>Height of the header. Defaults to \"40px\".</p> <code>'40px'</code> <code>expanded</code> <code>bool</code> <p>Whether the panel is expanded by default. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the parent class.</p> <code>{}</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_to_sidebar(\n    self,\n    widget: widgets.Widget,\n    add_header: bool = True,\n    widget_icon: str = \"mdi-tools\",\n    close_icon: str = \"mdi-close\",\n    label: str = \"My Tools\",\n    background_color: str = \"#f5f5f5\",\n    height: str = \"40px\",\n    expanded: bool = True,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Appends a widget to the sidebar content.\n\n    Args:\n        widget (Optional[Union[widgets.Widget, List[widgets.Widget]]]): Initial widget(s) to display in the content box.\n        widget_icon (str): Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n        close_icon (str): Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n        background_color (str): Background color of the header. Defaults to \"#f5f5f5\".\n        label (str): Text label for the header. Defaults to \"My Tools\".\n        height (str): Height of the header. Defaults to \"40px\".\n        expanded (bool): Whether the panel is expanded by default. Defaults to True.\n        **kwargs (Any): Additional keyword arguments for the parent class.\n    \"\"\"\n    if self.container is None:\n        self.create_container(**self.sidebar_args)\n    self.container.add_to_sidebar(\n        widget,\n        add_header=add_header,\n        widget_icon=widget_icon,\n        close_icon=close_icon,\n        label=label,\n        background_color=background_color,\n        height=height,\n        expanded=expanded,\n        host_map=self,\n        **kwargs,\n    )\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None, before_id=None)</code>","text":"<p>Add a vector tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer.</p> required <code>source_url</code> <code>str</code> <p>URL for the vector tile source.</p> required <code>source_layer</code> <code>str</code> <p>Name of the source layer within the vector tiles.</p> required <code>layer_type</code> <code>str</code> <p>Type of layer (e.g., 'fill', 'line', 'circle', 'symbol').</p> <code>'fill'</code> <code>paint</code> <code>Optional[Dict[str, Any]]</code> <p>Optional paint properties for styling the layer.</p> <code>None</code> <code>layout</code> <code>Optional[Dict[str, Any]]</code> <p>Optional layout properties for the layer.</p> <code>None</code> <code>before_id</code> <code>Optional[str]</code> <p>Optional layer ID to insert this layer before.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n    before_id: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\n\n    Args:\n        layer_id: Unique identifier for the layer.\n        source_url: URL for the vector tile source.\n        source_layer: Name of the source layer within the vector tiles.\n        layer_type: Type of layer (e.g., 'fill', 'line', 'circle', 'symbol').\n        paint: Optional paint properties for styling the layer.\n        layout: Optional layout properties for the layer.\n        before_id: Optional layer ID to insert this layer before.\n    \"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config, before_id)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.clear_draw_data","title":"<code>clear_draw_data(self)</code>","text":"<p>Clear all drawn features from the draw control.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def clear_draw_data(self) -&gt; None:\n    \"\"\"Clear all drawn features from the draw control.\"\"\"\n    # Clear the trait data immediately\n    self._draw_data = {\"type\": \"FeatureCollection\", \"features\": []}\n\n    # Clear in JavaScript\n    self.call_js_method(\"clearDrawData\")\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.clear_terra_draw_data","title":"<code>clear_terra_draw_data(self)</code>","text":"<p>Clear all Terra Draw features from the draw control.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def clear_terra_draw_data(self) -&gt; None:\n    \"\"\"Clear all Terra Draw features from the draw control.\"\"\"\n    # Clear the trait data immediately\n    self._terra_draw_data = {\"type\": \"FeatureCollection\", \"features\": []}\n\n    # Clear in JavaScript\n    self.call_js_method(\"clearTerraDrawData\")\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.create_container","title":"<code>create_container(self, sidebar_visible=None, min_width=None, max_width=None, expanded=None, **kwargs)</code>","text":"<p>Creates a container widget for the map with an optional sidebar.</p> <p>This method initializes a <code>LayerManagerWidget</code> and a <code>Container</code> widget to display the map alongside a sidebar. The sidebar can be customized with visibility, width, and additional content.</p> <p>Parameters:</p> Name Type Description Default <code>sidebar_visible</code> <code>bool</code> <p>Whether the sidebar is visible. Defaults to False.</p> <code>None</code> <code>min_width</code> <code>int</code> <p>Minimum width of the sidebar in pixels. Defaults to 360.</p> <code>None</code> <code>max_width</code> <code>int</code> <p>Maximum width of the sidebar in pixels. Defaults to 360.</p> <code>None</code> <code>expanded</code> <code>bool</code> <p>Whether the <code>LayerManagerWidget</code> is expanded by default. Defaults to True.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments passed to the <code>Container</code> widget.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Container</code> <p>The created container widget with the map and sidebar.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def create_container(\n    self,\n    sidebar_visible: bool = None,\n    min_width: int = None,\n    max_width: int = None,\n    expanded: bool = None,\n    **kwargs: Any,\n):\n    \"\"\"\n    Creates a container widget for the map with an optional sidebar.\n\n    This method initializes a `LayerManagerWidget` and a `Container` widget to display the map\n    alongside a sidebar. The sidebar can be customized with visibility, width, and additional content.\n\n    Args:\n        sidebar_visible (bool): Whether the sidebar is visible. Defaults to False.\n        min_width (int): Minimum width of the sidebar in pixels. Defaults to 360.\n        max_width (int): Maximum width of the sidebar in pixels. Defaults to 360.\n        expanded (bool): Whether the `LayerManagerWidget` is expanded by default. Defaults to True.\n        **kwargs (Any): Additional keyword arguments passed to the `Container` widget.\n\n    Returns:\n        Container: The created container widget with the map and sidebar.\n    \"\"\"\n\n    if sidebar_visible is None:\n        sidebar_visible = self.sidebar_args.get(\"sidebar_visible\", False)\n    if min_width is None:\n        min_width = self.sidebar_args.get(\"min_width\", 360)\n    if max_width is None:\n        max_width = self.sidebar_args.get(\"max_width\", 360)\n    if expanded is None:\n        expanded = self.sidebar_args.get(\"expanded\", True)\n    if self.layer_manager is None:\n        self.layer_manager = LayerManagerWidget(self, expanded=expanded)\n\n    container = Container(\n        host_map=self,\n        sidebar_visible=sidebar_visible,\n        min_width=min_width,\n        max_width=max_width,\n        sidebar_content=[self.layer_manager],\n        **kwargs,\n    )\n    self.container = container\n    self.container.sidebar_widgets[\"Layers\"] = self.layer_manager\n    return container\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.delete_draw_features","title":"<code>delete_draw_features(self, feature_ids)</code>","text":"<p>Delete specific features from the draw control.</p> <p>Parameters:</p> Name Type Description Default <code>feature_ids</code> <code>List[str]</code> <p>List of feature IDs to delete</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def delete_draw_features(self, feature_ids: List[str]) -&gt; None:\n    \"\"\"Delete specific features from the draw control.\n\n    Args:\n        feature_ids: List of feature IDs to delete\n    \"\"\"\n    self.call_js_method(\"deleteDrawFeatures\", feature_ids)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>List[List[float]]</code> <p>Bounding box as [[south, west], [north, east]].</p> required <code>padding</code> <code>int</code> <p>Padding around the bounds in pixels.</p> <code>50</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\n\n    Args:\n        bounds: Bounding box as [[south, west], [north, east]].\n        padding: Padding around the bounds in pixels.\n    \"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.get_draw_data","title":"<code>get_draw_data(self)</code>","text":"<p>Get all drawn features as GeoJSON.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing GeoJSON FeatureCollection with drawn features</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def get_draw_data(self) -&gt; Dict[str, Any]:\n    \"\"\"Get all drawn features as GeoJSON.\n\n    Returns:\n        Dict containing GeoJSON FeatureCollection with drawn features\n    \"\"\"\n    # Try to get current data first\n    if self._draw_data:\n        return self._draw_data\n\n    # If no data in trait, call JavaScript to get fresh data\n    self.call_js_method(\"getDrawData\")\n    # Give JavaScript time to execute and sync data\n    import time\n\n    time.sleep(0.2)\n\n    # Return the synced data or empty FeatureCollection if nothing\n    return (\n        self._draw_data\n        if self._draw_data\n        else {\"type\": \"FeatureCollection\", \"features\": []}\n    )\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.get_layer_type","title":"<code>get_layer_type(self, layer_id)</code>","text":"<p>Get the type of a layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier of the layer.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Layer type string, or None if layer doesn't exist.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def get_layer_type(self, layer_id: str) -&gt; Optional[str]:\n    \"\"\"Get the type of a layer.\n\n    Args:\n        layer_id: Unique identifier of the layer.\n\n    Returns:\n        Layer type string, or None if layer doesn't exist.\n    \"\"\"\n    if layer_id in self._layers:\n        return self._layers[layer_id][\"type\"]\n    else:\n        return None\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.get_style","title":"<code>get_style(self)</code>","text":"<p>Get the style of the map.</p> <p>Returns:</p> Type Description <code>Dict</code> <p>The style of the map.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def get_style(self):\n    \"\"\"\n    Get the style of the map.\n\n    Returns:\n        Dict: The style of the map.\n    \"\"\"\n    if self._style is not None:\n        if isinstance(self._style, str):\n            response = requests.get(self._style, timeout=10)\n            style = response.json()\n        elif isinstance(self._style, dict):\n            style = self._style\n        else:\n            style = {}\n        return style\n    else:\n        return {}\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.get_style_layers","title":"<code>get_style_layers(self, return_ids=False, sorted=True)</code>","text":"<p>Get the names of the basemap layers.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The names of the basemap layers.</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def get_style_layers(self, return_ids=False, sorted=True) -&gt; List[str]:\n    \"\"\"\n    Get the names of the basemap layers.\n\n    Returns:\n        List[str]: The names of the basemap layers.\n    \"\"\"\n    style = self.get_style()\n    if \"layers\" in style:\n        layers = style[\"layers\"]\n        if return_ids:\n            ids = [layer[\"id\"] for layer in layers]\n            if sorted:\n                ids.sort()\n\n            return ids\n        else:\n            return layers\n    else:\n        return []\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.get_terra_draw_data","title":"<code>get_terra_draw_data(self)</code>","text":"<p>Get all Terra Draw features as GeoJSON.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing GeoJSON FeatureCollection with drawn features</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def get_terra_draw_data(self) -&gt; Dict[str, Any]:\n    \"\"\"Get all Terra Draw features as GeoJSON.\n\n    Returns:\n        Dict containing GeoJSON FeatureCollection with drawn features\n    \"\"\"\n    # Try to get current data first\n    if self._terra_draw_data:\n        return self._terra_draw_data\n\n    # If no data in trait, call JavaScript to get fresh data\n    self.call_js_method(\"getTerraDrawData\")\n    # Give JavaScript time to execute and sync data\n    import time\n\n    time.sleep(0.2)\n\n    # Return the synced data or empty FeatureCollection if nothing\n    return (\n        self._terra_draw_data\n        if self._terra_draw_data\n        else {\"type\": \"FeatureCollection\", \"features\": []}\n    )\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.load_draw_data","title":"<code>load_draw_data(self, geojson_data)</code>","text":"<p>Load GeoJSON data into the draw control.</p> <p>Parameters:</p> Name Type Description Default <code>geojson_data</code> <code>Union[Dict[str, Any], str]</code> <p>GeoJSON data as dictionary or JSON string</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def load_draw_data(self, geojson_data: Union[Dict[str, Any], str]) -&gt; None:\n    \"\"\"Load GeoJSON data into the draw control.\n\n    Args:\n        geojson_data: GeoJSON data as dictionary or JSON string\n    \"\"\"\n    if isinstance(geojson_data, str):\n        geojson_data = json.loads(geojson_data)\n\n    # Update the trait immediately to ensure consistency\n    self._draw_data = geojson_data\n\n    # Send to JavaScript\n    self.call_js_method(\"loadDrawData\", geojson_data)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.load_terra_draw_data","title":"<code>load_terra_draw_data(self, geojson_data)</code>","text":"<p>Load GeoJSON data into the Terra Draw control.</p> <p>Parameters:</p> Name Type Description Default <code>geojson_data</code> <code>Union[Dict[str, Any], str]</code> <p>GeoJSON data as dictionary or JSON string</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def load_terra_draw_data(self, geojson_data: Union[Dict[str, Any], str]) -&gt; None:\n    \"\"\"Load GeoJSON data into the Terra Draw control.\n\n    Args:\n        geojson_data: GeoJSON data as dictionary or JSON string\n    \"\"\"\n    if isinstance(geojson_data, str):\n        geojson_data = json.loads(geojson_data)\n\n    # Update the trait immediately to ensure consistency\n    self._terra_draw_data = geojson_data\n\n    # Send to JavaScript\n    self.call_js_method(\"loadTerraDrawData\", geojson_data)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.remove_control","title":"<code>remove_control(self, control_type, position='top-right')</code>","text":"<p>Remove a control from the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control to remove ('navigation', 'scale', 'fullscreen', 'geolocate', 'attribution', 'globe')</p> required <code>position</code> <code>str</code> <p>Position where the control was added ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def remove_control(\n    self,\n    control_type: str,\n    position: str = \"top-right\",\n) -&gt; None:\n    \"\"\"Remove a control from the map.\n\n    Args:\n        control_type: Type of control to remove ('navigation', 'scale', 'fullscreen', 'geolocate', 'attribution', 'globe')\n        position: Position where the control was added ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n    \"\"\"\n    # Remove control from persistent state\n    control_key = f\"{control_type}_{position}\"\n    current_controls = dict(self._controls)\n    if control_key in current_controls:\n        del current_controls[control_key]\n        self._controls = current_controls\n\n    self.call_js_method(\"removeControl\", control_type, position)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.remove_from_sidebar","title":"<code>remove_from_sidebar(self, widget=None, name=None)</code>","text":"<p>Removes a widget from the sidebar content.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>widgets.Widget</code> <p>The widget to remove from the sidebar.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the widget to remove from the sidebar.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def remove_from_sidebar(\n    self, widget: widgets.Widget = None, name: str = None\n) -&gt; None:\n    \"\"\"\n    Removes a widget from the sidebar content.\n\n    Args:\n        widget (widgets.Widget): The widget to remove from the sidebar.\n        name (str): The name of the widget to remove from the sidebar.\n    \"\"\"\n    if self.container is not None:\n        self.container.remove_from_sidebar(widget, name)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.remove_layer","title":"<code>remove_layer(self, layer_id)</code>","text":"<p>Remove a layer from the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer to remove.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def remove_layer(self, layer_id: str) -&gt; None:\n    \"\"\"Remove a layer from the map.\n\n    Args:\n        layer_id: Unique identifier for the layer to remove.\n    \"\"\"\n    # Remove from JavaScript map\n    self.call_js_method(\"removeLayer\", layer_id)\n\n    # Remove from local state\n    if layer_id in self._layers:\n        current_layers = dict(self._layers)\n        del current_layers[layer_id]\n        self._layers = current_layers\n\n    # Remove from layer_dict\n    if layer_id in self.layer_dict:\n        del self.layer_dict[layer_id]\n\n    # Update layer controls if they exist\n    self._update_layer_controls()\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> <p>Parameters:</p> Name Type Description Default <code>bearing</code> <code>float</code> <p>Map rotation in degrees (0-360).</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\n\n    Args:\n        bearing: Map rotation in degrees (0-360).\n    \"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_center","title":"<code>set_center(self, lng, lat)</code>","text":"<p>Set the map center coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>lng</code> <code>float</code> <p>Longitude coordinate.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_center(self, lng: float, lat: float) -&gt; None:\n    \"\"\"Set the map center coordinates.\n\n    Args:\n        lng: Longitude coordinate.\n        lat: Latitude coordinate.\n    \"\"\"\n    self.center = [lng, lat]\n    self._current_center = [lng, lat]\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_draw_mode","title":"<code>set_draw_mode(self, mode)</code>","text":"<p>Set the draw control mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Draw mode ('simple_select', 'direct_select', 'draw_point',  'draw_line_string', 'draw_polygon', 'static')</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_draw_mode(self, mode: str) -&gt; None:\n    \"\"\"Set the draw control mode.\n\n    Args:\n        mode: Draw mode ('simple_select', 'direct_select', 'draw_point',\n             'draw_line_string', 'draw_polygon', 'static')\n    \"\"\"\n    self.call_js_method(\"setDrawMode\", mode)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_layout_property","title":"<code>set_layout_property(self, layer_id, name, value)</code>","text":"<p>Set a layout property for a layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier of the layer.</p> required <code>name</code> <code>str</code> <p>Name of the layout property to set.</p> required <code>value</code> <code>Any</code> <p>Value to set for the property.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_layout_property(self, layer_id: str, name: str, value: Any) -&gt; None:\n    \"\"\"Set a layout property for a layer.\n\n    Args:\n        layer_id: Unique identifier of the layer.\n        name: Name of the layout property to set.\n        value: Value to set for the property.\n    \"\"\"\n    self.call_js_method(\"setLayoutProperty\", layer_id, name, value)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_opacity","title":"<code>set_opacity(self, layer_id, opacity)</code>","text":"<p>Set the opacity of a layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier of the layer.</p> required <code>opacity</code> <code>float</code> <p>Opacity value between 0.0 (transparent) and 1.0 (opaque).</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_opacity(self, layer_id: str, opacity: float) -&gt; None:\n    \"\"\"Set the opacity of a layer.\n\n    Args:\n        layer_id: Unique identifier of the layer.\n        opacity: Opacity value between 0.0 (transparent) and 1.0 (opaque).\n    \"\"\"\n    layer_type = self.get_layer_type(layer_id)\n\n    if layer_id == \"Background\":\n        for layer in self.get_style_layers():\n            layer_type = layer.get(\"type\")\n            if layer_type != \"symbol\":\n                self.set_paint_property(\n                    layer[\"id\"], f\"{layer_type}-opacity\", opacity\n                )\n            else:\n                self.set_paint_property(layer[\"id\"], \"icon-opacity\", opacity)\n                self.set_paint_property(layer[\"id\"], \"text-opacity\", opacity)\n        return\n\n    if layer_id in self.layer_dict:\n        layer_type = self.layer_dict[layer_id][\"layer\"][\"type\"]\n        prop_name = f\"{layer_type}-opacity\"\n        self.layer_dict[layer_id][\"opacity\"] = opacity\n        self._update_layer_controls()\n    elif layer_id in self.style_dict:\n        layer = self.style_dict[layer_id]\n        layer_type = layer.get(\"type\")\n        prop_name = f\"{layer_type}-opacity\"\n        if \"paint\" in layer:\n            layer[\"paint\"][prop_name] = opacity\n\n    if layer_type != \"symbol\":\n        self.set_paint_property(layer_id, f\"{layer_type}-opacity\", opacity)\n    else:\n        self.set_paint_property(layer_id, \"icon-opacity\", opacity)\n        self.set_paint_property(layer_id, \"text-opacity\", opacity)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_paint_property","title":"<code>set_paint_property(self, layer_id, name, value)</code>","text":"<p>Set a paint property for a layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier of the layer.</p> required <code>name</code> <code>str</code> <p>Name of the paint property to set.</p> required <code>value</code> <code>Any</code> <p>Value to set for the property.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_paint_property(self, layer_id: str, name: str, value: Any) -&gt; None:\n    \"\"\"Set a paint property for a layer.\n\n    Args:\n        layer_id: Unique identifier of the layer.\n        name: Name of the paint property to set.\n        value: Value to set for the property.\n    \"\"\"\n    self.call_js_method(\"setPaintProperty\", layer_id, name, value)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> <p>Parameters:</p> Name Type Description Default <code>pitch</code> <code>float</code> <p>Map tilt in degrees (0-60).</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\n\n    Args:\n        pitch: Map tilt in degrees (0-60).\n    \"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_projection","title":"<code>set_projection(self, projection)</code>","text":"<p>Set the map projection.</p> <p>Parameters:</p> Name Type Description Default <code>projection</code> <code>Dict[str, Any]</code> <p>Projection configuration dictionary.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_projection(self, projection: Dict[str, Any]) -&gt; None:\n    \"\"\"Set the map projection.\n\n    Args:\n        projection: Projection configuration dictionary.\n    \"\"\"\n    # Store projection in persistent state\n    self._projection = projection\n    self.call_js_method(\"setProjection\", projection)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_sidebar_content","title":"<code>set_sidebar_content(self, content)</code>","text":"<p>Replaces all content in the sidebar (except the toggle button).</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Union[widgets.VBox, List[widgets.Widget]]</code> <p>The new content for the sidebar.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_sidebar_content(\n    self, content: Union[widgets.VBox, List[widgets.Widget]]\n) -&gt; None:\n    \"\"\"\n    Replaces all content in the sidebar (except the toggle button).\n\n    Args:\n        content (Union[widgets.VBox, List[widgets.Widget]]): The new content for the sidebar.\n    \"\"\"\n\n    if self.container is not None:\n        self.container.set_sidebar_content(content)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_sidebar_width","title":"<code>set_sidebar_width(self, min_width=None, max_width=None)</code>","text":"<p>Dynamically updates the sidebar's minimum and maximum width.</p> <p>Parameters:</p> Name Type Description Default <code>min_width</code> <code>int</code> <p>New minimum width in pixels. If None, keep current.</p> <code>None</code> <code>max_width</code> <code>int</code> <p>New maximum width in pixels. If None, keep current.</p> <code>None</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def set_sidebar_width(self, min_width: int = None, max_width: int = None) -&gt; None:\n    \"\"\"\n    Dynamically updates the sidebar's minimum and maximum width.\n\n    Args:\n        min_width (int, optional): New minimum width in pixels. If None, keep current.\n        max_width (int, optional): New maximum width in pixels. If None, keep current.\n    \"\"\"\n    if self.container is None:\n        self.create_container()\n    self.container.set_sidebar_width(min_width, max_width)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>Union[str, Dict[str, Any]]</code> <p>Map style as URL string or style object dictionary.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\n\n    Args:\n        style: Map style as URL string or style object dictionary.\n    \"\"\"\n    if isinstance(style, str):\n        self.style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_terrain","title":"<code>set_terrain(self, source='https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png', exaggeration=1.0, tile_size=256, encoding='terrarium', source_id='terrain-dem')</code>","text":"<p>Add terrain visualization to the map.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>URL template for terrain tiles. Defaults to AWS elevation tiles.</p> <code>'https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png'</code> <code>exaggeration</code> <code>float</code> <p>Terrain exaggeration factor. Defaults to 1.0.</p> <code>1.0</code> <code>tile_size</code> <code>int</code> <p>Tile size in pixels. Defaults to 256.</p> <code>256</code> <code>encoding</code> <code>str</code> <p>Encoding for the terrain tiles. Defaults to \"terrarium\".</p> <code>'terrarium'</code> <code>source_id</code> <code>str</code> <p>Unique identifier for the terrain source. Defaults to \"terrain-dem\".</p> <code>'terrain-dem'</code> Source code in <code>anymap/maplibre.py</code> <pre><code>def set_terrain(\n    self,\n    source: str = \"https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png\",\n    exaggeration: float = 1.0,\n    tile_size: int = 256,\n    encoding: str = \"terrarium\",\n    source_id: str = \"terrain-dem\",\n) -&gt; None:\n    \"\"\"Add terrain visualization to the map.\n\n    Args:\n        source: URL template for terrain tiles. Defaults to AWS elevation tiles.\n        exaggeration: Terrain exaggeration factor. Defaults to 1.0.\n        tile_size: Tile size in pixels. Defaults to 256.\n        encoding: Encoding for the terrain tiles. Defaults to \"terrarium\".\n        source_id: Unique identifier for the terrain source. Defaults to \"terrain-dem\".\n    \"\"\"\n    # Add terrain source\n    self.add_source(\n        source_id,\n        {\n            \"type\": \"raster-dem\",\n            \"tiles\": [source],\n            \"tileSize\": tile_size,\n            \"encoding\": encoding,\n        },\n    )\n\n    # Set terrain on the map\n    terrain_config = {\"source\": source_id, \"exaggeration\": exaggeration}\n\n    # Store terrain configuration in persistent state\n    self._terrain = terrain_config\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_visibility","title":"<code>set_visibility(self, layer_id, visible)</code>","text":"<p>Set the visibility of a layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>Unique identifier of the layer.</p> required <code>visible</code> <code>bool</code> <p>Whether the layer should be visible.</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_visibility(self, layer_id: str, visible: bool) -&gt; None:\n    \"\"\"Set the visibility of a layer.\n\n    Args:\n        layer_id: Unique identifier of the layer.\n        visible: Whether the layer should be visible.\n    \"\"\"\n    if visible:\n        visibility = \"visible\"\n    else:\n        visibility = \"none\"\n\n    if layer_id == \"Background\":\n        for layer in self.get_style_layers():\n            self.set_layout_property(layer[\"id\"], \"visibility\", visibility)\n    else:\n        self.set_layout_property(layer_id, \"visibility\", visibility)\n    if layer_id in self.layer_dict:\n        self.layer_dict[layer_id][\"visible\"] = visible\n        self._update_layer_controls()\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.set_zoom","title":"<code>set_zoom(self, zoom)</code>","text":"<p>Set the map zoom level.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom level (typically 0-20).</p> required Source code in <code>anymap/maplibre.py</code> <pre><code>def set_zoom(self, zoom: float) -&gt; None:\n    \"\"\"Set the map zoom level.\n\n    Args:\n        zoom: Zoom level (typically 0-20).\n    \"\"\"\n    self.zoom = zoom\n    self._current_zoom = zoom\n</code></pre>"},{"location":"maplibre/#anymap.maplibre.MapLibreMap.show","title":"<code>show(self, sidebar_visible=False, min_width=360, max_width=360, sidebar_content=None, **kwargs)</code>","text":"<p>Displays the map with an optional sidebar.</p> <p>Parameters:</p> Name Type Description Default <code>sidebar_visible</code> <code>bool</code> <p>Whether the sidebar is visible. Defaults to False.</p> <code>False</code> <code>min_width</code> <code>int</code> <p>Minimum width of the sidebar in pixels. Defaults to 250.</p> <code>360</code> <code>max_width</code> <code>int</code> <p>Maximum width of the sidebar in pixels. Defaults to 300.</p> <code>360</code> <code>sidebar_content</code> <code>Optional[Any]</code> <p>Content to display in the sidebar. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>anymap/maplibre.py</code> <pre><code>def show(\n    self,\n    sidebar_visible: bool = False,\n    min_width: int = 360,\n    max_width: int = 360,\n    sidebar_content: Optional[Any] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Displays the map with an optional sidebar.\n\n    Args:\n        sidebar_visible (bool): Whether the sidebar is visible. Defaults to False.\n        min_width (int): Minimum width of the sidebar in pixels. Defaults to 250.\n        max_width (int): Maximum width of the sidebar in pixels. Defaults to 300.\n        sidebar_content (Optional[Any]): Content to display in the sidebar. Defaults to None.\n        **kwargs (Any): Additional keyword arguments.\n\n    Returns:\n        None\n    \"\"\"\n    return Container(\n        self,\n        sidebar_visible=sidebar_visible,\n        min_width=min_width,\n        max_width=max_width,\n        sidebar_content=sidebar_content,\n        **kwargs,\n    )\n</code></pre>"},{"location":"maplibre_widgets/","title":"maplibre_widgets module","text":"<p>MapLibre widget classes for UI components.</p> <p>This module contains the widget classes that support the MapLibreMap implementation, including layer management, styling, and container widgets.</p> <p>Classes</p> <p>CustomWidget: Generic expansion panel widget with dynamic content management. Container: Container widget for map display with optional sidebar. LayerStyleWidget: Interactive widget for styling map layers. LayerManagerWidget: Widget for managing map layers (visibility, opacity, removal).</p> <p>These classes were extracted from maplibre.py to improve code organization and maintainability.</p>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container","title":"<code> Container            (Container)         </code>","text":"<p>A container widget for displaying a map with an optional sidebar.</p> <p>This class creates a layout with a map on the left and a sidebar on the right. The sidebar can be toggled on or off and can display additional content.</p> <p>Attributes:</p> Name Type Description <code>sidebar_visible</code> <code>bool</code> <p>Whether the sidebar is visible.</p> <code>min_width</code> <code>int</code> <p>Minimum width of the sidebar in pixels.</p> <code>max_width</code> <code>int</code> <p>Maximum width of the sidebar in pixels.</p> <code>map_container</code> <code>v.Col</code> <p>The container for the map.</p> <code>sidebar_content_box</code> <code>widgets.VBox</code> <p>The container for the sidebar content.</p> <code>toggle_icon</code> <code>v.Icon</code> <p>The icon for the toggle button.</p> <code>toggle_btn</code> <code>v.Btn</code> <p>The button to toggle the sidebar.</p> <code>sidebar</code> <code>v.Col</code> <p>The container for the sidebar.</p> <code>row</code> <code>v.Row</code> <p>The main layout row containing the map and sidebar.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>class Container(v.Container):\n    \"\"\"\n    A container widget for displaying a map with an optional sidebar.\n\n    This class creates a layout with a map on the left and a sidebar on the right.\n    The sidebar can be toggled on or off and can display additional content.\n\n    Attributes:\n        sidebar_visible (bool): Whether the sidebar is visible.\n        min_width (int): Minimum width of the sidebar in pixels.\n        max_width (int): Maximum width of the sidebar in pixels.\n        map_container (v.Col): The container for the map.\n        sidebar_content_box (widgets.VBox): The container for the sidebar content.\n        toggle_icon (v.Icon): The icon for the toggle button.\n        toggle_btn (v.Btn): The button to toggle the sidebar.\n        sidebar (v.Col): The container for the sidebar.\n        row (v.Row): The main layout row containing the map and sidebar.\n    \"\"\"\n\n    def __init__(\n        self,\n        host_map: Optional[Any] = None,\n        sidebar_visible: bool = True,\n        min_width: int = 250,\n        max_width: int = 300,\n        sidebar_content: Optional[Union[widgets.VBox, List[widgets.Widget]]] = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Initializes the Container widget.\n\n        Args:\n            host_map (Optional[Any]): The map object to display in the container. Defaults to None.\n            sidebar_visible (bool): Whether the sidebar is visible. Defaults to True.\n            min_width (int): Minimum width of the sidebar in pixels. Defaults to 250.\n            max_width (int): Maximum width of the sidebar in pixels. Defaults to 300.\n            sidebar_content (Optional[Union[widgets.VBox, List[widgets.Widget]]]):\n                The content to display in the sidebar. Defaults to None.\n            *args (Any): Additional positional arguments for the parent class.\n            **kwargs (Any): Additional keyword arguments for the parent class.\n        \"\"\"\n        self.sidebar_visible = sidebar_visible\n        self.min_width = min_width\n        self.max_width = max_width\n        self.host_map = host_map\n        self.sidebar_widgets = {}\n\n        # Map display container (left column)\n        self.map_container = v.Col(\n            class_=\"pa-1\",\n            style_=\"flex-grow: 1; flex-shrink: 1; flex-basis: 0;\",\n        )\n        self.map_container.children = [host_map or self.create_map()]\n\n        # Sidebar content container (mutable VBox)\n        self.sidebar_content_box = widgets.VBox()\n        if sidebar_content:\n            self.set_sidebar_content(sidebar_content)\n\n        # Toggle button\n        if sidebar_visible:\n            self.toggle_icon = v.Icon(children=[\"mdi-chevron-right\"])\n        else:\n            self.toggle_icon = v.Icon(children=[\"mdi-chevron-left\"])  # default icon\n        self.toggle_btn = v.Btn(\n            icon=True,\n            children=[self.toggle_icon],\n            style_=\"width: 48px; height: 48px; min-width: 48px;\",\n        )\n        self.toggle_btn.on_event(\"click\", self.toggle_sidebar)\n\n        # Settings icon\n        self.settings_icon = v.Icon(children=[\"mdi-wrench\"])\n        self.settings_btn = v.Btn(\n            icon=True,\n            children=[self.settings_icon],\n            style_=\"width: 36px; height: 36px;\",\n        )\n        self.settings_btn.on_event(\"click\", self.toggle_width_slider)\n\n        # Sidebar controls row (toggle + settings)\n        self.sidebar_controls = v.Row(\n            class_=\"ma-0 pa-0\", children=[self.toggle_btn, self.settings_btn]\n        )\n\n        # Sidebar width slider (initially hidden)\n        self.width_slider = widgets.IntSlider(\n            value=self.max_width,\n            min=200,\n            max=1000,\n            step=10,\n            description=\"Width:\",\n            continuous_update=True,\n        )\n        self.width_slider.observe(self.on_width_change, names=\"value\")\n\n        self.settings_widget = CustomWidget(\n            self.width_slider,\n            widget_icon=\"mdi-cog\",\n            label=\"Sidebar Settings\",\n            host_map=self.host_map,\n        )\n\n        # Sidebar (right column)\n        self.sidebar = v.Col(class_=\"pa-1\", style_=\"overflow-y: hidden;\")\n        self.update_sidebar_content()\n\n        # Main layout row\n        self.row = v.Row(\n            class_=\"d-flex flex-nowrap\",\n            children=[self.map_container, self.sidebar],\n        )\n\n        super().__init__(fluid=True, children=[self.row], *args, **kwargs)\n\n    def create_map(self) -&gt; Any:\n        \"\"\"\n        Creates a default map object.\n\n        Returns:\n            Any: A default map object.\n        \"\"\"\n        from .maplibre import MapLibreMap\n\n        return MapLibreMap(center=[20, 0], zoom=2)\n\n    def toggle_sidebar(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Toggles the visibility of the sidebar.\n\n        Args:\n            *args (Any): Additional positional arguments.\n            **kwargs (Any): Additional keyword arguments.\n        \"\"\"\n        self.sidebar_visible = not self.sidebar_visible\n        self.toggle_icon.children = [\n            \"mdi-chevron-right\" if self.sidebar_visible else \"mdi-chevron-left\"\n        ]\n        self.update_sidebar_content()\n\n    def update_sidebar_content(self) -&gt; None:\n        \"\"\"\n        Updates the content of the sidebar based on its visibility.\n        If the sidebar is visible, it displays the toggle button and the sidebar content.\n        If the sidebar is hidden, it only displays the toggle button.\n        \"\"\"\n        if self.sidebar_visible:\n            # Header row: toggle on the left, settings on the right\n            header_row = v.Row(\n                class_=\"ma-0 pa-0\",\n                align=\"center\",\n                justify=\"space-between\",\n                children=[self.toggle_btn, self.settings_btn],\n            )\n\n            children = [header_row]\n\n            children.append(self.sidebar_content_box)\n\n            self.sidebar.children = children\n            self.sidebar.style_ = (\n                f\"min-width: {self.min_width}px; max-width: {self.max_width}px;\"\n            )\n        else:\n            self.sidebar.children = [self.toggle_btn]\n            self.sidebar.style_ = \"width: 48px; min-width: 48px; max-width: 48px;\"\n\n    def set_sidebar_content(\n        self, content: Union[widgets.VBox, List[widgets.Widget]]\n    ) -&gt; None:\n        \"\"\"\n        Replaces all content in the sidebar (except the toggle button).\n\n        Args:\n            content (Union[widgets.VBox, List[widgets.Widget]]): The new content for the sidebar.\n        \"\"\"\n        if isinstance(content, (list, tuple)):\n            self.sidebar_content_box.children = content\n        else:\n            self.sidebar_content_box.children = [content]\n\n    def add_to_sidebar(\n        self,\n        widget: widgets.Widget,\n        add_header: bool = True,\n        widget_icon: str = \"mdi-tools\",\n        close_icon: str = \"mdi-close\",\n        label: str = \"My Tools\",\n        background_color: str = \"#f5f5f5\",\n        height: str = \"40px\",\n        expanded: bool = True,\n        host_map: Optional[Any] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Appends a widget to the sidebar content.\n\n        Args:\n            widget (Optional[Union[widgets.Widget, List[widgets.Widget]]]): Initial widget(s) to display in the content box.\n            widget_icon (str): Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n            close_icon (str): Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n            background_color (str): Background color of the header. Defaults to \"#f5f5f5\".\n            label (str): Text label for the header. Defaults to \"My Tools\".\n            height (str): Height of the header. Defaults to \"40px\".\n            expanded (bool): Whether the panel is expanded by default. Defaults to True.\n            *args (Any): Additional positional arguments for the parent class.\n            **kwargs (Any): Additional keyword arguments for the parent class.\n        \"\"\"\n\n        if label in self.sidebar_widgets:\n            self.remove_from_sidebar(name=label)\n\n        if add_header:\n            widget = CustomWidget(\n                widget,\n                widget_icon=widget_icon,\n                close_icon=close_icon,\n                label=label,\n                background_color=background_color,\n                height=height,\n                expanded=expanded,\n                host_map=host_map,\n                **kwargs,\n            )\n\n        self.sidebar_content_box.children += (widget,)\n        self.sidebar_widgets[label] = widget\n\n    def remove_from_sidebar(\n        self, widget: widgets.Widget = None, name: str = None\n    ) -&gt; None:\n        \"\"\"\n        Removes a widget from the sidebar content.\n\n        Args:\n            widget (widgets.Widget): The widget to remove from the sidebar.\n            name (str): The name of the widget to remove from the sidebar.\n        \"\"\"\n        key = None\n        for key, value in self.sidebar_widgets.items():\n            if value == widget or key == name:\n                if widget is None:\n                    widget = self.sidebar_widgets[key]\n                break\n\n        if key is not None and key in self.sidebar_widgets:\n            self.sidebar_widgets.pop(key)\n        self.sidebar_content_box.children = tuple(\n            child for child in self.sidebar_content_box.children if child != widget\n        )\n\n    def set_sidebar_width(self, min_width: int = None, max_width: int = None) -&gt; None:\n        \"\"\"\n        Dynamically updates the sidebar's minimum and maximum width.\n\n        Args:\n            min_width (int, optional): New minimum width in pixels. If None, keep current.\n            max_width (int, optional): New maximum width in pixels. If None, keep current.\n        \"\"\"\n        if min_width is not None:\n            if isinstance(min_width, str):\n                min_width = int(min_width.replace(\"px\", \"\"))\n            self.min_width = min_width\n        if max_width is not None:\n            if isinstance(max_width, str):\n                max_width = int(max_width.replace(\"px\", \"\"))\n            self.max_width = max_width\n        self.update_sidebar_content()\n\n    def toggle_width_slider(self, *args: Any) -&gt; None:\n\n        if self.settings_widget not in self.sidebar_content_box.children:\n            self.add_to_sidebar(self.settings_widget, add_header=False)\n\n    def on_width_change(self, change: dict) -&gt; None:\n        new_width = change[\"new\"]\n        self.set_sidebar_width(min_width=new_width, max_width=new_width)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.__init__","title":"<code>__init__(self, host_map=None, sidebar_visible=True, min_width=250, max_width=300, sidebar_content=None, *args, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Container widget.</p> <p>Parameters:</p> Name Type Description Default <code>host_map</code> <code>Optional[Any]</code> <p>The map object to display in the container. Defaults to None.</p> <code>None</code> <code>sidebar_visible</code> <code>bool</code> <p>Whether the sidebar is visible. Defaults to True.</p> <code>True</code> <code>min_width</code> <code>int</code> <p>Minimum width of the sidebar in pixels. Defaults to 250.</p> <code>250</code> <code>max_width</code> <code>int</code> <p>Maximum width of the sidebar in pixels. Defaults to 300.</p> <code>300</code> <code>sidebar_content</code> <code>Optional[Union[widgets.VBox, List[widgets.Widget]]]</code> <p>The content to display in the sidebar. Defaults to None.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>Additional positional arguments for the parent class.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the parent class.</p> <code>{}</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def __init__(\n    self,\n    host_map: Optional[Any] = None,\n    sidebar_visible: bool = True,\n    min_width: int = 250,\n    max_width: int = 300,\n    sidebar_content: Optional[Union[widgets.VBox, List[widgets.Widget]]] = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Initializes the Container widget.\n\n    Args:\n        host_map (Optional[Any]): The map object to display in the container. Defaults to None.\n        sidebar_visible (bool): Whether the sidebar is visible. Defaults to True.\n        min_width (int): Minimum width of the sidebar in pixels. Defaults to 250.\n        max_width (int): Maximum width of the sidebar in pixels. Defaults to 300.\n        sidebar_content (Optional[Union[widgets.VBox, List[widgets.Widget]]]):\n            The content to display in the sidebar. Defaults to None.\n        *args (Any): Additional positional arguments for the parent class.\n        **kwargs (Any): Additional keyword arguments for the parent class.\n    \"\"\"\n    self.sidebar_visible = sidebar_visible\n    self.min_width = min_width\n    self.max_width = max_width\n    self.host_map = host_map\n    self.sidebar_widgets = {}\n\n    # Map display container (left column)\n    self.map_container = v.Col(\n        class_=\"pa-1\",\n        style_=\"flex-grow: 1; flex-shrink: 1; flex-basis: 0;\",\n    )\n    self.map_container.children = [host_map or self.create_map()]\n\n    # Sidebar content container (mutable VBox)\n    self.sidebar_content_box = widgets.VBox()\n    if sidebar_content:\n        self.set_sidebar_content(sidebar_content)\n\n    # Toggle button\n    if sidebar_visible:\n        self.toggle_icon = v.Icon(children=[\"mdi-chevron-right\"])\n    else:\n        self.toggle_icon = v.Icon(children=[\"mdi-chevron-left\"])  # default icon\n    self.toggle_btn = v.Btn(\n        icon=True,\n        children=[self.toggle_icon],\n        style_=\"width: 48px; height: 48px; min-width: 48px;\",\n    )\n    self.toggle_btn.on_event(\"click\", self.toggle_sidebar)\n\n    # Settings icon\n    self.settings_icon = v.Icon(children=[\"mdi-wrench\"])\n    self.settings_btn = v.Btn(\n        icon=True,\n        children=[self.settings_icon],\n        style_=\"width: 36px; height: 36px;\",\n    )\n    self.settings_btn.on_event(\"click\", self.toggle_width_slider)\n\n    # Sidebar controls row (toggle + settings)\n    self.sidebar_controls = v.Row(\n        class_=\"ma-0 pa-0\", children=[self.toggle_btn, self.settings_btn]\n    )\n\n    # Sidebar width slider (initially hidden)\n    self.width_slider = widgets.IntSlider(\n        value=self.max_width,\n        min=200,\n        max=1000,\n        step=10,\n        description=\"Width:\",\n        continuous_update=True,\n    )\n    self.width_slider.observe(self.on_width_change, names=\"value\")\n\n    self.settings_widget = CustomWidget(\n        self.width_slider,\n        widget_icon=\"mdi-cog\",\n        label=\"Sidebar Settings\",\n        host_map=self.host_map,\n    )\n\n    # Sidebar (right column)\n    self.sidebar = v.Col(class_=\"pa-1\", style_=\"overflow-y: hidden;\")\n    self.update_sidebar_content()\n\n    # Main layout row\n    self.row = v.Row(\n        class_=\"d-flex flex-nowrap\",\n        children=[self.map_container, self.sidebar],\n    )\n\n    super().__init__(fluid=True, children=[self.row], *args, **kwargs)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.add_to_sidebar","title":"<code>add_to_sidebar(self, widget, add_header=True, widget_icon='mdi-tools', close_icon='mdi-close', label='My Tools', background_color='#f5f5f5', height='40px', expanded=True, host_map=None, **kwargs)</code>","text":"<p>Appends a widget to the sidebar content.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Optional[Union[widgets.Widget, List[widgets.Widget]]]</code> <p>Initial widget(s) to display in the content box.</p> required <code>widget_icon</code> <code>str</code> <p>Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.</p> <code>'mdi-tools'</code> <code>close_icon</code> <code>str</code> <p>Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.</p> <code>'mdi-close'</code> <code>background_color</code> <code>str</code> <p>Background color of the header. Defaults to \"#f5f5f5\".</p> <code>'#f5f5f5'</code> <code>label</code> <code>str</code> <p>Text label for the header. Defaults to \"My Tools\".</p> <code>'My Tools'</code> <code>height</code> <code>str</code> <p>Height of the header. Defaults to \"40px\".</p> <code>'40px'</code> <code>expanded</code> <code>bool</code> <p>Whether the panel is expanded by default. Defaults to True.</p> <code>True</code> <code>*args</code> <code>Any</code> <p>Additional positional arguments for the parent class.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the parent class.</p> <code>{}</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def add_to_sidebar(\n    self,\n    widget: widgets.Widget,\n    add_header: bool = True,\n    widget_icon: str = \"mdi-tools\",\n    close_icon: str = \"mdi-close\",\n    label: str = \"My Tools\",\n    background_color: str = \"#f5f5f5\",\n    height: str = \"40px\",\n    expanded: bool = True,\n    host_map: Optional[Any] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Appends a widget to the sidebar content.\n\n    Args:\n        widget (Optional[Union[widgets.Widget, List[widgets.Widget]]]): Initial widget(s) to display in the content box.\n        widget_icon (str): Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n        close_icon (str): Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n        background_color (str): Background color of the header. Defaults to \"#f5f5f5\".\n        label (str): Text label for the header. Defaults to \"My Tools\".\n        height (str): Height of the header. Defaults to \"40px\".\n        expanded (bool): Whether the panel is expanded by default. Defaults to True.\n        *args (Any): Additional positional arguments for the parent class.\n        **kwargs (Any): Additional keyword arguments for the parent class.\n    \"\"\"\n\n    if label in self.sidebar_widgets:\n        self.remove_from_sidebar(name=label)\n\n    if add_header:\n        widget = CustomWidget(\n            widget,\n            widget_icon=widget_icon,\n            close_icon=close_icon,\n            label=label,\n            background_color=background_color,\n            height=height,\n            expanded=expanded,\n            host_map=host_map,\n            **kwargs,\n        )\n\n    self.sidebar_content_box.children += (widget,)\n    self.sidebar_widgets[label] = widget\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.create_map","title":"<code>create_map(self)</code>","text":"<p>Creates a default map object.</p> <p>Returns:</p> Type Description <code>Any</code> <p>A default map object.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def create_map(self) -&gt; Any:\n    \"\"\"\n    Creates a default map object.\n\n    Returns:\n        Any: A default map object.\n    \"\"\"\n    from .maplibre import MapLibreMap\n\n    return MapLibreMap(center=[20, 0], zoom=2)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.remove_from_sidebar","title":"<code>remove_from_sidebar(self, widget=None, name=None)</code>","text":"<p>Removes a widget from the sidebar content.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>widgets.Widget</code> <p>The widget to remove from the sidebar.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the widget to remove from the sidebar.</p> <code>None</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def remove_from_sidebar(\n    self, widget: widgets.Widget = None, name: str = None\n) -&gt; None:\n    \"\"\"\n    Removes a widget from the sidebar content.\n\n    Args:\n        widget (widgets.Widget): The widget to remove from the sidebar.\n        name (str): The name of the widget to remove from the sidebar.\n    \"\"\"\n    key = None\n    for key, value in self.sidebar_widgets.items():\n        if value == widget or key == name:\n            if widget is None:\n                widget = self.sidebar_widgets[key]\n            break\n\n    if key is not None and key in self.sidebar_widgets:\n        self.sidebar_widgets.pop(key)\n    self.sidebar_content_box.children = tuple(\n        child for child in self.sidebar_content_box.children if child != widget\n    )\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.set_sidebar_content","title":"<code>set_sidebar_content(self, content)</code>","text":"<p>Replaces all content in the sidebar (except the toggle button).</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Union[widgets.VBox, List[widgets.Widget]]</code> <p>The new content for the sidebar.</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def set_sidebar_content(\n    self, content: Union[widgets.VBox, List[widgets.Widget]]\n) -&gt; None:\n    \"\"\"\n    Replaces all content in the sidebar (except the toggle button).\n\n    Args:\n        content (Union[widgets.VBox, List[widgets.Widget]]): The new content for the sidebar.\n    \"\"\"\n    if isinstance(content, (list, tuple)):\n        self.sidebar_content_box.children = content\n    else:\n        self.sidebar_content_box.children = [content]\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.set_sidebar_width","title":"<code>set_sidebar_width(self, min_width=None, max_width=None)</code>","text":"<p>Dynamically updates the sidebar's minimum and maximum width.</p> <p>Parameters:</p> Name Type Description Default <code>min_width</code> <code>int</code> <p>New minimum width in pixels. If None, keep current.</p> <code>None</code> <code>max_width</code> <code>int</code> <p>New maximum width in pixels. If None, keep current.</p> <code>None</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def set_sidebar_width(self, min_width: int = None, max_width: int = None) -&gt; None:\n    \"\"\"\n    Dynamically updates the sidebar's minimum and maximum width.\n\n    Args:\n        min_width (int, optional): New minimum width in pixels. If None, keep current.\n        max_width (int, optional): New maximum width in pixels. If None, keep current.\n    \"\"\"\n    if min_width is not None:\n        if isinstance(min_width, str):\n            min_width = int(min_width.replace(\"px\", \"\"))\n        self.min_width = min_width\n    if max_width is not None:\n        if isinstance(max_width, str):\n            max_width = int(max_width.replace(\"px\", \"\"))\n        self.max_width = max_width\n    self.update_sidebar_content()\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.toggle_sidebar","title":"<code>toggle_sidebar(self, *args, **kwargs)</code>","text":"<p>Toggles the visibility of the sidebar.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional positional arguments.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def toggle_sidebar(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Toggles the visibility of the sidebar.\n\n    Args:\n        *args (Any): Additional positional arguments.\n        **kwargs (Any): Additional keyword arguments.\n    \"\"\"\n    self.sidebar_visible = not self.sidebar_visible\n    self.toggle_icon.children = [\n        \"mdi-chevron-right\" if self.sidebar_visible else \"mdi-chevron-left\"\n    ]\n    self.update_sidebar_content()\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.Container.update_sidebar_content","title":"<code>update_sidebar_content(self)</code>","text":"<p>Updates the content of the sidebar based on its visibility. If the sidebar is visible, it displays the toggle button and the sidebar content. If the sidebar is hidden, it only displays the toggle button.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def update_sidebar_content(self) -&gt; None:\n    \"\"\"\n    Updates the content of the sidebar based on its visibility.\n    If the sidebar is visible, it displays the toggle button and the sidebar content.\n    If the sidebar is hidden, it only displays the toggle button.\n    \"\"\"\n    if self.sidebar_visible:\n        # Header row: toggle on the left, settings on the right\n        header_row = v.Row(\n            class_=\"ma-0 pa-0\",\n            align=\"center\",\n            justify=\"space-between\",\n            children=[self.toggle_btn, self.settings_btn],\n        )\n\n        children = [header_row]\n\n        children.append(self.sidebar_content_box)\n\n        self.sidebar.children = children\n        self.sidebar.style_ = (\n            f\"min-width: {self.min_width}px; max-width: {self.max_width}px;\"\n        )\n    else:\n        self.sidebar.children = [self.toggle_btn]\n        self.sidebar.style_ = \"width: 48px; min-width: 48px; max-width: 48px;\"\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.CustomWidget","title":"<code> CustomWidget            (ExpansionPanels)         </code>","text":"<p>A custom expansion panel widget with dynamic widget management.</p> <p>This widget allows for the creation of an expandable panel with a customizable header and dynamic content. Widgets can be added, removed, or replaced in the content box.</p> <p>Attributes:</p> Name Type Description <code>content_box</code> <code>widgets.VBox</code> <p>A container for holding the widgets displayed in the panel.</p> <code>panel</code> <code>v.ExpansionPanel</code> <p>The main expansion panel containing the header and content.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>class CustomWidget(v.ExpansionPanels):\n    \"\"\"\n    A custom expansion panel widget with dynamic widget management.\n\n    This widget allows for the creation of an expandable panel with a customizable header\n    and dynamic content. Widgets can be added, removed, or replaced in the content box.\n\n    Attributes:\n        content_box (widgets.VBox): A container for holding the widgets displayed in the panel.\n        panel (v.ExpansionPanel): The main expansion panel containing the header and content.\n    \"\"\"\n\n    def __init__(\n        self,\n        widget: Optional[Union[widgets.Widget, List[widgets.Widget]]] = None,\n        widget_icon: str = \"mdi-tools\",\n        close_icon: str = \"mdi-close\",\n        label: str = \"My Tools\",\n        background_color: str = \"#f5f5f5\",\n        height: str = \"40px\",\n        expanded: bool = True,\n        host_map: Optional[Any] = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Initializes the CustomWidget.\n\n        Args:\n            widget (Optional[Union[widgets.Widget, List[widgets.Widget]]]): Initial widget(s) to display in the content box.\n            widget_icon (str): Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n            close_icon (str): Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n            background_color (str): Background color of the header. Defaults to \"#f5f5f5\".\n            label (str): Text label for the header. Defaults to \"My Tools\".\n            height (str): Height of the header. Defaults to \"40px\".\n            expanded (bool): Whether the panel is expanded by default. Defaults to True.\n            *args (Any): Additional positional arguments for the parent class.\n            **kwargs (Any): Additional keyword arguments for the parent class.\n        \"\"\"\n        # Wrap content in a mutable VBox\n        self.content_box = widgets.VBox()\n        self.host_map = host_map\n        if widget:\n            if isinstance(widget, (list, tuple)):\n                self.content_box.children = widget\n            else:\n                self.content_box.children = [widget]\n\n        # Close icon button\n        close_btn = v.Btn(\n            icon=True,\n            small=True,\n            class_=\"ma-0\",\n            style_=\"min-width: 24px; width: 24px;\",\n            children=[v.Icon(children=[close_icon])],\n        )\n        close_btn.on_event(\"click\", self._handle_close)\n\n        header = v.ExpansionPanelHeader(\n            style_=f\"height: {height}; min-height: {height}; background-color: {background_color};\",\n            children=[\n                v.Row(\n                    align=\"center\",\n                    class_=\"d-flex flex-grow-1 align-center\",\n                    children=[\n                        v.Icon(children=[widget_icon], class_=\"ml-1\"),\n                        v.Spacer(),  # push title to center\n                        v.Html(tag=\"span\", children=[label], class_=\"text-subtitle-2\"),\n                        v.Spacer(),  # push close to right\n                        close_btn,\n                        v.Spacer(),\n                    ],\n                )\n            ],\n        )\n\n        self.panel = v.ExpansionPanel(\n            children=[\n                header,\n                v.ExpansionPanelContent(children=[self.content_box]),\n            ]\n        )\n\n        super().__init__(\n            children=[self.panel],\n            v_model=[0] if expanded else [],\n            multiple=True,\n            *args,\n            **kwargs,\n        )\n\n    def _handle_close(self, widget=None, event=None, data=None):\n        \"\"\"Calls the on_close callback if provided.\"\"\"\n\n        if self.host_map is not None:\n            self.host_map.remove_from_sidebar(self)\n        # self.close()\n\n    def add_widget(self, widget: widgets.Widget) -&gt; None:\n        \"\"\"\n        Adds a widget to the content box.\n\n        Args:\n            widget (widgets.Widget): The widget to add to the content box.\n        \"\"\"\n        self.content_box.children += (widget,)\n\n    def remove_widget(self, widget: widgets.Widget) -&gt; None:\n        \"\"\"\n        Removes a widget from the content box.\n\n        Args:\n            widget (widgets.Widget): The widget to remove from the content box.\n        \"\"\"\n        self.content_box.children = tuple(\n            w for w in self.content_box.children if w != widget\n        )\n\n    def set_widgets(self, widgets_list: List[widgets.Widget]) -&gt; None:\n        \"\"\"\n        Replaces all widgets in the content box.\n\n        Args:\n            widgets_list (List[widgets.Widget]): A list of widgets to set as the content of the content box.\n        \"\"\"\n        self.content_box.children = widgets_list\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.CustomWidget.__init__","title":"<code>__init__(self, widget=None, widget_icon='mdi-tools', close_icon='mdi-close', label='My Tools', background_color='#f5f5f5', height='40px', expanded=True, host_map=None, *args, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the CustomWidget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Optional[Union[widgets.Widget, List[widgets.Widget]]]</code> <p>Initial widget(s) to display in the content box.</p> <code>None</code> <code>widget_icon</code> <code>str</code> <p>Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.</p> <code>'mdi-tools'</code> <code>close_icon</code> <code>str</code> <p>Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.</p> <code>'mdi-close'</code> <code>background_color</code> <code>str</code> <p>Background color of the header. Defaults to \"#f5f5f5\".</p> <code>'#f5f5f5'</code> <code>label</code> <code>str</code> <p>Text label for the header. Defaults to \"My Tools\".</p> <code>'My Tools'</code> <code>height</code> <code>str</code> <p>Height of the header. Defaults to \"40px\".</p> <code>'40px'</code> <code>expanded</code> <code>bool</code> <p>Whether the panel is expanded by default. Defaults to True.</p> <code>True</code> <code>*args</code> <code>Any</code> <p>Additional positional arguments for the parent class.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the parent class.</p> <code>{}</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def __init__(\n    self,\n    widget: Optional[Union[widgets.Widget, List[widgets.Widget]]] = None,\n    widget_icon: str = \"mdi-tools\",\n    close_icon: str = \"mdi-close\",\n    label: str = \"My Tools\",\n    background_color: str = \"#f5f5f5\",\n    height: str = \"40px\",\n    expanded: bool = True,\n    host_map: Optional[Any] = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Initializes the CustomWidget.\n\n    Args:\n        widget (Optional[Union[widgets.Widget, List[widgets.Widget]]]): Initial widget(s) to display in the content box.\n        widget_icon (str): Icon for the header. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n        close_icon (str): Icon for the close button. See https://pictogrammers.github.io/@mdi/font/2.0.46/ for available icons.\n        background_color (str): Background color of the header. Defaults to \"#f5f5f5\".\n        label (str): Text label for the header. Defaults to \"My Tools\".\n        height (str): Height of the header. Defaults to \"40px\".\n        expanded (bool): Whether the panel is expanded by default. Defaults to True.\n        *args (Any): Additional positional arguments for the parent class.\n        **kwargs (Any): Additional keyword arguments for the parent class.\n    \"\"\"\n    # Wrap content in a mutable VBox\n    self.content_box = widgets.VBox()\n    self.host_map = host_map\n    if widget:\n        if isinstance(widget, (list, tuple)):\n            self.content_box.children = widget\n        else:\n            self.content_box.children = [widget]\n\n    # Close icon button\n    close_btn = v.Btn(\n        icon=True,\n        small=True,\n        class_=\"ma-0\",\n        style_=\"min-width: 24px; width: 24px;\",\n        children=[v.Icon(children=[close_icon])],\n    )\n    close_btn.on_event(\"click\", self._handle_close)\n\n    header = v.ExpansionPanelHeader(\n        style_=f\"height: {height}; min-height: {height}; background-color: {background_color};\",\n        children=[\n            v.Row(\n                align=\"center\",\n                class_=\"d-flex flex-grow-1 align-center\",\n                children=[\n                    v.Icon(children=[widget_icon], class_=\"ml-1\"),\n                    v.Spacer(),  # push title to center\n                    v.Html(tag=\"span\", children=[label], class_=\"text-subtitle-2\"),\n                    v.Spacer(),  # push close to right\n                    close_btn,\n                    v.Spacer(),\n                ],\n            )\n        ],\n    )\n\n    self.panel = v.ExpansionPanel(\n        children=[\n            header,\n            v.ExpansionPanelContent(children=[self.content_box]),\n        ]\n    )\n\n    super().__init__(\n        children=[self.panel],\n        v_model=[0] if expanded else [],\n        multiple=True,\n        *args,\n        **kwargs,\n    )\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.CustomWidget.add_widget","title":"<code>add_widget(self, widget)</code>","text":"<p>Adds a widget to the content box.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>widgets.Widget</code> <p>The widget to add to the content box.</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def add_widget(self, widget: widgets.Widget) -&gt; None:\n    \"\"\"\n    Adds a widget to the content box.\n\n    Args:\n        widget (widgets.Widget): The widget to add to the content box.\n    \"\"\"\n    self.content_box.children += (widget,)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.CustomWidget.remove_widget","title":"<code>remove_widget(self, widget)</code>","text":"<p>Removes a widget from the content box.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>widgets.Widget</code> <p>The widget to remove from the content box.</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def remove_widget(self, widget: widgets.Widget) -&gt; None:\n    \"\"\"\n    Removes a widget from the content box.\n\n    Args:\n        widget (widgets.Widget): The widget to remove from the content box.\n    \"\"\"\n    self.content_box.children = tuple(\n        w for w in self.content_box.children if w != widget\n    )\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.CustomWidget.set_widgets","title":"<code>set_widgets(self, widgets_list)</code>","text":"<p>Replaces all widgets in the content box.</p> <p>Parameters:</p> Name Type Description Default <code>widgets_list</code> <code>List[widgets.Widget]</code> <p>A list of widgets to set as the content of the content box.</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def set_widgets(self, widgets_list: List[widgets.Widget]) -&gt; None:\n    \"\"\"\n    Replaces all widgets in the content box.\n\n    Args:\n        widgets_list (List[widgets.Widget]): A list of widgets to set as the content of the content box.\n    \"\"\"\n    self.content_box.children = widgets_list\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget","title":"<code> LayerManagerWidget            (ExpansionPanels)         </code>","text":"<p>A widget for managing map layers.</p> <p>This widget provides controls for toggling the visibility, adjusting the opacity, and removing layers from a map. It also includes a master toggle to turn all layers on or off.</p> <p>Attributes:</p> Name Type Description <code>m</code> <code>Map</code> <p>The map object to manage layers for.</p> <code>layer_items</code> <code>Dict[str, Dict[str, widgets.Widget]]</code> <p>A dictionary mapping layer names to their corresponding control widgets (checkbox and slider).</p> <code>_building</code> <code>bool</code> <p>A flag indicating whether the widget is currently being built.</p> <code>master_toggle</code> <code>widgets.Checkbox</code> <p>A checkbox to toggle all layers on or off.</p> <code>layers_box</code> <code>widgets.VBox</code> <p>A container for individual layer controls.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>class LayerManagerWidget(v.ExpansionPanels):\n    \"\"\"\n    A widget for managing map layers.\n\n    This widget provides controls for toggling the visibility, adjusting the opacity,\n    and removing layers from a map. It also includes a master toggle to turn all layers\n    on or off.\n\n    Attributes:\n        m (Map): The map object to manage layers for.\n        layer_items (Dict[str, Dict[str, widgets.Widget]]): A dictionary mapping layer names\n            to their corresponding control widgets (checkbox and slider).\n        _building (bool): A flag indicating whether the widget is currently being built.\n        master_toggle (widgets.Checkbox): A checkbox to toggle all layers on or off.\n        layers_box (widgets.VBox): A container for individual layer controls.\n    \"\"\"\n\n    def __init__(\n        self,\n        m: Any,\n        expanded: bool = True,\n        height: str = \"40px\",\n        layer_icon: str = \"mdi-layers\",\n        close_icon: str = \"mdi-close\",\n        label=\"Layers\",\n        background_color: str = \"#f5f5f5\",\n        groups: dict = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Initializes the LayerManagerWidget.\n\n        Args:\n            m (Any): The map object to manage layers for.\n            expanded (bool): Whether the expansion panel should be expanded by default. Defaults to True.\n            height (str): The height of the header. Defaults to \"40px\".\n            layer_icon (str): The icon for the layer manager. Defaults to \"mdi-layers\".\n            close_icon (str): The icon for the close button. Defaults to \"mdi-close\".\n            label (str): The label for the layer manager. Defaults to \"Layers\".\n            background_color (str): The background color of the header. Defaults to \"#f5f5f5\".\n            groups (dict): A dictionary of layer groups, such as {\"Group 1\": [\"layer1\", \"layer2\"],\n                \"Group 2\": [\"layer3\", \"layer4\"]}. A group layer toggle will be created for each group.\n                Defaults to None.\n            *args (Any): Additional positional arguments for the parent class.\n            **kwargs (Any): Additional keyword arguments for the parent class.\n        \"\"\"\n        self.m = m\n        self.layer_items = {}\n        self.groups = groups\n        self._building = False\n\n        # Master toggle\n        style = {\"description_width\": \"initial\"}\n        self.master_toggle = widgets.Checkbox(\n            value=True, description=\"All layers on/off\", style=style\n        )\n        self.master_toggle.observe(self.toggle_all_layers, names=\"value\")\n\n        self.group_toggles = widgets.VBox()\n        if isinstance(groups, dict):\n            for group_name, group_layers in groups.items():\n                group_toggle = widgets.Checkbox(\n                    value=True,\n                    description=f\"{group_name} group layers on/off\",\n                    style=style,\n                )\n                group_toggle.observe(self.toggle_group_layers, names=\"value\")\n                self.group_toggles.children += (group_toggle,)\n\n        # Build individual layer rows\n        self.layers_box = widgets.VBox()\n        self.build_layer_controls()\n\n        # Close icon button\n        close_btn = v.Btn(\n            icon=True,\n            small=True,\n            class_=\"ma-0\",\n            style_=\"min-width: 24px; width: 24px;\",\n            children=[v.Icon(children=[close_icon])],\n        )\n        close_btn.on_event(\"click\", self._handle_close)\n\n        header = v.ExpansionPanelHeader(\n            style_=f\"height: {height}; min-height: {height}; background-color: {background_color};\",\n            children=[\n                v.Row(\n                    align=\"center\",\n                    class_=\"d-flex flex-grow-1 align-center\",\n                    children=[\n                        v.Icon(children=[layer_icon], class_=\"ml-1\"),\n                        v.Spacer(),  # push title to center\n                        v.Html(tag=\"span\", children=[label], class_=\"text-subtitle-2\"),\n                        v.Spacer(),  # push close to right\n                        close_btn,\n                        v.Spacer(),\n                    ],\n                )\n            ],\n        )\n\n        panel = v.ExpansionPanel(\n            children=[\n                header,\n                v.ExpansionPanelContent(\n                    children=[\n                        widgets.VBox(\n                            [self.master_toggle, self.group_toggles, self.layers_box]\n                        )\n                    ]\n                ),\n            ]\n        )\n\n        if expanded:\n            super().__init__(\n                children=[panel], v_model=[0], multiple=True, *args, **kwargs\n            )\n        else:\n            super().__init__(children=[panel], multiple=True, *args, **kwargs)\n\n    def _handle_close(self, widget=None, event=None, data=None):\n        \"\"\"Calls the on_close callback if provided.\"\"\"\n\n        self.m.remove_from_sidebar(self)\n        # self.close()\n\n    def build_layer_controls(self) -&gt; None:\n        \"\"\"\n        Builds the controls for individual layers.\n\n        This method creates checkboxes for toggling visibility, sliders for adjusting opacity,\n        and buttons for removing layers.\n        \"\"\"\n        self._building = True\n        self.layer_items.clear()\n        rows = []\n\n        style = {\"description_width\": \"initial\"}\n        padding = \"0px 5px 0px 5px\"\n\n        for name, info in list(self.m.layer_dict.items()):\n            # if name == \"Background\":\n            #     continue\n\n            visible = info.get(\"visible\", True)\n            opacity = info.get(\"opacity\", 1.0)\n\n            checkbox = widgets.Checkbox(value=visible, description=name, style=style)\n            checkbox.layout.max_width = \"150px\"\n\n            slider = widgets.FloatSlider(\n                value=opacity,\n                min=0,\n                max=1,\n                step=0.01,\n                readout=False,\n                tooltip=\"Change layer opacity\",\n                layout=widgets.Layout(width=\"150px\", padding=padding),\n            )\n\n            settings = widgets.Button(\n                icon=\"gear\",\n                tooltip=\"Change layer style\",\n                layout=widgets.Layout(width=\"38px\", height=\"25px\", padding=padding),\n            )\n\n            remove = widgets.Button(\n                icon=\"times\",\n                tooltip=\"Remove layer\",\n                layout=widgets.Layout(width=\"38px\", height=\"25px\", padding=padding),\n            )\n\n            def on_visibility_change(change, layer_name=name):\n                self.set_layer_visibility(layer_name, change[\"new\"])\n\n            def on_opacity_change(change, layer_name=name):\n                self.set_layer_opacity(layer_name, change[\"new\"])\n\n            def on_remove_clicked(btn, layer_name=name, row_ref=None):\n                if layer_name == \"Background\":\n                    for layer in self.m.get_style_layers():\n                        self.m.add_call(\"removeLayer\", layer[\"id\"])\n                else:\n                    self.m.remove_layer(layer_name)\n                if row_ref in self.layers_box.children:\n                    self.layers_box.children = tuple(\n                        c for c in self.layers_box.children if c != row_ref\n                    )\n                self.layer_items.pop(layer_name, None)\n                if f\"Style {layer_name}\" in self.m.sidebar_widgets:\n                    self.m.remove_from_sidebar(name=f\"Style {layer_name}\")\n\n            def on_settings_clicked(btn, layer_name=name):\n                style_widget = LayerStyleWidget(self.m.layer_dict[layer_name], self.m)\n                self.m.add_to_sidebar(\n                    style_widget,\n                    widget_icon=\"mdi-palette\",\n                    label=f\"Style {layer_name}\",\n                )\n\n            checkbox.observe(on_visibility_change, names=\"value\")\n            slider.observe(on_opacity_change, names=\"value\")\n\n            row = widgets.HBox(\n                [checkbox, slider, settings, remove], layout=widgets.Layout()\n            )\n\n            remove.on_click(\n                lambda btn, r=row, n=name: on_remove_clicked(\n                    btn, layer_name=n, row_ref=r\n                )\n            )\n\n            settings.on_click(\n                lambda btn, n=name: on_settings_clicked(btn, layer_name=n)\n            )\n\n            rows.append(row)\n            self.layer_items[name] = {\"checkbox\": checkbox, \"slider\": slider}\n\n        self.layers_box.children = rows\n        self._building = False\n\n    def toggle_all_layers(self, change: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Toggles the visibility of all layers.\n\n        Args:\n            change (Dict[str, Any]): The change event from the master toggle checkbox.\n        \"\"\"\n        if self._building:\n            return\n        for name, controls in self.layer_items.items():\n            controls[\"checkbox\"].value = change[\"new\"]\n\n        for widget in self.group_toggles.children:\n            widget.value = change[\"new\"]\n\n    def toggle_group_layers(self, change: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Toggles the visibility of a group of layers.\n        \"\"\"\n        if self._building:\n            return\n        group_name = change[\"owner\"].description.split(\" \")[0]\n        group_layers = self.groups[group_name]\n        for layer_name in group_layers:\n            self.set_layer_visibility(layer_name, change[\"new\"])\n        self.refresh()\n\n    def set_layer_visibility(self, name: str, visible: bool) -&gt; None:\n        \"\"\"\n        Sets the visibility of a specific layer.\n\n        Args:\n            name (str): The name of the layer.\n            visible (bool): Whether the layer should be visible.\n        \"\"\"\n        self.m.set_visibility(name, visible)\n\n    def set_layer_opacity(self, name: str, opacity: float) -&gt; None:\n        \"\"\"\n        Sets the opacity of a specific layer.\n\n        Args:\n            name (str): The name of the layer.\n            opacity (float): The opacity value (0 to 1).\n        \"\"\"\n        self.m.set_opacity(name, opacity)\n\n    def refresh(self) -&gt; None:\n        \"\"\"\n        Rebuilds the UI to reflect the current layers in the map.\n        \"\"\"\n        self.build_layer_controls()\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.__init__","title":"<code>__init__(self, m, expanded=True, height='40px', layer_icon='mdi-layers', close_icon='mdi-close', label='Layers', background_color='#f5f5f5', groups=None, *args, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the LayerManagerWidget.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>Any</code> <p>The map object to manage layers for.</p> required <code>expanded</code> <code>bool</code> <p>Whether the expansion panel should be expanded by default. Defaults to True.</p> <code>True</code> <code>height</code> <code>str</code> <p>The height of the header. Defaults to \"40px\".</p> <code>'40px'</code> <code>layer_icon</code> <code>str</code> <p>The icon for the layer manager. Defaults to \"mdi-layers\".</p> <code>'mdi-layers'</code> <code>close_icon</code> <code>str</code> <p>The icon for the close button. Defaults to \"mdi-close\".</p> <code>'mdi-close'</code> <code>label</code> <code>str</code> <p>The label for the layer manager. Defaults to \"Layers\".</p> <code>'Layers'</code> <code>background_color</code> <code>str</code> <p>The background color of the header. Defaults to \"#f5f5f5\".</p> <code>'#f5f5f5'</code> <code>groups</code> <code>dict</code> <p>A dictionary of layer groups, such as {\"Group 1\": [\"layer1\", \"layer2\"], \"Group 2\": [\"layer3\", \"layer4\"]}. A group layer toggle will be created for each group. Defaults to None.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>Additional positional arguments for the parent class.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the parent class.</p> <code>{}</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def __init__(\n    self,\n    m: Any,\n    expanded: bool = True,\n    height: str = \"40px\",\n    layer_icon: str = \"mdi-layers\",\n    close_icon: str = \"mdi-close\",\n    label=\"Layers\",\n    background_color: str = \"#f5f5f5\",\n    groups: dict = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Initializes the LayerManagerWidget.\n\n    Args:\n        m (Any): The map object to manage layers for.\n        expanded (bool): Whether the expansion panel should be expanded by default. Defaults to True.\n        height (str): The height of the header. Defaults to \"40px\".\n        layer_icon (str): The icon for the layer manager. Defaults to \"mdi-layers\".\n        close_icon (str): The icon for the close button. Defaults to \"mdi-close\".\n        label (str): The label for the layer manager. Defaults to \"Layers\".\n        background_color (str): The background color of the header. Defaults to \"#f5f5f5\".\n        groups (dict): A dictionary of layer groups, such as {\"Group 1\": [\"layer1\", \"layer2\"],\n            \"Group 2\": [\"layer3\", \"layer4\"]}. A group layer toggle will be created for each group.\n            Defaults to None.\n        *args (Any): Additional positional arguments for the parent class.\n        **kwargs (Any): Additional keyword arguments for the parent class.\n    \"\"\"\n    self.m = m\n    self.layer_items = {}\n    self.groups = groups\n    self._building = False\n\n    # Master toggle\n    style = {\"description_width\": \"initial\"}\n    self.master_toggle = widgets.Checkbox(\n        value=True, description=\"All layers on/off\", style=style\n    )\n    self.master_toggle.observe(self.toggle_all_layers, names=\"value\")\n\n    self.group_toggles = widgets.VBox()\n    if isinstance(groups, dict):\n        for group_name, group_layers in groups.items():\n            group_toggle = widgets.Checkbox(\n                value=True,\n                description=f\"{group_name} group layers on/off\",\n                style=style,\n            )\n            group_toggle.observe(self.toggle_group_layers, names=\"value\")\n            self.group_toggles.children += (group_toggle,)\n\n    # Build individual layer rows\n    self.layers_box = widgets.VBox()\n    self.build_layer_controls()\n\n    # Close icon button\n    close_btn = v.Btn(\n        icon=True,\n        small=True,\n        class_=\"ma-0\",\n        style_=\"min-width: 24px; width: 24px;\",\n        children=[v.Icon(children=[close_icon])],\n    )\n    close_btn.on_event(\"click\", self._handle_close)\n\n    header = v.ExpansionPanelHeader(\n        style_=f\"height: {height}; min-height: {height}; background-color: {background_color};\",\n        children=[\n            v.Row(\n                align=\"center\",\n                class_=\"d-flex flex-grow-1 align-center\",\n                children=[\n                    v.Icon(children=[layer_icon], class_=\"ml-1\"),\n                    v.Spacer(),  # push title to center\n                    v.Html(tag=\"span\", children=[label], class_=\"text-subtitle-2\"),\n                    v.Spacer(),  # push close to right\n                    close_btn,\n                    v.Spacer(),\n                ],\n            )\n        ],\n    )\n\n    panel = v.ExpansionPanel(\n        children=[\n            header,\n            v.ExpansionPanelContent(\n                children=[\n                    widgets.VBox(\n                        [self.master_toggle, self.group_toggles, self.layers_box]\n                    )\n                ]\n            ),\n        ]\n    )\n\n    if expanded:\n        super().__init__(\n            children=[panel], v_model=[0], multiple=True, *args, **kwargs\n        )\n    else:\n        super().__init__(children=[panel], multiple=True, *args, **kwargs)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.build_layer_controls","title":"<code>build_layer_controls(self)</code>","text":"<p>Builds the controls for individual layers.</p> <p>This method creates checkboxes for toggling visibility, sliders for adjusting opacity, and buttons for removing layers.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def build_layer_controls(self) -&gt; None:\n    \"\"\"\n    Builds the controls for individual layers.\n\n    This method creates checkboxes for toggling visibility, sliders for adjusting opacity,\n    and buttons for removing layers.\n    \"\"\"\n    self._building = True\n    self.layer_items.clear()\n    rows = []\n\n    style = {\"description_width\": \"initial\"}\n    padding = \"0px 5px 0px 5px\"\n\n    for name, info in list(self.m.layer_dict.items()):\n        # if name == \"Background\":\n        #     continue\n\n        visible = info.get(\"visible\", True)\n        opacity = info.get(\"opacity\", 1.0)\n\n        checkbox = widgets.Checkbox(value=visible, description=name, style=style)\n        checkbox.layout.max_width = \"150px\"\n\n        slider = widgets.FloatSlider(\n            value=opacity,\n            min=0,\n            max=1,\n            step=0.01,\n            readout=False,\n            tooltip=\"Change layer opacity\",\n            layout=widgets.Layout(width=\"150px\", padding=padding),\n        )\n\n        settings = widgets.Button(\n            icon=\"gear\",\n            tooltip=\"Change layer style\",\n            layout=widgets.Layout(width=\"38px\", height=\"25px\", padding=padding),\n        )\n\n        remove = widgets.Button(\n            icon=\"times\",\n            tooltip=\"Remove layer\",\n            layout=widgets.Layout(width=\"38px\", height=\"25px\", padding=padding),\n        )\n\n        def on_visibility_change(change, layer_name=name):\n            self.set_layer_visibility(layer_name, change[\"new\"])\n\n        def on_opacity_change(change, layer_name=name):\n            self.set_layer_opacity(layer_name, change[\"new\"])\n\n        def on_remove_clicked(btn, layer_name=name, row_ref=None):\n            if layer_name == \"Background\":\n                for layer in self.m.get_style_layers():\n                    self.m.add_call(\"removeLayer\", layer[\"id\"])\n            else:\n                self.m.remove_layer(layer_name)\n            if row_ref in self.layers_box.children:\n                self.layers_box.children = tuple(\n                    c for c in self.layers_box.children if c != row_ref\n                )\n            self.layer_items.pop(layer_name, None)\n            if f\"Style {layer_name}\" in self.m.sidebar_widgets:\n                self.m.remove_from_sidebar(name=f\"Style {layer_name}\")\n\n        def on_settings_clicked(btn, layer_name=name):\n            style_widget = LayerStyleWidget(self.m.layer_dict[layer_name], self.m)\n            self.m.add_to_sidebar(\n                style_widget,\n                widget_icon=\"mdi-palette\",\n                label=f\"Style {layer_name}\",\n            )\n\n        checkbox.observe(on_visibility_change, names=\"value\")\n        slider.observe(on_opacity_change, names=\"value\")\n\n        row = widgets.HBox(\n            [checkbox, slider, settings, remove], layout=widgets.Layout()\n        )\n\n        remove.on_click(\n            lambda btn, r=row, n=name: on_remove_clicked(\n                btn, layer_name=n, row_ref=r\n            )\n        )\n\n        settings.on_click(\n            lambda btn, n=name: on_settings_clicked(btn, layer_name=n)\n        )\n\n        rows.append(row)\n        self.layer_items[name] = {\"checkbox\": checkbox, \"slider\": slider}\n\n    self.layers_box.children = rows\n    self._building = False\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.refresh","title":"<code>refresh(self)</code>","text":"<p>Rebuilds the UI to reflect the current layers in the map.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def refresh(self) -&gt; None:\n    \"\"\"\n    Rebuilds the UI to reflect the current layers in the map.\n    \"\"\"\n    self.build_layer_controls()\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.set_layer_opacity","title":"<code>set_layer_opacity(self, name, opacity)</code>","text":"<p>Sets the opacity of a specific layer.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the layer.</p> required <code>opacity</code> <code>float</code> <p>The opacity value (0 to 1).</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def set_layer_opacity(self, name: str, opacity: float) -&gt; None:\n    \"\"\"\n    Sets the opacity of a specific layer.\n\n    Args:\n        name (str): The name of the layer.\n        opacity (float): The opacity value (0 to 1).\n    \"\"\"\n    self.m.set_opacity(name, opacity)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.set_layer_visibility","title":"<code>set_layer_visibility(self, name, visible)</code>","text":"<p>Sets the visibility of a specific layer.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the layer.</p> required <code>visible</code> <code>bool</code> <p>Whether the layer should be visible.</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def set_layer_visibility(self, name: str, visible: bool) -&gt; None:\n    \"\"\"\n    Sets the visibility of a specific layer.\n\n    Args:\n        name (str): The name of the layer.\n        visible (bool): Whether the layer should be visible.\n    \"\"\"\n    self.m.set_visibility(name, visible)\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.toggle_all_layers","title":"<code>toggle_all_layers(self, change)</code>","text":"<p>Toggles the visibility of all layers.</p> <p>Parameters:</p> Name Type Description Default <code>change</code> <code>Dict[str, Any]</code> <p>The change event from the master toggle checkbox.</p> required Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def toggle_all_layers(self, change: Dict[str, Any]) -&gt; None:\n    \"\"\"\n    Toggles the visibility of all layers.\n\n    Args:\n        change (Dict[str, Any]): The change event from the master toggle checkbox.\n    \"\"\"\n    if self._building:\n        return\n    for name, controls in self.layer_items.items():\n        controls[\"checkbox\"].value = change[\"new\"]\n\n    for widget in self.group_toggles.children:\n        widget.value = change[\"new\"]\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerManagerWidget.toggle_group_layers","title":"<code>toggle_group_layers(self, change)</code>","text":"<p>Toggles the visibility of a group of layers.</p> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>def toggle_group_layers(self, change: Dict[str, Any]) -&gt; None:\n    \"\"\"\n    Toggles the visibility of a group of layers.\n    \"\"\"\n    if self._building:\n        return\n    group_name = change[\"owner\"].description.split(\" \")[0]\n    group_layers = self.groups[group_name]\n    for layer_name in group_layers:\n        self.set_layer_visibility(layer_name, change[\"new\"])\n    self.refresh()\n</code></pre>"},{"location":"maplibre_widgets/#anymap.maplibre_widgets.LayerStyleWidget","title":"<code> LayerStyleWidget            (VBox)         </code>","text":"<p>A widget for styling map layers interactively.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>dict</code> <p>The layer to style.</p> required <code>map_widget</code> <code>ipyleaflet.Map or folium.Map</code> <p>The map widget to update.</p> required <code>widget_width</code> <code>str</code> <p>The width of the widget. Defaults to \"270px\".</p> <code>'270px'</code> <code>label_width</code> <code>str</code> <p>The width of the label. Defaults to \"130px\".</p> <code>'130px'</code> Source code in <code>anymap/maplibre_widgets.py</code> <pre><code>class LayerStyleWidget(widgets.VBox):\n    \"\"\"\n    A widget for styling map layers interactively.\n\n    Args:\n        layer (dict): The layer to style.\n        map_widget (ipyleaflet.Map or folium.Map): The map widget to update.\n        widget_width (str, optional): The width of the widget. Defaults to \"270px\".\n        label_width (str, optional): The width of the label. Defaults to \"130px\".\n    \"\"\"\n\n    def __init__(\n        self,\n        layer: dict,\n        map_widget: \"MapLibreMap\",\n        widget_width: str = \"270px\",\n        label_width: str = \"130px\",\n    ):\n        super().__init__()\n        self.layer = layer\n        self.map = map_widget\n        self.layer_type = self._get_layer_type()\n        self.layer_id = layer[\"layer\"].id\n        self.layer_paint = layer[\"layer\"].paint\n        self.original_style = self._get_current_style()\n        self.widget_width = widget_width\n        self.label_width = label_width\n\n        # Create the styling widgets based on layer type\n        self.style_widgets = self._create_style_widgets()\n\n        # Create buttons\n        self.apply_btn = widgets.Button(\n            description=\"Apply\",\n            button_style=\"primary\",\n            tooltip=\"Apply style changes\",\n            layout=widgets.Layout(width=\"auto\"),\n        )\n\n        self.reset_btn = widgets.Button(\n            description=\"Reset\",\n            button_style=\"warning\",\n            tooltip=\"Reset to original style\",\n            layout=widgets.Layout(width=\"auto\"),\n        )\n\n        self.close_btn = widgets.Button(\n            description=\"Close\",\n            button_style=\"\",\n            tooltip=\"Close the widget\",\n            layout=widgets.Layout(width=\"auto\"),\n        )\n\n        self.output_widget = widgets.Output()\n\n        # Button container\n        self.button_box = widgets.HBox([self.apply_btn, self.reset_btn, self.close_btn])\n\n        # Add button callbacks\n        self.apply_btn.on_click(self._apply_style)\n        self.reset_btn.on_click(self._reset_style)\n        self.close_btn.on_click(self._close_widget)\n\n        # Layout\n        self.layout = widgets.Layout(width=\"300px\", padding=\"10px\")\n\n        # Combine all widgets\n        self.children = [*self.style_widgets, self.button_box, self.output_widget]\n\n    def _get_layer_type(self) -&gt; str:\n        \"\"\"Determine the layer type.\"\"\"\n        return self.layer[\"type\"]\n\n    def _get_current_style(self) -&gt; dict:\n        \"\"\"Get the current layer style.\"\"\"\n        return self.layer_paint\n\n    def _create_style_widgets(self) -&gt; List[widgets.Widget]:\n        \"\"\"Create style widgets based on layer type.\"\"\"\n        widgets_list = []\n\n        if self.layer_type == \"circle\":\n            widgets_list.extend(\n                [\n                    self._create_color_picker(\n                        \"Circle Color\", \"circle-color\", \"#3388ff\"\n                    ),\n                    self._create_number_slider(\n                        \"Circle Radius\", \"circle-radius\", 6, 1, 20\n                    ),\n                    self._create_number_slider(\n                        \"Circle Opacity\", \"circle-opacity\", 0.8, 0, 1, 0.05\n                    ),\n                    self._create_number_slider(\n                        \"Circle Blur\", \"circle-blur\", 0, 0, 1, 0.05\n                    ),\n                    self._create_color_picker(\n                        \"Circle Stroke Color\", \"circle-stroke-color\", \"#3388ff\"\n                    ),\n                    self._create_number_slider(\n                        \"Circle Stroke Width\", \"circle-stroke-width\", 1, 0, 5\n                    ),\n                    self._create_number_slider(\n                        \"Circle Stroke Opacity\",\n                        \"circle-stroke-opacity\",\n                        1.0,\n                        0,\n                        1,\n                        0.05,\n                    ),\n                ]\n            )\n\n        elif self.layer_type == \"line\":\n            widgets_list.extend(\n                [\n                    self._create_color_picker(\"Line Color\", \"line-color\", \"#3388ff\"),\n                    self._create_number_slider(\"Line Width\", \"line-width\", 2, 1, 10),\n                    self._create_number_slider(\n                        \"Line Opacity\", \"line-opacity\", 1.0, 0, 1, 0.05\n                    ),\n                    self._create_number_slider(\"Line Blur\", \"line-blur\", 0, 0, 1, 0.05),\n                    self._create_dropdown(\n                        \"Line Style\",\n                        \"line-dasharray\",\n                        [\n                            (\"Solid\", [1]),\n                            (\"Dashed\", [2, 4]),\n                            (\"Dotted\", [1, 4]),\n                            (\"Dash-dot\", [2, 4, 8, 4]),\n                        ],\n                    ),\n                ]\n            )\n\n        elif self.layer_type == \"fill\":\n            widgets_list.extend(\n                [\n                    self._create_color_picker(\"Fill Color\", \"fill-color\", \"#3388ff\"),\n                    self._create_number_slider(\n                        \"Fill Opacity\", \"fill-opacity\", 0.2, 0, 1, 0.05\n                    ),\n                    self._create_color_picker(\n                        \"Fill Outline Color\", \"fill-outline-color\", \"#3388ff\"\n                    ),\n                ]\n            )\n        else:\n            widgets_list.extend(\n                [widgets.HTML(value=f\"Layer type {self.layer_type} is not supported.\")]\n            )\n\n        return widgets_list\n\n    def _create_color_picker(\n        self, description: str, property_name: str, default_color: str\n    ) -&gt; widgets.ColorPicker:\n        \"\"\"Create a color picker widget.\"\"\"\n        return widgets.ColorPicker(\n            description=description,\n            value=self.original_style.get(property_name, default_color),\n            layout=widgets.Layout(\n                width=self.widget_width, description_width=self.label_width\n            ),\n            style={\"description_width\": \"initial\"},\n        )\n\n    def _create_number_slider(\n        self,\n        description: str,\n        property_name: str,\n        default_value: float,\n        min_val: float,\n        max_val: float,\n        step: float = 1,\n    ) -&gt; widgets.FloatSlider:\n        \"\"\"Create a number slider widget.\"\"\"\n        return widgets.FloatSlider(\n            description=description,\n            value=self.original_style.get(property_name, default_value),\n            min=min_val,\n            max=max_val,\n            step=step,\n            layout=widgets.Layout(\n                width=self.widget_width, description_width=self.label_width\n            ),\n            style={\"description_width\": \"initial\"},\n            continuous_update=False,\n        )\n\n    def _create_dropdown(\n        self,\n        description: str,\n        property_name: str,\n        options: List[Tuple[str, List[float]]],\n    ) -&gt; widgets.Dropdown:\n        \"\"\"Create a dropdown widget.\"\"\"\n        return widgets.Dropdown(\n            description=description,\n            options=options,\n            value=self.original_style.get(property_name, options[0][1]),\n            layout=widgets.Layout(\n                width=self.widget_width, description_width=self.label_width\n            ),\n            style={\"description_width\": \"initial\"},\n        )\n\n    def _apply_style(self, _) -&gt; None:\n        \"\"\"Apply the style changes to the layer.\"\"\"\n        new_style = {}\n\n        for widget in self.style_widgets:\n            if isinstance(widget, widgets.ColorPicker):\n                property_name = widget.description.lower().replace(\" \", \"-\")\n                new_style[property_name] = widget.value\n            elif isinstance(widget, widgets.FloatSlider):\n                property_name = widget.description.lower().replace(\" \", \"-\")\n                new_style[property_name] = widget.value\n            elif isinstance(widget, widgets.Dropdown):\n                property_name = widget.description.lower().replace(\" \", \"-\")\n                new_style[property_name] = widget.value\n\n        with self.output_widget:\n            try:\n                for key, value in new_style.items():\n                    if key == \"line-style\":\n                        key = \"line-dasharray\"\n                    self.map.set_paint_property(self.layer[\"layer\"].id, key, value)\n            except Exception as e:\n                print(e)\n\n        self.map.layer_manager.refresh()\n\n    def _reset_style(self, _) -&gt; None:\n        \"\"\"Reset to original style.\"\"\"\n\n        # Update widgets to reflect original style\n        for widget in self.style_widgets:\n            if isinstance(\n                widget, (widgets.ColorPicker, widgets.FloatSlider, widgets.Dropdown)\n            ):\n                property_name = widget.description.lower().replace(\" \", \"-\")\n                if property_name in self.original_style:\n                    widget.value = self.original_style[property_name]\n\n    def _close_widget(self, _) -&gt; None:\n        \"\"\"Close the widget.\"\"\"\n        # self.close()\n        self.map.remove_from_sidebar(name=f\"Style {self.layer['layer'].id}\")\n</code></pre>"},{"location":"openlayers/","title":"openlayers module","text":"<p>OpenLayers implementation of the map widget.</p>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap","title":"<code> OpenLayersMap            (MapWidget)         </code>","text":"<p>OpenLayers implementation of the map widget.</p> Source code in <code>anymap/openlayers.py</code> <pre><code>class OpenLayersMap(MapWidget):\n    \"\"\"OpenLayers implementation of the map widget.\"\"\"\n\n    # OpenLayers-specific traits\n    tile_layer = traitlets.Unicode(\"OSM\").tag(sync=True)\n    projection = traitlets.Unicode(\"EPSG:3857\").tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_openlayers\n    _css = _css_openlayers\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        tile_layer: str = \"OSM\",\n        projection: str = \"EPSG:3857\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        **kwargs,\n    ):\n        \"\"\"Initialize OpenLayers map widget.\n\n        Args:\n            center: Map center as [longitude, latitude] (note: OpenLayers uses lon/lat order)\n            zoom: Initial zoom level\n            tile_layer: Tile layer provider name or URL template\n            projection: Map projection (default: EPSG:3857)\n            width: Widget width\n            height: Widget height\n            **kwargs: Additional widget arguments\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            **kwargs,\n        )\n        self.tile_layer = tile_layer\n        self.projection = projection\n\n    def add_tile_layer(\n        self,\n        url_template: str,\n        attribution: str = \"\",\n        layer_id: str = None,\n        **options,\n    ) -&gt; None:\n        \"\"\"Add a tile layer to the map.\n\n        Args:\n            url_template: URL template for the tile layer\n            attribution: Attribution text for the layer\n            layer_id: Unique identifier for the layer\n            **options: Additional layer options\n        \"\"\"\n        if layer_id is None:\n            layer_id = f\"tile_layer_{len(self._layers)}\"\n\n        layer_config = {\n            \"type\": \"tile\",\n            \"url\": url_template,\n            \"attribution\": attribution,\n            **options,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(\n        self,\n        coordinate: List[float],\n        popup: str = \"\",\n        tooltip: str = \"\",\n        icon: Optional[Dict[str, Any]] = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a marker to the map.\n\n        Args:\n            coordinate: Marker position as [longitude, latitude]\n            popup: Popup text\n            tooltip: Tooltip text\n            icon: Icon configuration\n            **options: Additional marker options\n\n        Returns:\n            Marker ID\n        \"\"\"\n        marker_id = f\"marker_{len(self._layers)}\"\n\n        marker_config = {\n            \"type\": \"marker\",\n            \"coordinate\": coordinate,\n            \"popup\": popup,\n            \"tooltip\": tooltip,\n            **options,\n        }\n\n        if icon:\n            marker_config[\"icon\"] = icon\n\n        self.add_layer(marker_id, marker_config)\n        return marker_id\n\n    def add_circle(\n        self,\n        center: List[float],\n        radius: float,\n        color: str = \"blue\",\n        fillColor: str = \"blue\",\n        fillOpacity: float = 0.2,\n        strokeWidth: float = 2,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a circle to the map.\n\n        Args:\n            center: Circle center as [longitude, latitude]\n            radius: Circle radius in meters\n            color: Circle stroke color\n            fillColor: Circle fill color\n            fillOpacity: Circle fill opacity\n            strokeWidth: Circle stroke width\n            **options: Additional circle options\n\n        Returns:\n            Circle ID\n        \"\"\"\n        circle_id = f\"circle_{len(self._layers)}\"\n\n        circle_config = {\n            \"type\": \"circle\",\n            \"center\": center,\n            \"radius\": radius,\n            \"color\": color,\n            \"fillColor\": fillColor,\n            \"fillOpacity\": fillOpacity,\n            \"strokeWidth\": strokeWidth,\n            **options,\n        }\n\n        self.add_layer(circle_id, circle_config)\n        return circle_id\n\n    def add_polygon(\n        self,\n        coordinates: List[List[List[float]]],\n        color: str = \"blue\",\n        fillColor: str = \"blue\",\n        fillOpacity: float = 0.2,\n        strokeWidth: float = 2,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a polygon to the map.\n\n        Args:\n            coordinates: Polygon coordinates as [[[lon, lat], [lon, lat], ...]]\n            color: Polygon stroke color\n            fillColor: Polygon fill color\n            fillOpacity: Polygon fill opacity\n            strokeWidth: Polygon stroke width\n            **options: Additional polygon options\n\n        Returns:\n            Polygon ID\n        \"\"\"\n        polygon_id = f\"polygon_{len(self._layers)}\"\n\n        polygon_config = {\n            \"type\": \"polygon\",\n            \"coordinates\": coordinates,\n            \"color\": color,\n            \"fillColor\": fillColor,\n            \"fillOpacity\": fillOpacity,\n            \"strokeWidth\": strokeWidth,\n            **options,\n        }\n\n        self.add_layer(polygon_id, polygon_config)\n        return polygon_id\n\n    def add_linestring(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"blue\",\n        strokeWidth: float = 3,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a line string to the map.\n\n        Args:\n            coordinates: Line coordinates as [[lon, lat], [lon, lat], ...]\n            color: Line color\n            strokeWidth: Line stroke width\n            **options: Additional line options\n\n        Returns:\n            LineString ID\n        \"\"\"\n        linestring_id = f\"linestring_{len(self._layers)}\"\n\n        linestring_config = {\n            \"type\": \"linestring\",\n            \"coordinates\": coordinates,\n            \"color\": color,\n            \"strokeWidth\": strokeWidth,\n            **options,\n        }\n\n        self.add_layer(linestring_id, linestring_config)\n        return linestring_id\n\n    def add_geojson(\n        self,\n        data: Union[str, Dict[str, Any]],\n        style: Optional[Dict[str, Any]] = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add GeoJSON data to the map.\n\n        Args:\n            data: GeoJSON data as string or dict\n            style: Style configuration\n            **options: Additional GeoJSON options\n\n        Returns:\n            GeoJSON layer ID\n        \"\"\"\n        geojson_id = f\"geojson_{len(self._layers)}\"\n\n        geojson_config = {\n            \"type\": \"geojson\",\n            \"data\": data,\n            **options,\n        }\n\n        if style:\n            geojson_config[\"style\"] = style\n\n        self.add_layer(geojson_id, geojson_config)\n        return geojson_id\n\n    def add_vector_layer(\n        self,\n        features: List[Dict[str, Any]],\n        style: Optional[Dict[str, Any]] = None,\n        layer_id: str = None,\n        **options,\n    ) -&gt; str:\n        \"\"\"Add a vector layer with features.\n\n        Args:\n            features: List of feature objects\n            style: Style configuration for the layer\n            layer_id: Unique identifier for the layer\n            **options: Additional layer options\n\n        Returns:\n            Vector layer ID\n        \"\"\"\n        if layer_id is None:\n            layer_id = f\"vector_{len(self._layers)}\"\n\n        layer_config = {\n            \"type\": \"vector\",\n            \"features\": features,\n            \"style\": style or {},\n            **options,\n        }\n\n        self.add_layer(layer_id, layer_config)\n        return layer_id\n\n    def fit_extent(self, extent: List[float]) -&gt; None:\n        \"\"\"Fit the map view to given extent.\n\n        Args:\n            extent: Extent as [minX, minY, maxX, maxY]\n        \"\"\"\n        self.call_js_method(\"fitExtent\", extent)\n\n    def transform_coordinate(\n        self, coordinate: List[float], from_proj: str, to_proj: str\n    ) -&gt; List[float]:\n        \"\"\"Transform coordinate from one projection to another.\n\n        Args:\n            coordinate: Coordinate as [x, y]\n            from_proj: Source projection\n            to_proj: Target projection\n\n        Returns:\n            Transformed coordinate\n        \"\"\"\n        # This would typically be handled on the JavaScript side\n        self.call_js_method(\"transformCoordinate\", coordinate, from_proj, to_proj)\n        return coordinate  # Placeholder - real transformation happens in JS\n\n    def _generate_html_template(\n        self, map_state: Dict[str, Any], title: str, **kwargs\n    ) -&gt; str:\n        \"\"\"Generate the HTML template with map state for OpenLayers.\"\"\"\n\n        # Get tile layer URL template\n        tile_providers = {\n            \"OSM\": \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"CartoDB.Positron\": \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\",\n            \"CartoDB.DarkMatter\": \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\",\n            \"Stamen.Terrain\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg\",\n            \"Stamen.Watercolor\": \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\",\n        }\n\n        tile_url = tile_providers.get(map_state.get(\"tile_layer\", \"OSM\"))\n        if not tile_url:\n            tile_url = map_state.get(\"tile_layer\", tile_providers[\"OSM\"])\n\n        html_template = f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/ol@v10.6.1/ol.css\"\n          crossorigin=\"\"/&gt;\n    &lt;style&gt;\n        body {{\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n        }}\n        #map {{\n            width: {map_state.get('width', '100%')};\n            height: {map_state.get('height', '600px')};\n        }}\n        .ol-popup {{\n            position: absolute;\n            background-color: white;\n            box-shadow: 0 1px 4px rgba(0,0,0,0.2);\n            padding: 15px;\n            border-radius: 10px;\n            border: 1px solid #cccccc;\n            bottom: 12px;\n            left: -50px;\n            min-width: 280px;\n        }}\n        .ol-popup:after, .ol-popup:before {{\n            top: 100%;\n            border: solid transparent;\n            content: \" \";\n            height: 0;\n            width: 0;\n            position: absolute;\n            pointer-events: none;\n        }}\n        .ol-popup:after {{\n            border-color: rgba(255, 255, 255, 0);\n            border-top-color: white;\n            border-width: 10px;\n            left: 48px;\n            margin-left: -10px;\n        }}\n        .ol-popup:before {{\n            border-color: rgba(204, 204, 204, 0);\n            border-top-color: #cccccc;\n            border-width: 11px;\n            left: 48px;\n            margin-left: -11px;\n        }}\n        .ol-popup-closer {{\n            text-decoration: none;\n            position: absolute;\n            top: 2px;\n            right: 8px;\n        }}\n        .ol-popup-closer:after {{\n            content: \"\u2716\";\n        }}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;div id=\"popup\" class=\"ol-popup\"&gt;\n        &lt;a href=\"#\" id=\"popup-closer\" class=\"ol-popup-closer\"&gt;&lt;/a&gt;\n        &lt;div id=\"popup-content\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/ol@v10.6.1/dist/ol.js\"\n            crossorigin=\"\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Import OpenLayers modules\n        const {{Map, View}} = ol;\n        const {{Tile: TileLayer, Vector: VectorLayer}} = ol.layer;\n        const {{OSM, XYZ, Vector: VectorSource}} = ol.source;\n        const {{Feature}} = ol;\n        const {{Point, Circle: CircleGeom, Polygon, LineString}} = ol.geom;\n        const {{Style, Fill, Stroke, Icon, Circle: CircleStyle}} = ol.style;\n        const {{fromLonLat, toLonLat}} = ol.proj;\n        const {{Overlay}} = ol;\n        const {{GeoJSON}} = ol.format;\n\n        // Initialize the map\n        const view = new View({{\n            center: fromLonLat({map_state.get('center', [0, 0])}),\n            zoom: {map_state.get('zoom', 2)},\n            projection: '{map_state.get('projection', 'EPSG:3857')}'\n        }});\n\n        const map = new Map({{\n            target: 'map',\n            view: view\n        }});\n\n        // Add base tile layer\n        let baseSource;\n        if ('{map_state.get('tile_layer', 'OSM')}' === 'OSM') {{\n            baseSource = new OSM();\n        }} else {{\n            baseSource = new XYZ({{\n                url: '{tile_url}',\n                attributions: '\u00a9 Map data providers'\n            }});\n        }}\n        const baseLayer = new TileLayer({{\n            source: baseSource\n        }});\n        map.addLayer(baseLayer);\n\n        // Setup popup\n        const container = document.getElementById('popup');\n        const content = document.getElementById('popup-content');\n        const closer = document.getElementById('popup-closer');\n\n        const overlay = new Overlay({{\n            element: container,\n            autoPan: {{\n                animation: {{\n                    duration: 250,\n                }}\n            }}\n        }});\n        map.addOverlay(overlay);\n\n        closer.onclick = function() {{\n            overlay.setPosition(undefined);\n            closer.blur();\n            return false;\n        }};\n\n        // Add layers\n        const layers = {json.dumps(map_state.get('_layers', {}))};\n        for (const layerId in layers) {{\n            const layer = layers[layerId];\n            let olLayer = null;\n\n            if (layer.type === 'tile') {{\n                olLayer = new TileLayer({{\n                    source: new XYZ({{\n                        url: layer.url,\n                        attributions: layer.attribution || ''\n                    }})\n                }});\n            }} else if (layer.type === 'marker') {{\n                const feature = new Feature({{\n                    geometry: new Point(fromLonLat(layer.coordinate))\n                }});\n\n                if (layer.popup) {{\n                    feature.set('popup', layer.popup);\n                }}\n\n                const vectorSource = new VectorSource({{\n                    features: [feature]\n                }});\n\n                olLayer = new VectorLayer({{\n                    source: vectorSource,\n                    style: new Style({{\n                        image: new CircleStyle({{\n                            radius: 8,\n                            fill: new Fill({{color: 'red'}}),\n                            stroke: new Stroke({{color: 'white', width: 2}})\n                        }})\n                    }})\n                }});\n            }} else if (layer.type === 'circle') {{\n                const feature = new Feature({{\n                    geometry: new CircleGeom(fromLonLat(layer.center), layer.radius)\n                }});\n\n                const vectorSource = new VectorSource({{\n                    features: [feature]\n                }});\n\n                olLayer = new VectorLayer({{\n                    source: vectorSource,\n                    style: new Style({{\n                        fill: new Fill({{\n                            color: layer.fillColor || 'blue',\n                            opacity: layer.fillOpacity || 0.2\n                        }}),\n                        stroke: new Stroke({{\n                            color: layer.color || 'blue',\n                            width: layer.strokeWidth || 2\n                        }})\n                    }})\n                }});\n            }} else if (layer.type === 'polygon') {{\n                const feature = new Feature({{\n                    geometry: new Polygon(layer.coordinates.map(ring =&gt;\n                        ring.map(coord =&gt; fromLonLat(coord))\n                    ))\n                }});\n\n                const vectorSource = new VectorSource({{\n                    features: [feature]\n                }});\n\n                olLayer = new VectorLayer({{\n                    source: vectorSource,\n                    style: new Style({{\n                        fill: new Fill({{\n                            color: layer.fillColor || 'blue',\n                            opacity: layer.fillOpacity || 0.2\n                        }}),\n                        stroke: new Stroke({{\n                            color: layer.color || 'blue',\n                            width: layer.strokeWidth || 2\n                        }})\n                    }})\n                }});\n            }} else if (layer.type === 'linestring') {{\n                const feature = new Feature({{\n                    geometry: new LineString(layer.coordinates.map(coord =&gt; fromLonLat(coord)))\n                }});\n\n                const vectorSource = new VectorSource({{\n                    features: [feature]\n                }});\n\n                olLayer = new VectorLayer({{\n                    source: vectorSource,\n                    style: new Style({{\n                        stroke: new Stroke({{\n                            color: layer.color || 'blue',\n                            width: layer.strokeWidth || 3\n                        }})\n                    }})\n                }});\n            }} else if (layer.type === 'geojson') {{\n                const vectorSource = new VectorSource({{\n                    features: new GeoJSON().readFeatures(layer.data, {{\n                        featureProjection: 'EPSG:3857'\n                    }})\n                }});\n\n                olLayer = new VectorLayer({{\n                    source: vectorSource\n                }});\n            }}\n\n            if (olLayer) {{\n                map.addLayer(olLayer);\n            }}\n        }}\n\n        // Handle map clicks for popups\n        map.on('singleclick', function(evt) {{\n            const feature = map.forEachFeatureAtPixel(evt.pixel, function(feature) {{\n                return feature;\n            }});\n\n            if (feature &amp;&amp; feature.get('popup')) {{\n                const coordinate = evt.coordinate;\n                content.innerHTML = feature.get('popup');\n                overlay.setPosition(coordinate);\n            }} else {{\n                overlay.setPosition(undefined);\n            }}\n        }});\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n        return html_template\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, tile_layer='OSM', projection='EPSG:3857', width='100%', height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initialize OpenLayers map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [longitude, latitude] (note: OpenLayers uses lon/lat order)</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>tile_layer</code> <code>str</code> <p>Tile layer provider name or URL template</p> <code>'OSM'</code> <code>projection</code> <code>str</code> <p>Map projection (default: EPSG:3857)</p> <code>'EPSG:3857'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional widget arguments</p> <code>{}</code> Source code in <code>anymap/openlayers.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    tile_layer: str = \"OSM\",\n    projection: str = \"EPSG:3857\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    **kwargs,\n):\n    \"\"\"Initialize OpenLayers map widget.\n\n    Args:\n        center: Map center as [longitude, latitude] (note: OpenLayers uses lon/lat order)\n        zoom: Initial zoom level\n        tile_layer: Tile layer provider name or URL template\n        projection: Map projection (default: EPSG:3857)\n        width: Widget width\n        height: Widget height\n        **kwargs: Additional widget arguments\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        **kwargs,\n    )\n    self.tile_layer = tile_layer\n    self.projection = projection\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_circle","title":"<code>add_circle(self, center, radius, color='blue', fillColor='blue', fillOpacity=0.2, strokeWidth=2, **options)</code>","text":"<p>Add a circle to the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Circle center as [longitude, latitude]</p> required <code>radius</code> <code>float</code> <p>Circle radius in meters</p> required <code>color</code> <code>str</code> <p>Circle stroke color</p> <code>'blue'</code> <code>fillColor</code> <code>str</code> <p>Circle fill color</p> <code>'blue'</code> <code>fillOpacity</code> <code>float</code> <p>Circle fill opacity</p> <code>0.2</code> <code>strokeWidth</code> <code>float</code> <p>Circle stroke width</p> <code>2</code> <code>**options</code> <p>Additional circle options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Circle ID</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_circle(\n    self,\n    center: List[float],\n    radius: float,\n    color: str = \"blue\",\n    fillColor: str = \"blue\",\n    fillOpacity: float = 0.2,\n    strokeWidth: float = 2,\n    **options,\n) -&gt; str:\n    \"\"\"Add a circle to the map.\n\n    Args:\n        center: Circle center as [longitude, latitude]\n        radius: Circle radius in meters\n        color: Circle stroke color\n        fillColor: Circle fill color\n        fillOpacity: Circle fill opacity\n        strokeWidth: Circle stroke width\n        **options: Additional circle options\n\n    Returns:\n        Circle ID\n    \"\"\"\n    circle_id = f\"circle_{len(self._layers)}\"\n\n    circle_config = {\n        \"type\": \"circle\",\n        \"center\": center,\n        \"radius\": radius,\n        \"color\": color,\n        \"fillColor\": fillColor,\n        \"fillOpacity\": fillOpacity,\n        \"strokeWidth\": strokeWidth,\n        **options,\n    }\n\n    self.add_layer(circle_id, circle_config)\n    return circle_id\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_geojson","title":"<code>add_geojson(self, data, style=None, **options)</code>","text":"<p>Add GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[str, Dict[str, Any]]</code> <p>GeoJSON data as string or dict</p> required <code>style</code> <code>Optional[Dict[str, Any]]</code> <p>Style configuration</p> <code>None</code> <code>**options</code> <p>Additional GeoJSON options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>GeoJSON layer ID</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_geojson(\n    self,\n    data: Union[str, Dict[str, Any]],\n    style: Optional[Dict[str, Any]] = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add GeoJSON data to the map.\n\n    Args:\n        data: GeoJSON data as string or dict\n        style: Style configuration\n        **options: Additional GeoJSON options\n\n    Returns:\n        GeoJSON layer ID\n    \"\"\"\n    geojson_id = f\"geojson_{len(self._layers)}\"\n\n    geojson_config = {\n        \"type\": \"geojson\",\n        \"data\": data,\n        **options,\n    }\n\n    if style:\n        geojson_config[\"style\"] = style\n\n    self.add_layer(geojson_id, geojson_config)\n    return geojson_id\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_linestring","title":"<code>add_linestring(self, coordinates, color='blue', strokeWidth=3, **options)</code>","text":"<p>Add a line string to the map.</p> <p>Parameters:</p> Name Type Description Default <code>coordinates</code> <code>List[List[float]]</code> <p>Line coordinates as [[lon, lat], [lon, lat], ...]</p> required <code>color</code> <code>str</code> <p>Line color</p> <code>'blue'</code> <code>strokeWidth</code> <code>float</code> <p>Line stroke width</p> <code>3</code> <code>**options</code> <p>Additional line options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>LineString ID</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_linestring(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"blue\",\n    strokeWidth: float = 3,\n    **options,\n) -&gt; str:\n    \"\"\"Add a line string to the map.\n\n    Args:\n        coordinates: Line coordinates as [[lon, lat], [lon, lat], ...]\n        color: Line color\n        strokeWidth: Line stroke width\n        **options: Additional line options\n\n    Returns:\n        LineString ID\n    \"\"\"\n    linestring_id = f\"linestring_{len(self._layers)}\"\n\n    linestring_config = {\n        \"type\": \"linestring\",\n        \"coordinates\": coordinates,\n        \"color\": color,\n        \"strokeWidth\": strokeWidth,\n        **options,\n    }\n\n    self.add_layer(linestring_id, linestring_config)\n    return linestring_id\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_marker","title":"<code>add_marker(self, coordinate, popup='', tooltip='', icon=None, **options)</code>","text":"<p>Add a marker to the map.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>List[float]</code> <p>Marker position as [longitude, latitude]</p> required <code>popup</code> <code>str</code> <p>Popup text</p> <code>''</code> <code>tooltip</code> <code>str</code> <p>Tooltip text</p> <code>''</code> <code>icon</code> <code>Optional[Dict[str, Any]]</code> <p>Icon configuration</p> <code>None</code> <code>**options</code> <p>Additional marker options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Marker ID</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_marker(\n    self,\n    coordinate: List[float],\n    popup: str = \"\",\n    tooltip: str = \"\",\n    icon: Optional[Dict[str, Any]] = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add a marker to the map.\n\n    Args:\n        coordinate: Marker position as [longitude, latitude]\n        popup: Popup text\n        tooltip: Tooltip text\n        icon: Icon configuration\n        **options: Additional marker options\n\n    Returns:\n        Marker ID\n    \"\"\"\n    marker_id = f\"marker_{len(self._layers)}\"\n\n    marker_config = {\n        \"type\": \"marker\",\n        \"coordinate\": coordinate,\n        \"popup\": popup,\n        \"tooltip\": tooltip,\n        **options,\n    }\n\n    if icon:\n        marker_config[\"icon\"] = icon\n\n    self.add_layer(marker_id, marker_config)\n    return marker_id\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_polygon","title":"<code>add_polygon(self, coordinates, color='blue', fillColor='blue', fillOpacity=0.2, strokeWidth=2, **options)</code>","text":"<p>Add a polygon to the map.</p> <p>Parameters:</p> Name Type Description Default <code>coordinates</code> <code>List[List[List[float]]]</code> <p>Polygon coordinates as [[[lon, lat], [lon, lat], ...]]</p> required <code>color</code> <code>str</code> <p>Polygon stroke color</p> <code>'blue'</code> <code>fillColor</code> <code>str</code> <p>Polygon fill color</p> <code>'blue'</code> <code>fillOpacity</code> <code>float</code> <p>Polygon fill opacity</p> <code>0.2</code> <code>strokeWidth</code> <code>float</code> <p>Polygon stroke width</p> <code>2</code> <code>**options</code> <p>Additional polygon options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Polygon ID</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_polygon(\n    self,\n    coordinates: List[List[List[float]]],\n    color: str = \"blue\",\n    fillColor: str = \"blue\",\n    fillOpacity: float = 0.2,\n    strokeWidth: float = 2,\n    **options,\n) -&gt; str:\n    \"\"\"Add a polygon to the map.\n\n    Args:\n        coordinates: Polygon coordinates as [[[lon, lat], [lon, lat], ...]]\n        color: Polygon stroke color\n        fillColor: Polygon fill color\n        fillOpacity: Polygon fill opacity\n        strokeWidth: Polygon stroke width\n        **options: Additional polygon options\n\n    Returns:\n        Polygon ID\n    \"\"\"\n    polygon_id = f\"polygon_{len(self._layers)}\"\n\n    polygon_config = {\n        \"type\": \"polygon\",\n        \"coordinates\": coordinates,\n        \"color\": color,\n        \"fillColor\": fillColor,\n        \"fillOpacity\": fillOpacity,\n        \"strokeWidth\": strokeWidth,\n        **options,\n    }\n\n    self.add_layer(polygon_id, polygon_config)\n    return polygon_id\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_tile_layer","title":"<code>add_tile_layer(self, url_template, attribution='', layer_id=None, **options)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url_template</code> <code>str</code> <p>URL template for the tile layer</p> required <code>attribution</code> <code>str</code> <p>Attribution text for the layer</p> <code>''</code> <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer</p> <code>None</code> <code>**options</code> <p>Additional layer options</p> <code>{}</code> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_tile_layer(\n    self,\n    url_template: str,\n    attribution: str = \"\",\n    layer_id: str = None,\n    **options,\n) -&gt; None:\n    \"\"\"Add a tile layer to the map.\n\n    Args:\n        url_template: URL template for the tile layer\n        attribution: Attribution text for the layer\n        layer_id: Unique identifier for the layer\n        **options: Additional layer options\n    \"\"\"\n    if layer_id is None:\n        layer_id = f\"tile_layer_{len(self._layers)}\"\n\n    layer_config = {\n        \"type\": \"tile\",\n        \"url\": url_template,\n        \"attribution\": attribution,\n        **options,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.add_vector_layer","title":"<code>add_vector_layer(self, features, style=None, layer_id=None, **options)</code>","text":"<p>Add a vector layer with features.</p> <p>Parameters:</p> Name Type Description Default <code>features</code> <code>List[Dict[str, Any]]</code> <p>List of feature objects</p> required <code>style</code> <code>Optional[Dict[str, Any]]</code> <p>Style configuration for the layer</p> <code>None</code> <code>layer_id</code> <code>str</code> <p>Unique identifier for the layer</p> <code>None</code> <code>**options</code> <p>Additional layer options</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Vector layer ID</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def add_vector_layer(\n    self,\n    features: List[Dict[str, Any]],\n    style: Optional[Dict[str, Any]] = None,\n    layer_id: str = None,\n    **options,\n) -&gt; str:\n    \"\"\"Add a vector layer with features.\n\n    Args:\n        features: List of feature objects\n        style: Style configuration for the layer\n        layer_id: Unique identifier for the layer\n        **options: Additional layer options\n\n    Returns:\n        Vector layer ID\n    \"\"\"\n    if layer_id is None:\n        layer_id = f\"vector_{len(self._layers)}\"\n\n    layer_config = {\n        \"type\": \"vector\",\n        \"features\": features,\n        \"style\": style or {},\n        **options,\n    }\n\n    self.add_layer(layer_id, layer_config)\n    return layer_id\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.fit_extent","title":"<code>fit_extent(self, extent)</code>","text":"<p>Fit the map view to given extent.</p> <p>Parameters:</p> Name Type Description Default <code>extent</code> <code>List[float]</code> <p>Extent as [minX, minY, maxX, maxY]</p> required Source code in <code>anymap/openlayers.py</code> <pre><code>def fit_extent(self, extent: List[float]) -&gt; None:\n    \"\"\"Fit the map view to given extent.\n\n    Args:\n        extent: Extent as [minX, minY, maxX, maxY]\n    \"\"\"\n    self.call_js_method(\"fitExtent\", extent)\n</code></pre>"},{"location":"openlayers/#anymap.openlayers.OpenLayersMap.transform_coordinate","title":"<code>transform_coordinate(self, coordinate, from_proj, to_proj)</code>","text":"<p>Transform coordinate from one projection to another.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>List[float]</code> <p>Coordinate as [x, y]</p> required <code>from_proj</code> <code>str</code> <p>Source projection</p> required <code>to_proj</code> <code>str</code> <p>Target projection</p> required <p>Returns:</p> Type Description <code>List[float]</code> <p>Transformed coordinate</p> Source code in <code>anymap/openlayers.py</code> <pre><code>def transform_coordinate(\n    self, coordinate: List[float], from_proj: str, to_proj: str\n) -&gt; List[float]:\n    \"\"\"Transform coordinate from one projection to another.\n\n    Args:\n        coordinate: Coordinate as [x, y]\n        from_proj: Source projection\n        to_proj: Target projection\n\n    Returns:\n        Transformed coordinate\n    \"\"\"\n    # This would typically be handled on the JavaScript side\n    self.call_js_method(\"transformCoordinate\", coordinate, from_proj, to_proj)\n    return coordinate  # Placeholder - real transformation happens in JS\n</code></pre>"},{"location":"potree/","title":"potree module","text":"<p>Potree point cloud viewer implementation of the map widget.</p>"},{"location":"potree/#anymap.potree.PotreeMap","title":"<code> PotreeMap            (MapWidget)         </code>","text":"<p>Potree point cloud viewer implementation of the map widget.</p> Source code in <code>anymap/potree.py</code> <pre><code>class PotreeMap(MapWidget):\n    \"\"\"Potree point cloud viewer implementation of the map widget.\"\"\"\n\n    # Potree-specific traits\n    point_cloud_url = traitlets.Unicode(\"\").tag(sync=True)\n    point_size = traitlets.Float(1.0).tag(sync=True)\n    point_size_type = traitlets.Unicode(\"adaptive\").tag(\n        sync=True\n    )  # \"fixed\", \"adaptive\", \"attenuation\"\n    point_shape = traitlets.Unicode(\"square\").tag(sync=True)  # \"square\", \"circle\"\n    min_node_size = traitlets.Float(100.0).tag(sync=True)\n    show_grid = traitlets.Bool(False).tag(sync=True)\n    grid_size = traitlets.Float(10.0).tag(sync=True)\n    grid_color = traitlets.Unicode(\"#aaaaaa\").tag(sync=True)\n    background_color = traitlets.Unicode(\"#000000\").tag(sync=True)\n    edl_enabled = traitlets.Bool(True).tag(sync=True)  # Eye Dome Lighting\n    edl_radius = traitlets.Float(1.0).tag(sync=True)\n    edl_strength = traitlets.Float(1.0).tag(sync=True)\n\n    # Camera controls\n    camera_position = traitlets.List([0.0, 0.0, 10.0]).tag(sync=True)\n    camera_target = traitlets.List([0.0, 0.0, 0.0]).tag(sync=True)\n    fov = traitlets.Float(60.0).tag(sync=True)\n    near_clip = traitlets.Float(0.1).tag(sync=True)\n    far_clip = traitlets.Float(1000.0).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = _esm_potree\n    _css = _css_potree\n\n    def __init__(\n        self,\n        point_cloud_url: str = \"\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        point_size: float = 1.0,\n        point_size_type: str = \"adaptive\",\n        point_shape: str = \"square\",\n        camera_position: List[float] = [0.0, 0.0, 10.0],\n        camera_target: List[float] = [0.0, 0.0, 0.0],\n        fov: float = 60.0,\n        background_color: str = \"#000000\",\n        edl_enabled: bool = True,\n        show_grid: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize Potree map widget.\n\n        Args:\n            point_cloud_url: URL to the point cloud metadata.json file\n            width: Widget width\n            height: Widget height\n            point_size: Size of rendered points\n            point_size_type: How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")\n            point_shape: Shape of rendered points (\"square\", \"circle\")\n            camera_position: Initial camera position [x, y, z]\n            camera_target: Camera look-at target [x, y, z]\n            fov: Field of view in degrees\n            background_color: Background color of the viewer\n            edl_enabled: Enable Eye Dome Lighting for better depth perception\n            show_grid: Show coordinate grid\n        \"\"\"\n        super().__init__(\n            width=width,\n            height=height,\n            point_cloud_url=point_cloud_url,\n            point_size=point_size,\n            point_size_type=point_size_type,\n            point_shape=point_shape,\n            camera_position=camera_position,\n            camera_target=camera_target,\n            fov=fov,\n            background_color=background_color,\n            edl_enabled=edl_enabled,\n            show_grid=show_grid,\n            **kwargs,\n        )\n\n    def load_point_cloud(\n        self, point_cloud_url: str, point_cloud_name: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"Load a point cloud from URL.\n\n        Args:\n            point_cloud_url: URL to the point cloud metadata.json file\n            point_cloud_name: Optional name for the point cloud\n        \"\"\"\n        self.point_cloud_url = point_cloud_url\n        options = {\"url\": point_cloud_url}\n        if point_cloud_name:\n            options[\"name\"] = point_cloud_name\n        self.call_js_method(\"loadPointCloud\", options)\n\n    def set_point_size(self, size: float) -&gt; None:\n        \"\"\"Set the point size.\"\"\"\n        self.point_size = size\n\n    def set_point_size_type(self, size_type: str) -&gt; None:\n        \"\"\"Set the point size type.\n\n        Args:\n            size_type: \"fixed\", \"adaptive\", or \"attenuation\"\n        \"\"\"\n        if size_type not in [\"fixed\", \"adaptive\", \"attenuation\"]:\n            raise ValueError(\"size_type must be 'fixed', 'adaptive', or 'attenuation'\")\n        self.point_size_type = size_type\n\n    def set_point_shape(self, shape: str) -&gt; None:\n        \"\"\"Set the point shape.\n\n        Args:\n            shape: \"square\" or \"circle\"\n        \"\"\"\n        if shape not in [\"square\", \"circle\"]:\n            raise ValueError(\"shape must be 'square' or 'circle'\")\n        self.point_shape = shape\n\n    def set_camera_position(\n        self, position: List[float], target: Optional[List[float]] = None\n    ) -&gt; None:\n        \"\"\"Set camera position and optionally target.\n\n        Args:\n            position: Camera position [x, y, z]\n            target: Camera target [x, y, z] (optional)\n        \"\"\"\n        self.camera_position = position\n        if target:\n            self.camera_target = target\n\n    def fit_to_screen(self) -&gt; None:\n        \"\"\"Fit the point cloud to the screen.\"\"\"\n        self.call_js_method(\"fitToScreen\")\n\n    def enable_edl(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable Eye Dome Lighting.\n\n        Args:\n            enabled: Whether to enable EDL\n        \"\"\"\n        self.edl_enabled = enabled\n\n    def set_edl_settings(self, radius: float = 1.0, strength: float = 1.0) -&gt; None:\n        \"\"\"Set Eye Dome Lighting parameters.\n\n        Args:\n            radius: EDL radius\n            strength: EDL strength\n        \"\"\"\n        self.edl_radius = radius\n        self.edl_strength = strength\n\n    def show_coordinate_grid(\n        self, show: bool = True, size: float = 10.0, color: str = \"#aaaaaa\"\n    ) -&gt; None:\n        \"\"\"Show or hide coordinate grid.\n\n        Args:\n            show: Whether to show the grid\n            size: Grid size\n            color: Grid color\n        \"\"\"\n        self.show_grid = show\n        self.grid_size = size\n        self.grid_color = color\n\n    def set_background_color(self, color: str) -&gt; None:\n        \"\"\"Set the background color.\n\n        Args:\n            color: Background color (hex format like \"#000000\")\n        \"\"\"\n        self.background_color = color\n\n    def clear_point_clouds(self) -&gt; None:\n        \"\"\"Clear all point clouds from the viewer.\"\"\"\n        self.call_js_method(\"clearPointClouds\")\n\n    def get_camera_position(self) -&gt; List[float]:\n        \"\"\"Get current camera position.\"\"\"\n        return list(self.camera_position)\n\n    def get_camera_target(self) -&gt; List[float]:\n        \"\"\"Get current camera target.\"\"\"\n        return list(self.camera_target)\n\n    def take_screenshot(self) -&gt; None:\n        \"\"\"Take a screenshot of the current view.\"\"\"\n        self.call_js_method(\"takeScreenshot\")\n\n    def set_fov(self, fov: float) -&gt; None:\n        \"\"\"Set field of view.\n\n        Args:\n            fov: Field of view in degrees\n        \"\"\"\n        self.fov = fov\n\n    def set_clip_distances(self, near: float, far: float) -&gt; None:\n        \"\"\"Set near and far clipping distances.\n\n        Args:\n            near: Near clipping distance\n            far: Far clipping distance\n        \"\"\"\n        self.near_clip = near\n        self.far_clip = far\n\n    def add_measurement(self, measurement_type: str = \"distance\") -&gt; None:\n        \"\"\"Add measurement tool.\n\n        Args:\n            measurement_type: Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")\n        \"\"\"\n        self.call_js_method(\"addMeasurement\", measurement_type)\n\n    def clear_measurements(self) -&gt; None:\n        \"\"\"Clear all measurements.\"\"\"\n        self.call_js_method(\"clearMeasurements\")\n\n    def set_quality(self, quality: str = \"medium\") -&gt; None:\n        \"\"\"Set rendering quality.\n\n        Args:\n            quality: Rendering quality (\"low\", \"medium\", \"high\")\n        \"\"\"\n        if quality not in [\"low\", \"medium\", \"high\"]:\n            raise ValueError(\"quality must be 'low', 'medium', or 'high'\")\n        self.call_js_method(\"setQuality\", quality)\n\n    def load_multiple_point_clouds(self, point_clouds: List[Dict[str, str]]) -&gt; None:\n        \"\"\"Load multiple point clouds.\n\n        Args:\n            point_clouds: List of point cloud configs with 'url' and optional 'name' keys\n        \"\"\"\n        self.call_js_method(\"loadMultiplePointClouds\", point_clouds)\n\n    def set_classification_visibility(self, classifications: Dict[int, bool]) -&gt; None:\n        \"\"\"Set visibility of point classifications.\n\n        Args:\n            classifications: Dict mapping classification codes to visibility\n        \"\"\"\n        self.call_js_method(\"setClassificationVisibility\", classifications)\n\n    def filter_by_elevation(\n        self,\n        min_elevation: Optional[float] = None,\n        max_elevation: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Filter points by elevation.\n\n        Args:\n            min_elevation: Minimum elevation to show\n            max_elevation: Maximum elevation to show\n        \"\"\"\n        options = {}\n        if min_elevation is not None:\n            options[\"min\"] = min_elevation\n        if max_elevation is not None:\n            options[\"max\"] = max_elevation\n        self.call_js_method(\"filterByElevation\", options)\n\n    def clear_filters(self) -&gt; None:\n        \"\"\"Clear all filters.\"\"\"\n        self.call_js_method(\"clearFilters\")\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.__init__","title":"<code>__init__(self, point_cloud_url='', width='100%', height='600px', point_size=1.0, point_size_type='adaptive', point_shape='square', camera_position=[0.0, 0.0, 10.0], camera_target=[0.0, 0.0, 0.0], fov=60.0, background_color='#000000', edl_enabled=True, show_grid=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize Potree map widget.</p> <p>Parameters:</p> Name Type Description Default <code>point_cloud_url</code> <code>str</code> <p>URL to the point cloud metadata.json file</p> <code>''</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>point_size</code> <code>float</code> <p>Size of rendered points</p> <code>1.0</code> <code>point_size_type</code> <code>str</code> <p>How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")</p> <code>'adaptive'</code> <code>point_shape</code> <code>str</code> <p>Shape of rendered points (\"square\", \"circle\")</p> <code>'square'</code> <code>camera_position</code> <code>List[float]</code> <p>Initial camera position [x, y, z]</p> <code>[0.0, 0.0, 10.0]</code> <code>camera_target</code> <code>List[float]</code> <p>Camera look-at target [x, y, z]</p> <code>[0.0, 0.0, 0.0]</code> <code>fov</code> <code>float</code> <p>Field of view in degrees</p> <code>60.0</code> <code>background_color</code> <code>str</code> <p>Background color of the viewer</p> <code>'#000000'</code> <code>edl_enabled</code> <code>bool</code> <p>Enable Eye Dome Lighting for better depth perception</p> <code>True</code> <code>show_grid</code> <code>bool</code> <p>Show coordinate grid</p> <code>False</code> Source code in <code>anymap/potree.py</code> <pre><code>def __init__(\n    self,\n    point_cloud_url: str = \"\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    point_size: float = 1.0,\n    point_size_type: str = \"adaptive\",\n    point_shape: str = \"square\",\n    camera_position: List[float] = [0.0, 0.0, 10.0],\n    camera_target: List[float] = [0.0, 0.0, 0.0],\n    fov: float = 60.0,\n    background_color: str = \"#000000\",\n    edl_enabled: bool = True,\n    show_grid: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize Potree map widget.\n\n    Args:\n        point_cloud_url: URL to the point cloud metadata.json file\n        width: Widget width\n        height: Widget height\n        point_size: Size of rendered points\n        point_size_type: How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")\n        point_shape: Shape of rendered points (\"square\", \"circle\")\n        camera_position: Initial camera position [x, y, z]\n        camera_target: Camera look-at target [x, y, z]\n        fov: Field of view in degrees\n        background_color: Background color of the viewer\n        edl_enabled: Enable Eye Dome Lighting for better depth perception\n        show_grid: Show coordinate grid\n    \"\"\"\n    super().__init__(\n        width=width,\n        height=height,\n        point_cloud_url=point_cloud_url,\n        point_size=point_size,\n        point_size_type=point_size_type,\n        point_shape=point_shape,\n        camera_position=camera_position,\n        camera_target=camera_target,\n        fov=fov,\n        background_color=background_color,\n        edl_enabled=edl_enabled,\n        show_grid=show_grid,\n        **kwargs,\n    )\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.add_measurement","title":"<code>add_measurement(self, measurement_type='distance')</code>","text":"<p>Add measurement tool.</p> <p>Parameters:</p> Name Type Description Default <code>measurement_type</code> <code>str</code> <p>Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")</p> <code>'distance'</code> Source code in <code>anymap/potree.py</code> <pre><code>def add_measurement(self, measurement_type: str = \"distance\") -&gt; None:\n    \"\"\"Add measurement tool.\n\n    Args:\n        measurement_type: Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")\n    \"\"\"\n    self.call_js_method(\"addMeasurement\", measurement_type)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.clear_filters","title":"<code>clear_filters(self)</code>","text":"<p>Clear all filters.</p> Source code in <code>anymap/potree.py</code> <pre><code>def clear_filters(self) -&gt; None:\n    \"\"\"Clear all filters.\"\"\"\n    self.call_js_method(\"clearFilters\")\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.clear_measurements","title":"<code>clear_measurements(self)</code>","text":"<p>Clear all measurements.</p> Source code in <code>anymap/potree.py</code> <pre><code>def clear_measurements(self) -&gt; None:\n    \"\"\"Clear all measurements.\"\"\"\n    self.call_js_method(\"clearMeasurements\")\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.clear_point_clouds","title":"<code>clear_point_clouds(self)</code>","text":"<p>Clear all point clouds from the viewer.</p> Source code in <code>anymap/potree.py</code> <pre><code>def clear_point_clouds(self) -&gt; None:\n    \"\"\"Clear all point clouds from the viewer.\"\"\"\n    self.call_js_method(\"clearPointClouds\")\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.enable_edl","title":"<code>enable_edl(self, enabled=True)</code>","text":"<p>Enable or disable Eye Dome Lighting.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable EDL</p> <code>True</code> Source code in <code>anymap/potree.py</code> <pre><code>def enable_edl(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable Eye Dome Lighting.\n\n    Args:\n        enabled: Whether to enable EDL\n    \"\"\"\n    self.edl_enabled = enabled\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.filter_by_elevation","title":"<code>filter_by_elevation(self, min_elevation=None, max_elevation=None)</code>","text":"<p>Filter points by elevation.</p> <p>Parameters:</p> Name Type Description Default <code>min_elevation</code> <code>Optional[float]</code> <p>Minimum elevation to show</p> <code>None</code> <code>max_elevation</code> <code>Optional[float]</code> <p>Maximum elevation to show</p> <code>None</code> Source code in <code>anymap/potree.py</code> <pre><code>def filter_by_elevation(\n    self,\n    min_elevation: Optional[float] = None,\n    max_elevation: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Filter points by elevation.\n\n    Args:\n        min_elevation: Minimum elevation to show\n        max_elevation: Maximum elevation to show\n    \"\"\"\n    options = {}\n    if min_elevation is not None:\n        options[\"min\"] = min_elevation\n    if max_elevation is not None:\n        options[\"max\"] = max_elevation\n    self.call_js_method(\"filterByElevation\", options)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.fit_to_screen","title":"<code>fit_to_screen(self)</code>","text":"<p>Fit the point cloud to the screen.</p> Source code in <code>anymap/potree.py</code> <pre><code>def fit_to_screen(self) -&gt; None:\n    \"\"\"Fit the point cloud to the screen.\"\"\"\n    self.call_js_method(\"fitToScreen\")\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.get_camera_position","title":"<code>get_camera_position(self)</code>","text":"<p>Get current camera position.</p> Source code in <code>anymap/potree.py</code> <pre><code>def get_camera_position(self) -&gt; List[float]:\n    \"\"\"Get current camera position.\"\"\"\n    return list(self.camera_position)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.get_camera_target","title":"<code>get_camera_target(self)</code>","text":"<p>Get current camera target.</p> Source code in <code>anymap/potree.py</code> <pre><code>def get_camera_target(self) -&gt; List[float]:\n    \"\"\"Get current camera target.\"\"\"\n    return list(self.camera_target)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.load_multiple_point_clouds","title":"<code>load_multiple_point_clouds(self, point_clouds)</code>","text":"<p>Load multiple point clouds.</p> <p>Parameters:</p> Name Type Description Default <code>point_clouds</code> <code>List[Dict[str, str]]</code> <p>List of point cloud configs with 'url' and optional 'name' keys</p> required Source code in <code>anymap/potree.py</code> <pre><code>def load_multiple_point_clouds(self, point_clouds: List[Dict[str, str]]) -&gt; None:\n    \"\"\"Load multiple point clouds.\n\n    Args:\n        point_clouds: List of point cloud configs with 'url' and optional 'name' keys\n    \"\"\"\n    self.call_js_method(\"loadMultiplePointClouds\", point_clouds)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.load_point_cloud","title":"<code>load_point_cloud(self, point_cloud_url, point_cloud_name=None)</code>","text":"<p>Load a point cloud from URL.</p> <p>Parameters:</p> Name Type Description Default <code>point_cloud_url</code> <code>str</code> <p>URL to the point cloud metadata.json file</p> required <code>point_cloud_name</code> <code>Optional[str]</code> <p>Optional name for the point cloud</p> <code>None</code> Source code in <code>anymap/potree.py</code> <pre><code>def load_point_cloud(\n    self, point_cloud_url: str, point_cloud_name: Optional[str] = None\n) -&gt; None:\n    \"\"\"Load a point cloud from URL.\n\n    Args:\n        point_cloud_url: URL to the point cloud metadata.json file\n        point_cloud_name: Optional name for the point cloud\n    \"\"\"\n    self.point_cloud_url = point_cloud_url\n    options = {\"url\": point_cloud_url}\n    if point_cloud_name:\n        options[\"name\"] = point_cloud_name\n    self.call_js_method(\"loadPointCloud\", options)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_background_color","title":"<code>set_background_color(self, color)</code>","text":"<p>Set the background color.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str</code> <p>Background color (hex format like \"#000000\")</p> required Source code in <code>anymap/potree.py</code> <pre><code>def set_background_color(self, color: str) -&gt; None:\n    \"\"\"Set the background color.\n\n    Args:\n        color: Background color (hex format like \"#000000\")\n    \"\"\"\n    self.background_color = color\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_camera_position","title":"<code>set_camera_position(self, position, target=None)</code>","text":"<p>Set camera position and optionally target.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>List[float]</code> <p>Camera position [x, y, z]</p> required <code>target</code> <code>Optional[List[float]]</code> <p>Camera target [x, y, z] (optional)</p> <code>None</code> Source code in <code>anymap/potree.py</code> <pre><code>def set_camera_position(\n    self, position: List[float], target: Optional[List[float]] = None\n) -&gt; None:\n    \"\"\"Set camera position and optionally target.\n\n    Args:\n        position: Camera position [x, y, z]\n        target: Camera target [x, y, z] (optional)\n    \"\"\"\n    self.camera_position = position\n    if target:\n        self.camera_target = target\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_classification_visibility","title":"<code>set_classification_visibility(self, classifications)</code>","text":"<p>Set visibility of point classifications.</p> <p>Parameters:</p> Name Type Description Default <code>classifications</code> <code>Dict[int, bool]</code> <p>Dict mapping classification codes to visibility</p> required Source code in <code>anymap/potree.py</code> <pre><code>def set_classification_visibility(self, classifications: Dict[int, bool]) -&gt; None:\n    \"\"\"Set visibility of point classifications.\n\n    Args:\n        classifications: Dict mapping classification codes to visibility\n    \"\"\"\n    self.call_js_method(\"setClassificationVisibility\", classifications)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_clip_distances","title":"<code>set_clip_distances(self, near, far)</code>","text":"<p>Set near and far clipping distances.</p> <p>Parameters:</p> Name Type Description Default <code>near</code> <code>float</code> <p>Near clipping distance</p> required <code>far</code> <code>float</code> <p>Far clipping distance</p> required Source code in <code>anymap/potree.py</code> <pre><code>def set_clip_distances(self, near: float, far: float) -&gt; None:\n    \"\"\"Set near and far clipping distances.\n\n    Args:\n        near: Near clipping distance\n        far: Far clipping distance\n    \"\"\"\n    self.near_clip = near\n    self.far_clip = far\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_edl_settings","title":"<code>set_edl_settings(self, radius=1.0, strength=1.0)</code>","text":"<p>Set Eye Dome Lighting parameters.</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>float</code> <p>EDL radius</p> <code>1.0</code> <code>strength</code> <code>float</code> <p>EDL strength</p> <code>1.0</code> Source code in <code>anymap/potree.py</code> <pre><code>def set_edl_settings(self, radius: float = 1.0, strength: float = 1.0) -&gt; None:\n    \"\"\"Set Eye Dome Lighting parameters.\n\n    Args:\n        radius: EDL radius\n        strength: EDL strength\n    \"\"\"\n    self.edl_radius = radius\n    self.edl_strength = strength\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_fov","title":"<code>set_fov(self, fov)</code>","text":"<p>Set field of view.</p> <p>Parameters:</p> Name Type Description Default <code>fov</code> <code>float</code> <p>Field of view in degrees</p> required Source code in <code>anymap/potree.py</code> <pre><code>def set_fov(self, fov: float) -&gt; None:\n    \"\"\"Set field of view.\n\n    Args:\n        fov: Field of view in degrees\n    \"\"\"\n    self.fov = fov\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_point_shape","title":"<code>set_point_shape(self, shape)</code>","text":"<p>Set the point shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>str</code> <p>\"square\" or \"circle\"</p> required Source code in <code>anymap/potree.py</code> <pre><code>def set_point_shape(self, shape: str) -&gt; None:\n    \"\"\"Set the point shape.\n\n    Args:\n        shape: \"square\" or \"circle\"\n    \"\"\"\n    if shape not in [\"square\", \"circle\"]:\n        raise ValueError(\"shape must be 'square' or 'circle'\")\n    self.point_shape = shape\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_point_size","title":"<code>set_point_size(self, size)</code>","text":"<p>Set the point size.</p> Source code in <code>anymap/potree.py</code> <pre><code>def set_point_size(self, size: float) -&gt; None:\n    \"\"\"Set the point size.\"\"\"\n    self.point_size = size\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_point_size_type","title":"<code>set_point_size_type(self, size_type)</code>","text":"<p>Set the point size type.</p> <p>Parameters:</p> Name Type Description Default <code>size_type</code> <code>str</code> <p>\"fixed\", \"adaptive\", or \"attenuation\"</p> required Source code in <code>anymap/potree.py</code> <pre><code>def set_point_size_type(self, size_type: str) -&gt; None:\n    \"\"\"Set the point size type.\n\n    Args:\n        size_type: \"fixed\", \"adaptive\", or \"attenuation\"\n    \"\"\"\n    if size_type not in [\"fixed\", \"adaptive\", \"attenuation\"]:\n        raise ValueError(\"size_type must be 'fixed', 'adaptive', or 'attenuation'\")\n    self.point_size_type = size_type\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.set_quality","title":"<code>set_quality(self, quality='medium')</code>","text":"<p>Set rendering quality.</p> <p>Parameters:</p> Name Type Description Default <code>quality</code> <code>str</code> <p>Rendering quality (\"low\", \"medium\", \"high\")</p> <code>'medium'</code> Source code in <code>anymap/potree.py</code> <pre><code>def set_quality(self, quality: str = \"medium\") -&gt; None:\n    \"\"\"Set rendering quality.\n\n    Args:\n        quality: Rendering quality (\"low\", \"medium\", \"high\")\n    \"\"\"\n    if quality not in [\"low\", \"medium\", \"high\"]:\n        raise ValueError(\"quality must be 'low', 'medium', or 'high'\")\n    self.call_js_method(\"setQuality\", quality)\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.show_coordinate_grid","title":"<code>show_coordinate_grid(self, show=True, size=10.0, color='#aaaaaa')</code>","text":"<p>Show or hide coordinate grid.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>Whether to show the grid</p> <code>True</code> <code>size</code> <code>float</code> <p>Grid size</p> <code>10.0</code> <code>color</code> <code>str</code> <p>Grid color</p> <code>'#aaaaaa'</code> Source code in <code>anymap/potree.py</code> <pre><code>def show_coordinate_grid(\n    self, show: bool = True, size: float = 10.0, color: str = \"#aaaaaa\"\n) -&gt; None:\n    \"\"\"Show or hide coordinate grid.\n\n    Args:\n        show: Whether to show the grid\n        size: Grid size\n        color: Grid color\n    \"\"\"\n    self.show_grid = show\n    self.grid_size = size\n    self.grid_color = color\n</code></pre>"},{"location":"potree/#anymap.potree.PotreeMap.take_screenshot","title":"<code>take_screenshot(self)</code>","text":"<p>Take a screenshot of the current view.</p> Source code in <code>anymap/potree.py</code> <pre><code>def take_screenshot(self) -&gt; None:\n    \"\"\"Take a screenshot of the current view.\"\"\"\n    self.call_js_method(\"takeScreenshot\")\n</code></pre>"},{"location":"stac/","title":"stac module","text":""},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint","title":"<code> PlanetaryComputerEndpoint            (TitilerEndpoint)         </code>","text":"<p>This class contains the methods for the Microsoft Planetary Computer endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>class PlanetaryComputerEndpoint(TitilerEndpoint):\n    \"\"\"This class contains the methods for the Microsoft Planetary Computer endpoint.\"\"\"\n\n    def __init__(\n        self,\n        endpoint: Optional[str] = \"https://planetarycomputer.microsoft.com/api/data/v1\",\n        name: Optional[str] = \"item\",\n        TileMatrixSetId: Optional[str] = \"WebMercatorQuad\",\n    ) -&gt; None:\n        \"\"\"Initialize the PlanetaryComputerEndpoint object.\n\n        Args:\n            endpoint: The endpoint of the titiler server. Defaults to Microsoft\n                Planetary Computer API endpoint.\n            name: The name to be used in the file path. Defaults to \"item\".\n            TileMatrixSetId: The TileMatrixSetId to be used in the file path.\n                Defaults to \"WebMercatorQuad\".\n        \"\"\"\n        super().__init__(endpoint, name, TileMatrixSetId)\n\n    def url_for_stac_collection(self) -&gt; str:\n        \"\"\"Generate URL for STAC collection tilejson.\n\n        Returns:\n            URL string for STAC collection tilejson endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/{self.TileMatrixSetId}/tilejson.json\"\n\n    def url_for_collection_assets(self) -&gt; str:\n        \"\"\"Generate URL for collection assets.\n\n        Returns:\n            URL string for collection assets endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/assets\"\n\n    def url_for_collection_bounds(self) -&gt; str:\n        \"\"\"Generate URL for collection bounds.\n\n        Returns:\n            URL string for collection bounds endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/bounds\"\n\n    def url_for_collection_info(self) -&gt; str:\n        \"\"\"Generate URL for collection info.\n\n        Returns:\n            URL string for collection info endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/info\"\n\n    def url_for_collection_info_geojson(self) -&gt; str:\n        \"\"\"Generate URL for collection info as GeoJSON.\n\n        Returns:\n            URL string for collection info GeoJSON endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/info.geojson\"\n\n    def url_for_collection_pixel_value(self, lon: float, lat: float) -&gt; str:\n        \"\"\"Generate URL for collection pixel value at coordinates.\n\n        Args:\n            lon: Longitude coordinate.\n            lat: Latitude coordinate.\n\n        Returns:\n            URL string for collection pixel value endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/point/{lon},{lat}\"\n\n    def url_for_collection_wmts(self) -&gt; str:\n        \"\"\"Generate URL for collection WMTS capabilities.\n\n        Returns:\n            URL string for collection WMTS capabilities endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/{self.TileMatrixSetId}/WMTSCapabilities.xml\"\n\n    def url_for_collection_lat_lon_assets(self, lng: float, lat: float) -&gt; str:\n        \"\"\"Generate URL for collection assets at coordinates.\n\n        Args:\n            lng: Longitude coordinate.\n            lat: Latitude coordinate.\n\n        Returns:\n            URL string for collection assets at coordinates endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/{lng},{lat}/assets\"\n\n    def url_for_collection_bbox_assets(\n        self, minx: float, miny: float, maxx: float, maxy: float\n    ) -&gt; str:\n        \"\"\"Generate URL for collection assets within bounding box.\n\n        Args:\n            minx: Minimum x coordinate.\n            miny: Minimum y coordinate.\n            maxx: Maximum x coordinate.\n            maxy: Maximum y coordinate.\n\n        Returns:\n            URL string for collection assets within bounding box endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/collection/{minx},{miny},{maxx},{maxy}/assets\"\n\n    def url_for_stac_mosaic(self, searchid: str) -&gt; str:\n        \"\"\"Generate URL for STAC mosaic tilejson.\n\n        Args:\n            searchid: Search ID for the mosaic.\n\n        Returns:\n            URL string for STAC mosaic tilejson endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/mosaic/{searchid}/{self.TileMatrixSetId}/tilejson.json\"\n\n    def url_for_mosaic_info(self, searchid: str) -&gt; str:\n        \"\"\"Generate URL for mosaic info.\n\n        Args:\n            searchid: Search ID for the mosaic.\n\n        Returns:\n            URL string for mosaic info endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/mosaic/{searchid}/info\"\n\n    def url_for_mosaic_lat_lon_assets(\n        self, searchid: str, lon: float, lat: float\n    ) -&gt; str:\n        \"\"\"Generate URL for mosaic assets at coordinates.\n\n        Args:\n            searchid: Search ID for the mosaic.\n            lon: Longitude coordinate.\n            lat: Latitude coordinate.\n\n        Returns:\n            URL string for mosaic assets at coordinates endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/mosaic/{searchid}/{lon},{lat}/assets\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.__init__","title":"<code>__init__(self, endpoint='https://planetarycomputer.microsoft.com/api/data/v1', name='item', TileMatrixSetId='WebMercatorQuad')</code>  <code>special</code>","text":"<p>Initialize the PlanetaryComputerEndpoint object.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>Optional[str]</code> <p>The endpoint of the titiler server. Defaults to Microsoft Planetary Computer API endpoint.</p> <code>'https://planetarycomputer.microsoft.com/api/data/v1'</code> <code>name</code> <code>Optional[str]</code> <p>The name to be used in the file path. Defaults to \"item\".</p> <code>'item'</code> <code>TileMatrixSetId</code> <code>Optional[str]</code> <p>The TileMatrixSetId to be used in the file path. Defaults to \"WebMercatorQuad\".</p> <code>'WebMercatorQuad'</code> Source code in <code>anymap/stac.py</code> <pre><code>def __init__(\n    self,\n    endpoint: Optional[str] = \"https://planetarycomputer.microsoft.com/api/data/v1\",\n    name: Optional[str] = \"item\",\n    TileMatrixSetId: Optional[str] = \"WebMercatorQuad\",\n) -&gt; None:\n    \"\"\"Initialize the PlanetaryComputerEndpoint object.\n\n    Args:\n        endpoint: The endpoint of the titiler server. Defaults to Microsoft\n            Planetary Computer API endpoint.\n        name: The name to be used in the file path. Defaults to \"item\".\n        TileMatrixSetId: The TileMatrixSetId to be used in the file path.\n            Defaults to \"WebMercatorQuad\".\n    \"\"\"\n    super().__init__(endpoint, name, TileMatrixSetId)\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_assets","title":"<code>url_for_collection_assets(self)</code>","text":"<p>Generate URL for collection assets.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection assets endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_assets(self) -&gt; str:\n    \"\"\"Generate URL for collection assets.\n\n    Returns:\n        URL string for collection assets endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/assets\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_bbox_assets","title":"<code>url_for_collection_bbox_assets(self, minx, miny, maxx, maxy)</code>","text":"<p>Generate URL for collection assets within bounding box.</p> <p>Parameters:</p> Name Type Description Default <code>minx</code> <code>float</code> <p>Minimum x coordinate.</p> required <code>miny</code> <code>float</code> <p>Minimum y coordinate.</p> required <code>maxx</code> <code>float</code> <p>Maximum x coordinate.</p> required <code>maxy</code> <code>float</code> <p>Maximum y coordinate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection assets within bounding box endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_bbox_assets(\n    self, minx: float, miny: float, maxx: float, maxy: float\n) -&gt; str:\n    \"\"\"Generate URL for collection assets within bounding box.\n\n    Args:\n        minx: Minimum x coordinate.\n        miny: Minimum y coordinate.\n        maxx: Maximum x coordinate.\n        maxy: Maximum y coordinate.\n\n    Returns:\n        URL string for collection assets within bounding box endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/{minx},{miny},{maxx},{maxy}/assets\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_bounds","title":"<code>url_for_collection_bounds(self)</code>","text":"<p>Generate URL for collection bounds.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection bounds endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_bounds(self) -&gt; str:\n    \"\"\"Generate URL for collection bounds.\n\n    Returns:\n        URL string for collection bounds endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/bounds\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_info","title":"<code>url_for_collection_info(self)</code>","text":"<p>Generate URL for collection info.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection info endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_info(self) -&gt; str:\n    \"\"\"Generate URL for collection info.\n\n    Returns:\n        URL string for collection info endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/info\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_info_geojson","title":"<code>url_for_collection_info_geojson(self)</code>","text":"<p>Generate URL for collection info as GeoJSON.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection info GeoJSON endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_info_geojson(self) -&gt; str:\n    \"\"\"Generate URL for collection info as GeoJSON.\n\n    Returns:\n        URL string for collection info GeoJSON endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/info.geojson\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_lat_lon_assets","title":"<code>url_for_collection_lat_lon_assets(self, lng, lat)</code>","text":"<p>Generate URL for collection assets at coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>lng</code> <code>float</code> <p>Longitude coordinate.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection assets at coordinates endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_lat_lon_assets(self, lng: float, lat: float) -&gt; str:\n    \"\"\"Generate URL for collection assets at coordinates.\n\n    Args:\n        lng: Longitude coordinate.\n        lat: Latitude coordinate.\n\n    Returns:\n        URL string for collection assets at coordinates endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/{lng},{lat}/assets\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_pixel_value","title":"<code>url_for_collection_pixel_value(self, lon, lat)</code>","text":"<p>Generate URL for collection pixel value at coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>lon</code> <code>float</code> <p>Longitude coordinate.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection pixel value endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_pixel_value(self, lon: float, lat: float) -&gt; str:\n    \"\"\"Generate URL for collection pixel value at coordinates.\n\n    Args:\n        lon: Longitude coordinate.\n        lat: Latitude coordinate.\n\n    Returns:\n        URL string for collection pixel value endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/point/{lon},{lat}\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_collection_wmts","title":"<code>url_for_collection_wmts(self)</code>","text":"<p>Generate URL for collection WMTS capabilities.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for collection WMTS capabilities endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_collection_wmts(self) -&gt; str:\n    \"\"\"Generate URL for collection WMTS capabilities.\n\n    Returns:\n        URL string for collection WMTS capabilities endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/{self.TileMatrixSetId}/WMTSCapabilities.xml\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_mosaic_info","title":"<code>url_for_mosaic_info(self, searchid)</code>","text":"<p>Generate URL for mosaic info.</p> <p>Parameters:</p> Name Type Description Default <code>searchid</code> <code>str</code> <p>Search ID for the mosaic.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for mosaic info endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_mosaic_info(self, searchid: str) -&gt; str:\n    \"\"\"Generate URL for mosaic info.\n\n    Args:\n        searchid: Search ID for the mosaic.\n\n    Returns:\n        URL string for mosaic info endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/mosaic/{searchid}/info\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_mosaic_lat_lon_assets","title":"<code>url_for_mosaic_lat_lon_assets(self, searchid, lon, lat)</code>","text":"<p>Generate URL for mosaic assets at coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>searchid</code> <code>str</code> <p>Search ID for the mosaic.</p> required <code>lon</code> <code>float</code> <p>Longitude coordinate.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for mosaic assets at coordinates endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_mosaic_lat_lon_assets(\n    self, searchid: str, lon: float, lat: float\n) -&gt; str:\n    \"\"\"Generate URL for mosaic assets at coordinates.\n\n    Args:\n        searchid: Search ID for the mosaic.\n        lon: Longitude coordinate.\n        lat: Latitude coordinate.\n\n    Returns:\n        URL string for mosaic assets at coordinates endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/mosaic/{searchid}/{lon},{lat}/assets\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_stac_collection","title":"<code>url_for_stac_collection(self)</code>","text":"<p>Generate URL for STAC collection tilejson.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC collection tilejson endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_collection(self) -&gt; str:\n    \"\"\"Generate URL for STAC collection tilejson.\n\n    Returns:\n        URL string for STAC collection tilejson endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/collection/{self.TileMatrixSetId}/tilejson.json\"\n</code></pre>"},{"location":"stac/#anymap.stac.PlanetaryComputerEndpoint.url_for_stac_mosaic","title":"<code>url_for_stac_mosaic(self, searchid)</code>","text":"<p>Generate URL for STAC mosaic tilejson.</p> <p>Parameters:</p> Name Type Description Default <code>searchid</code> <code>str</code> <p>Search ID for the mosaic.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC mosaic tilejson endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_mosaic(self, searchid: str) -&gt; str:\n    \"\"\"Generate URL for STAC mosaic tilejson.\n\n    Args:\n        searchid: Search ID for the mosaic.\n\n    Returns:\n        URL string for STAC mosaic tilejson endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/mosaic/{searchid}/{self.TileMatrixSetId}/tilejson.json\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint","title":"<code> TitilerEndpoint        </code>","text":"<p>This class contains the methods for the titiler endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>class TitilerEndpoint:\n    \"\"\"This class contains the methods for the titiler endpoint.\"\"\"\n\n    def __init__(\n        self,\n        endpoint: Optional[str] = None,\n        name: Optional[str] = \"stac\",\n        TileMatrixSetId: Optional[str] = \"WebMercatorQuad\",\n    ) -&gt; None:\n        \"\"\"Initialize the TiTilerEndpoint object.\n\n        Args:\n            endpoint: The endpoint of the titiler server. Defaults to None.\n            name: The name to be used in the file path. Defaults to \"stac\".\n            TileMatrixSetId: The TileMatrixSetId to be used in the file path.\n                Defaults to \"WebMercatorQuad\".\n        \"\"\"\n        self.endpoint = endpoint\n        self.name = name\n        self.TileMatrixSetId = TileMatrixSetId\n\n    def url_for_stac_item(self) -&gt; str:\n        \"\"\"Generate URL for STAC item tilejson.\n\n        Returns:\n            URL string for STAC item tilejson endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/{self.TileMatrixSetId}/tilejson.json\"\n\n    def url_for_stac_assets(self) -&gt; str:\n        \"\"\"Generate URL for STAC assets.\n\n        Returns:\n            URL string for STAC assets endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/assets\"\n\n    def url_for_stac_bounds(self) -&gt; str:\n        \"\"\"Generate URL for STAC bounds.\n\n        Returns:\n            URL string for STAC bounds endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/bounds\"\n\n    def url_for_stac_info(self) -&gt; str:\n        \"\"\"Generate URL for STAC info.\n\n        Returns:\n            URL string for STAC info endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/info\"\n\n    def url_for_stac_info_geojson(self) -&gt; str:\n        \"\"\"Generate URL for STAC info as GeoJSON.\n\n        Returns:\n            URL string for STAC info GeoJSON endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/info.geojson\"\n\n    def url_for_stac_statistics(self) -&gt; str:\n        \"\"\"Generate URL for STAC statistics.\n\n        Returns:\n            URL string for STAC statistics endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/statistics\"\n\n    def url_for_stac_pixel_value(self, lon: float, lat: float) -&gt; str:\n        \"\"\"Generate URL for STAC pixel value at coordinates.\n\n        Args:\n            lon: Longitude coordinate.\n            lat: Latitude coordinate.\n\n        Returns:\n            URL string for STAC pixel value endpoint.\n        \"\"\"\n        return f\"{self.endpoint}/{self.name}/point/{lon},{lat}\"\n\n    def url_for_stac_wmts(self) -&gt; str:\n        \"\"\"Generate URL for STAC WMTS capabilities.\n\n        Returns:\n            URL string for STAC WMTS capabilities endpoint.\n        \"\"\"\n        return (\n            f\"{self.endpoint}/{self.name}/{self.TileMatrixSetId}/WMTSCapabilities.xml\"\n        )\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.__init__","title":"<code>__init__(self, endpoint=None, name='stac', TileMatrixSetId='WebMercatorQuad')</code>  <code>special</code>","text":"<p>Initialize the TiTilerEndpoint object.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>Optional[str]</code> <p>The endpoint of the titiler server. Defaults to None.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name to be used in the file path. Defaults to \"stac\".</p> <code>'stac'</code> <code>TileMatrixSetId</code> <code>Optional[str]</code> <p>The TileMatrixSetId to be used in the file path. Defaults to \"WebMercatorQuad\".</p> <code>'WebMercatorQuad'</code> Source code in <code>anymap/stac.py</code> <pre><code>def __init__(\n    self,\n    endpoint: Optional[str] = None,\n    name: Optional[str] = \"stac\",\n    TileMatrixSetId: Optional[str] = \"WebMercatorQuad\",\n) -&gt; None:\n    \"\"\"Initialize the TiTilerEndpoint object.\n\n    Args:\n        endpoint: The endpoint of the titiler server. Defaults to None.\n        name: The name to be used in the file path. Defaults to \"stac\".\n        TileMatrixSetId: The TileMatrixSetId to be used in the file path.\n            Defaults to \"WebMercatorQuad\".\n    \"\"\"\n    self.endpoint = endpoint\n    self.name = name\n    self.TileMatrixSetId = TileMatrixSetId\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_assets","title":"<code>url_for_stac_assets(self)</code>","text":"<p>Generate URL for STAC assets.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC assets endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_assets(self) -&gt; str:\n    \"\"\"Generate URL for STAC assets.\n\n    Returns:\n        URL string for STAC assets endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/assets\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_bounds","title":"<code>url_for_stac_bounds(self)</code>","text":"<p>Generate URL for STAC bounds.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC bounds endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_bounds(self) -&gt; str:\n    \"\"\"Generate URL for STAC bounds.\n\n    Returns:\n        URL string for STAC bounds endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/bounds\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_info","title":"<code>url_for_stac_info(self)</code>","text":"<p>Generate URL for STAC info.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC info endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_info(self) -&gt; str:\n    \"\"\"Generate URL for STAC info.\n\n    Returns:\n        URL string for STAC info endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/info\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_info_geojson","title":"<code>url_for_stac_info_geojson(self)</code>","text":"<p>Generate URL for STAC info as GeoJSON.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC info GeoJSON endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_info_geojson(self) -&gt; str:\n    \"\"\"Generate URL for STAC info as GeoJSON.\n\n    Returns:\n        URL string for STAC info GeoJSON endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/info.geojson\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_item","title":"<code>url_for_stac_item(self)</code>","text":"<p>Generate URL for STAC item tilejson.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC item tilejson endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_item(self) -&gt; str:\n    \"\"\"Generate URL for STAC item tilejson.\n\n    Returns:\n        URL string for STAC item tilejson endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/{self.TileMatrixSetId}/tilejson.json\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_pixel_value","title":"<code>url_for_stac_pixel_value(self, lon, lat)</code>","text":"<p>Generate URL for STAC pixel value at coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>lon</code> <code>float</code> <p>Longitude coordinate.</p> required <code>lat</code> <code>float</code> <p>Latitude coordinate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC pixel value endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_pixel_value(self, lon: float, lat: float) -&gt; str:\n    \"\"\"Generate URL for STAC pixel value at coordinates.\n\n    Args:\n        lon: Longitude coordinate.\n        lat: Latitude coordinate.\n\n    Returns:\n        URL string for STAC pixel value endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/point/{lon},{lat}\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_statistics","title":"<code>url_for_stac_statistics(self)</code>","text":"<p>Generate URL for STAC statistics.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC statistics endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_statistics(self) -&gt; str:\n    \"\"\"Generate URL for STAC statistics.\n\n    Returns:\n        URL string for STAC statistics endpoint.\n    \"\"\"\n    return f\"{self.endpoint}/{self.name}/statistics\"\n</code></pre>"},{"location":"stac/#anymap.stac.TitilerEndpoint.url_for_stac_wmts","title":"<code>url_for_stac_wmts(self)</code>","text":"<p>Generate URL for STAC WMTS capabilities.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL string for STAC WMTS capabilities endpoint.</p> Source code in <code>anymap/stac.py</code> <pre><code>def url_for_stac_wmts(self) -&gt; str:\n    \"\"\"Generate URL for STAC WMTS capabilities.\n\n    Returns:\n        URL string for STAC WMTS capabilities endpoint.\n    \"\"\"\n    return (\n        f\"{self.endpoint}/{self.name}/{self.TileMatrixSetId}/WMTSCapabilities.xml\"\n    )\n</code></pre>"},{"location":"stac/#anymap.stac.check_titiler_endpoint","title":"<code>check_titiler_endpoint(titiler_endpoint=None)</code>","text":"<p>Returns the default titiler endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>titiler_endpoint</code> <code>Optional[str]</code> <p>Optional titiler endpoint. If None, will check environment variables or use default endpoint.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[str, anymap.stac.TitilerEndpoint, anymap.stac.PlanetaryComputerEndpoint]</code> <p>A titiler endpoint (string URL or endpoint object).</p> Source code in <code>anymap/stac.py</code> <pre><code>def check_titiler_endpoint(\n    titiler_endpoint: Optional[str] = None,\n) -&gt; Union[str, TitilerEndpoint, PlanetaryComputerEndpoint]:\n    \"\"\"Returns the default titiler endpoint.\n\n    Args:\n        titiler_endpoint: Optional titiler endpoint. If None, will check environment\n            variables or use default endpoint.\n\n    Returns:\n        A titiler endpoint (string URL or endpoint object).\n    \"\"\"\n    if titiler_endpoint is None:\n        if os.environ.get(\"TITILER_ENDPOINT\") is not None:\n            titiler_endpoint = os.environ.get(\"TITILER_ENDPOINT\")\n\n            if titiler_endpoint == \"planetary-computer\":\n                titiler_endpoint = PlanetaryComputerEndpoint()\n        else:\n            titiler_endpoint = \"https://giswqs-titiler-endpoint.hf.space\"\n    elif titiler_endpoint in [\"planetary-computer\", \"pc\"]:\n        titiler_endpoint = PlanetaryComputerEndpoint()\n\n    return titiler_endpoint\n</code></pre>"},{"location":"stac/#anymap.stac.cog_bands","title":"<code>cog_bands(url, titiler_endpoint=None)</code>","text":"<p>Get band names of a Cloud Optimized GeoTIFF (COG).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of band names</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_bands(\n    url: str,\n    titiler_endpoint: Optional[str] = None,\n) -&gt; List:\n    \"\"\"Get band names of a Cloud Optimized GeoTIFF (COG).\n\n    Args:\n        url (str): HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        titiler_endpoint (str, optional): TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n\n    Returns:\n        list: A list of band names\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    r = requests.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params={\n            \"url\": url,\n        },\n    ).json()\n\n    bands = [b[0] for b in r[\"band_descriptions\"]]\n    return bands\n</code></pre>"},{"location":"stac/#anymap.stac.cog_bounds","title":"<code>cog_bounds(url, titiler_endpoint=None)</code>","text":"<p>Get the bounding box of a Cloud Optimized GeoTIFF (COG).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>titiler_endpoint</code> <code>Optional[str]</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <p>Returns:</p> Type Description <code>List[float]</code> <p>A list of values representing [left, bottom, right, top].</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_bounds(\n    url: str,\n    titiler_endpoint: Optional[str] = None,\n) -&gt; List[float]:\n    \"\"\"Get the bounding box of a Cloud Optimized GeoTIFF (COG).\n\n    Args:\n        url: HTTP URL to a COG, e.g.,\n            https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        titiler_endpoint: TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n\n    Returns:\n        A list of values representing [left, bottom, right, top].\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    r = requests.get(f\"{titiler_endpoint}/cog/bounds\", params={\"url\": url}).json()\n\n    if \"bounds\" in r.keys():\n        bounds = r[\"bounds\"]\n    else:\n        bounds = None\n    return bounds\n</code></pre>"},{"location":"stac/#anymap.stac.cog_center","title":"<code>cog_center(url, titiler_endpoint=None)</code>","text":"<p>Get the centroid of a Cloud Optimized GeoTIFF (COG).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple representing (longitude, latitude)</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_center(\n    url: str,\n    titiler_endpoint: Optional[str] = None,\n) -&gt; Tuple:\n    \"\"\"Get the centroid of a Cloud Optimized GeoTIFF (COG).\n\n    Args:\n        url (str): HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        titiler_endpoint (str, optional): TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n\n    Returns:\n        tuple: A tuple representing (longitude, latitude)\n    \"\"\"\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    bounds = cog_bounds(url, titiler_endpoint)\n    center = ((bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2)  # (lat, lon)\n    return center\n</code></pre>"},{"location":"stac/#anymap.stac.cog_info","title":"<code>cog_info(url, titiler_endpoint=None, return_geojson=False)</code>","text":"<p>Get band statistics of a Cloud Optimized GeoTIFF (COG).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band info.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_info(\n    url: str,\n    titiler_endpoint: Optional[str] = None,\n    return_geojson: Optional[bool] = False,\n) -&gt; List:\n    \"\"\"Get band statistics of a Cloud Optimized GeoTIFF (COG).\n\n    Args:\n        url (str): HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        titiler_endpoint (str, optional): TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n\n    Returns:\n        list: A dictionary of band info.\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    info = \"info\"\n    if return_geojson:\n        info = \"info.geojson\"\n\n    try:\n        r = requests.get(\n            f\"{titiler_endpoint}/cog/{info}\",\n            params={\n                \"url\": url,\n            },\n            timeout=10,\n        ).json()\n    except Exception as e:\n        titiler_endpoint = \"https://titiler.xyz\"\n        r = requests.get(\n            f\"{titiler_endpoint}/cog/{info}\",\n            params={\n                \"url\": url,\n            },\n            timeout=10,\n        ).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.cog_mosaic","title":"<code>cog_mosaic(links, titiler_endpoint=None, username='anonymous', layername=None, overwrite=False, verbose=True, **kwargs)</code>","text":"<p>Creates a COG mosaic from a list of COG URLs.</p> <p>Parameters:</p> Name Type Description Default <code>links</code> <code>list</code> <p>A list containing COG HTTP URLs.</p> required <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <code>username</code> <code>str</code> <p>User name for the titiler endpoint. Defaults to \"anonymous\".</p> <code>'anonymous'</code> <code>layername</code> <code>[type]</code> <p>Layer name to use. Defaults to None.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the layer name if existing. Defaults to False.</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Whether to print out descriptive information. Defaults to True.</p> <code>True</code> <p>Exceptions:</p> Type Description <code>Exception</code> <p>If the COG mosaic fails to create.</p> <p>Returns:</p> Type Description <code>str</code> <p>The tile URL for the COG mosaic.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_mosaic(\n    links: List,\n    titiler_endpoint: Optional[str] = None,\n    username: Optional[str] = \"anonymous\",\n    layername=None,\n    overwrite: Optional[bool] = False,\n    verbose: Optional[bool] = True,\n    **kwargs,\n) -&gt; str:\n    \"\"\"Creates a COG mosaic from a list of COG URLs.\n\n    Args:\n        links (list): A list containing COG HTTP URLs.\n        titiler_endpoint (str, optional): TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n        username (str, optional): User name for the titiler endpoint. Defaults to \"anonymous\".\n        layername ([type], optional): Layer name to use. Defaults to None.\n        overwrite (bool, optional): Whether to overwrite the layer name if existing. Defaults to False.\n        verbose (bool, optional): Whether to print out descriptive information. Defaults to True.\n\n    Raises:\n        Exception: If the COG mosaic fails to create.\n\n    Returns:\n        str: The tile URL for the COG mosaic.\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if layername is None:\n        layername = \"layer_X\"\n\n    try:\n        if verbose:\n            print(\"Creating COG masaic ...\")\n\n        # Create token\n        r = requests.post(\n            f\"{titiler_endpoint}/tokens/create\",\n            json={\"username\": username, \"scope\": [\"mosaic:read\", \"mosaic:create\"]},\n        ).json()\n        token = r[\"token\"]\n\n        # Create mosaic\n        requests.post(\n            f\"{titiler_endpoint}/mosaicjson/create\",\n            json={\n                \"username\": username,\n                \"layername\": layername,\n                \"files\": links,\n                # \"overwrite\": overwrite\n            },\n            params={\n                \"access_token\": token,\n            },\n        ).json()\n\n        r2 = requests.get(\n            f\"{titiler_endpoint}/mosaicjson/{username}.{layername}/tilejson.json\",\n        ).json()\n\n        return r2[\"tiles\"][0]\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"stac/#anymap.stac.cog_mosaic_from_file","title":"<code>cog_mosaic_from_file(filepath, skip_rows=0, titiler_endpoint=None, username='anonymous', layername=None, overwrite=False, verbose=True, **kwargs)</code>","text":"<p>Creates a COG mosaic from a csv/txt file stored locally for through HTTP URL.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Local path or HTTP URL to the csv/txt file containing COG URLs.</p> required <code>skip_rows</code> <code>int</code> <p>The number of rows to skip in the file. Defaults to 0.</p> <code>0</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <code>username</code> <code>str</code> <p>User name for the titiler endpoint. Defaults to \"anonymous\".</p> <code>'anonymous'</code> <code>layername</code> <code>[type]</code> <p>Layer name to use. Defaults to None.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the layer name if existing. Defaults to False.</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Whether to print out descriptive information. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The tile URL for the COG mosaic.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_mosaic_from_file(\n    filepath: str,\n    skip_rows: Optional[int] = 0,\n    titiler_endpoint: Optional[str] = None,\n    username: Optional[str] = \"anonymous\",\n    layername=None,\n    overwrite: Optional[bool] = False,\n    verbose: Optional[bool] = True,\n    **kwargs,\n) -&gt; str:\n    \"\"\"Creates a COG mosaic from a csv/txt file stored locally for through HTTP URL.\n\n    Args:\n        filepath (str): Local path or HTTP URL to the csv/txt file containing COG URLs.\n        skip_rows (int, optional): The number of rows to skip in the file. Defaults to 0.\n        titiler_endpoint (str, optional): TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n        username (str, optional): User name for the titiler endpoint. Defaults to \"anonymous\".\n        layername ([type], optional): Layer name to use. Defaults to None.\n        overwrite (bool, optional): Whether to overwrite the layer name if existing. Defaults to False.\n        verbose (bool, optional): Whether to print out descriptive information. Defaults to True.\n\n    Returns:\n        str: The tile URL for the COG mosaic.\n    \"\"\"\n    import urllib\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    links = []\n    if filepath.startswith(\"http\"):\n        data = urllib.request.urlopen(filepath)\n        for line in data:\n            links.append(line.decode(\"utf-8\").strip())\n\n    else:\n        with open(filepath) as f:\n            links = [line.strip() for line in f.readlines()]\n\n    links = links[skip_rows:]\n    # print(links)\n    mosaic = cog_mosaic(\n        links, titiler_endpoint, username, layername, overwrite, verbose, **kwargs\n    )\n    return mosaic\n</code></pre>"},{"location":"stac/#anymap.stac.cog_pixel_value","title":"<code>cog_pixel_value(lon, lat, url, bidx, titiler_endpoint=None, verbose=True, **kwargs)</code>","text":"<p>Get pixel value from COG.</p> <p>Parameters:</p> Name Type Description Default <code>lon</code> <code>float</code> <p>Longitude of the pixel.</p> required <code>lat</code> <code>float</code> <p>Latitude of the pixel.</p> required <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., 'https://github.com/opengeos/data/releases/download/raster/Libya-2023-07-01.tif'</p> required <code>bidx</code> <code>str</code> <p>Dataset band indexes (e.g bidx=1, bidx=1&amp;bidx=2&amp;bidx=3). Defaults to None.</p> required <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Print status messages. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band info.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_pixel_value(\n    lon: float,\n    lat: float,\n    url: str,\n    bidx: Optional[str],\n    titiler_endpoint: Optional[str] = None,\n    verbose: Optional[bool] = True,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get pixel value from COG.\n\n    Args:\n        lon (float): Longitude of the pixel.\n        lat (float): Latitude of the pixel.\n        url (str): HTTP URL to a COG, e.g., 'https://github.com/opengeos/data/releases/download/raster/Libya-2023-07-01.tif'\n        bidx (str, optional): Dataset band indexes (e.g bidx=1, bidx=1&amp;bidx=2&amp;bidx=3). Defaults to None.\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n        verbose (bool, optional): Print status messages. Defaults to True.\n\n    Returns:\n        list: A dictionary of band info.\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    kwargs[\"url\"] = url\n    if bidx is not None:\n        kwargs[\"bidx\"] = bidx\n\n    r = requests.get(f\"{titiler_endpoint}/cog/point/{lon},{lat}\", params=kwargs).json()\n    bands = cog_bands(url, titiler_endpoint)\n    # if isinstance(titiler_endpoint, str):\n    #     r = requests.get(f\"{titiler_endpoint}/cog/point/{lon},{lat}\", params=kwargs).json()\n    # else:\n    #     r = requests.get(\n    #         titiler_endpoint.url_for_stac_pixel_value(lon, lat), params=kwargs\n    #     ).json()\n\n    if \"detail\" in r:\n        if verbose:\n            print(r[\"detail\"])\n        return None\n    else:\n        values = r[\"values\"]\n        result = dict(zip(bands, values))\n        return result\n</code></pre>"},{"location":"stac/#anymap.stac.cog_stats","title":"<code>cog_stats(url, titiler_endpoint=None)</code>","text":"<p>Get band statistics of a Cloud Optimized GeoTIFF (COG).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band statistics.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_stats(\n    url: str,\n    titiler_endpoint: Optional[str] = None,\n) -&gt; List:\n    \"\"\"Get band statistics of a Cloud Optimized GeoTIFF (COG).\n\n    Args:\n        url (str): HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        titiler_endpoint (str, optional): TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n\n    Returns:\n        list: A dictionary of band statistics.\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    try:\n        r = requests.get(\n            f\"{titiler_endpoint}/cog/statistics\",\n            params={\n                \"url\": url,\n            },\n            timeout=10,\n        ).json()\n    except Exception as e:\n        titiler_endpoint = \"https://titiler.xyz\"\n        r = requests.get(\n            f\"{titiler_endpoint}/cog/statistics\",\n            params={\n                \"url\": url,\n            },\n            timeout=10,\n        ).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.cog_tile","title":"<code>cog_tile(url, bands=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get a tile layer from a Cloud Optimized GeoTIFF (COG).</p> <p>Source code adapted from https://developmentseed.org/titiler/examples/notebooks/Working_with_CloudOptimizedGeoTIFF_simple/</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>bands</code> <code>Union[str, List[Union[str, int]]]</code> <p>List of bands to use. Can be band names (strings) or indices (integers). Defaults to None.</p> <code>None</code> <code>titiler_endpoint</code> <code>Optional[str]</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the titiler endpoint. For more information about the available arguments, see https://developmentseed.org/titiler/endpoints/cog/#tiles. For example, to apply a rescaling to multiple bands, use something like <code>rescale=[\"164,223\",\"130,211\",\"99,212\"]</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Tuple[str, List[float]]</code> <p>A tuple containing the COG tile layer URL and bounds.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_tile(\n    url: str,\n    bands: Optional[Union[str, List[Union[str, int]]]] = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; Tuple[str, List[float]]:\n    \"\"\"Get a tile layer from a Cloud Optimized GeoTIFF (COG).\n\n    Source code adapted from https://developmentseed.org/titiler/examples/notebooks/Working_with_CloudOptimizedGeoTIFF_simple/\n\n    Args:\n        url: HTTP URL to a COG, e.g.,\n            https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        bands: List of bands to use. Can be band names (strings) or indices (integers).\n            Defaults to None.\n        titiler_endpoint: TiTiler endpoint. Defaults to\n            \"https://giswqs-titiler-endpoint.hf.space\".\n        **kwargs: Additional arguments to pass to the titiler endpoint. For more\n            information about the available arguments, see\n            https://developmentseed.org/titiler/endpoints/cog/#tiles.\n            For example, to apply a rescaling to multiple bands, use something like\n            `rescale=[\"164,223\",\"130,211\",\"99,212\"]`.\n\n    Returns:\n        A tuple containing the COG tile layer URL and bounds.\n    \"\"\"\n    import json\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n\n    kwargs[\"url\"] = url\n\n    try:\n        band_names = cog_bands(url, titiler_endpoint)\n    except Exception as e:\n        titiler_endpoint = \"https://titiler.xyz\"\n        band_names = cog_bands(url, titiler_endpoint)\n\n    if isinstance(bands, str):\n        bands = [bands]\n\n    if bands is None and \"bidx\" not in kwargs:\n        if len(band_names) &gt;= 3:\n            kwargs[\"bidx\"] = [1, 2, 3]\n    elif isinstance(bands, list) and \"bidx\" not in kwargs:\n        if all(isinstance(x, int) for x in bands):\n            if len(set(bands)) == 1:\n                bands = bands[0]\n            kwargs[\"bidx\"] = bands\n        elif all(isinstance(x, str) for x in bands):\n            if len(set(bands)) == 1:\n                bands = bands[0]\n            kwargs[\"bidx\"] = [band_names.index(x) + 1 for x in bands]\n        else:\n            raise ValueError(\"Bands must be a list of integers or strings.\")\n\n    if \"palette\" in kwargs:\n        kwargs[\"colormap_name\"] = kwargs[\"palette\"].lower()\n        del kwargs[\"palette\"]\n\n    if \"bidx\" not in kwargs:\n        kwargs[\"bidx\"] = [1]\n    elif isinstance(kwargs[\"bidx\"], int):\n        kwargs[\"bidx\"] = [kwargs[\"bidx\"]]\n\n    if len(kwargs[\"bidx\"]) == 1 and (\"colormap\" not in kwargs):\n        colormap = _get_image_colormap(url)\n        if colormap is not None:\n            kwargs[\"colormap\"] = colormap\n\n    if \"rescale\" not in kwargs and (\"colormap\" not in kwargs):\n        try:\n            stats = cog_stats(url, titiler_endpoint)\n        except Exception as e:\n            titiler_endpoint = \"https://titiler.xyz\"\n            stats = cog_stats(url, titiler_endpoint)\n\n        if \"message\" not in stats:\n            try:\n                rescale = []\n                for i in band_names:\n                    rescale.append(\n                        \"{},{}\".format(\n                            stats[i][\"percentile_2\"],\n                            stats[i][\"percentile_98\"],\n                        )\n                    )\n                kwargs[\"rescale\"] = rescale\n            except Exception as e:\n                pass\n\n    if \"colormap\" in kwargs and isinstance(kwargs[\"colormap\"], dict):\n        kwargs[\"colormap\"] = json.dumps(kwargs[\"colormap\"])\n\n    TileMatrixSetId = \"WebMercatorQuad\"\n    if \"TileMatrixSetId\" in kwargs.keys():\n        TileMatrixSetId = kwargs[\"TileMatrixSetId\"]\n        kwargs.pop(\"TileMatrixSetId\")\n\n    if \"default_vis\" in kwargs.keys() and kwargs[\"default_vis\"]:\n        kwargs = {\"url\": url}\n\n    try:\n        r = requests.get(\n            f\"{titiler_endpoint}/cog/{TileMatrixSetId}/tilejson.json\",\n            params=kwargs,\n            timeout=10,\n        ).json()\n    except Exception as e:\n        titiler_endpoint = \"https://titiler.xyz\"\n        r = requests.get(\n            f\"{titiler_endpoint}/cog/{TileMatrixSetId}/tilejson.json\",\n            params=kwargs,\n            timeout=10,\n        ).json()\n    return r[\"tiles\"][0]\n</code></pre>"},{"location":"stac/#anymap.stac.cog_tile_vmin_vmax","title":"<code>cog_tile_vmin_vmax(url, bands=None, titiler_endpoint=None, percentile=True, **kwargs)</code>","text":"<p>Get a tile layer from a Cloud Optimized GeoTIFF (COG) and return the minimum and maximum values.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a COG, e.g., https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif</p> required <code>bands</code> <code>Optional[List[str]]</code> <p>List of bands to use. Defaults to None.</p> <code>None</code> <code>titiler_endpoint</code> <code>Optional[str]</code> <p>TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".</p> <code>None</code> <code>percentile</code> <code>Optional[bool]</code> <p>Whether to use percentiles or not. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>A tuple containing the minimum and maximum values.</p> Source code in <code>anymap/stac.py</code> <pre><code>def cog_tile_vmin_vmax(\n    url: str,\n    bands: Optional[List[str]] = None,\n    titiler_endpoint: Optional[str] = None,\n    percentile: Optional[bool] = True,\n    **kwargs: Any,\n) -&gt; Tuple[float, float]:\n    \"\"\"Get a tile layer from a Cloud Optimized GeoTIFF (COG) and return the minimum and maximum values.\n\n    Args:\n        url: HTTP URL to a COG, e.g.,\n            https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\n        bands: List of bands to use. Defaults to None.\n        titiler_endpoint: TiTiler endpoint. Defaults to \"https://giswqs-titiler-endpoint.hf.space\".\n        percentile: Whether to use percentiles or not. Defaults to True.\n        **kwargs: Additional keyword arguments.\n\n    Returns:\n        A tuple containing the minimum and maximum values.\n    \"\"\"\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    stats = cog_stats(url, titiler_endpoint)\n\n    if isinstance(bands, str):\n        bands = [bands]\n\n    if bands is not None:\n        stats = {s: stats[s] for s in stats if s in bands}\n\n    if percentile:\n        vmin = min([stats[s][\"percentile_2\"] for s in stats])\n        vmax = max([stats[s][\"percentile_98\"] for s in stats])\n    else:\n        vmin = min([stats[s][\"min\"] for s in stats])\n        vmax = max([stats[s][\"max\"] for s in stats])\n\n    return vmin, vmax\n</code></pre>"},{"location":"stac/#anymap.stac.create_mosaicjson","title":"<code>create_mosaicjson(images, output)</code>","text":"<p>Create a mosaicJSON file from a list of images.</p> <p>Parameters:</p> Name Type Description Default <code>images</code> <code>str | list</code> <p>A list of image URLs or a URL to a text file containing a list of image URLs.</p> required <code>output</code> <code>str</code> <p>The output mosaicJSON file path.</p> required Source code in <code>anymap/stac.py</code> <pre><code>def create_mosaicjson(images, output):\n    \"\"\"Create a mosaicJSON file from a list of images.\n\n    Args:\n        images (str | list): A list of image URLs or a URL to a text file containing a list of image URLs.\n        output (str): The output mosaicJSON file path.\n\n    \"\"\"\n    try:\n        from cogeo_mosaic.mosaic import MosaicJSON\n        from cogeo_mosaic.backends import MosaicBackend\n    except ImportError:\n        raise ImportError(\n            \"cogeo-mosaic is required to use this function. \"\n            \"Install with `pip install cogeo-mosaic`.\"\n        )\n\n    if isinstance(images, str):\n        if images.startswith(\"http\"):\n            import urllib.request\n\n            with urllib.request.urlopen(images) as f:\n                file_contents = f.read().decode(\"utf-8\")\n                images = file_contents.strip().split(\"\\n\")\n        elif not os.path.exists(images):\n            raise FileNotFoundError(f\"{images} does not exist.\")\n\n    elif not isinstance(images, list):\n        raise ValueError(\"images must be a list or a URL.\")\n\n    mosaic = MosaicJSON.from_urls(images)\n    with MosaicBackend(output, mosaic_def=mosaic) as f:\n        f.write(overwrite=True)\n</code></pre>"},{"location":"stac/#anymap.stac.download_data_catalogs","title":"<code>download_data_catalogs(out_dir=None, quiet=True, overwrite=False)</code>","text":"<p>Download geospatial data catalogs from https://github.com/giswqs/geospatial-data-catalogs.</p> <p>Parameters:</p> Name Type Description Default <code>out_dir</code> <code>str</code> <p>The output directory. Defaults to None.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Whether to suppress the download progress bar. Defaults to True.</p> <code>True</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the existing data catalog. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The path to the downloaded data catalog.</p> Source code in <code>anymap/stac.py</code> <pre><code>def download_data_catalogs(\n    out_dir: Optional[str] = None,\n    quiet: Optional[bool] = True,\n    overwrite: Optional[bool] = False,\n) -&gt; str:\n    \"\"\"Download geospatial data catalogs from https://github.com/giswqs/geospatial-data-catalogs.\n\n    Args:\n        out_dir (str, optional): The output directory. Defaults to None.\n        quiet (bool, optional): Whether to suppress the download progress bar. Defaults to True.\n        overwrite (bool, optional): Whether to overwrite the existing data catalog. Defaults to False.\n\n    Returns:\n        str: The path to the downloaded data catalog.\n    \"\"\"\n    import tempfile\n    import gdown\n    import zipfile\n\n    if out_dir is None:\n        out_dir = tempfile.gettempdir()\n    elif not os.path.exists(out_dir):\n        os.makedirs(out_dir)\n\n    url = \"https://github.com/giswqs/geospatial-data-catalogs/archive/refs/heads/master.zip\"\n\n    out_file = os.path.join(out_dir, \"geospatial-data-catalogs.zip\")\n    work_dir = os.path.join(out_dir, \"geospatial-data-catalogs-master\")\n\n    if os.path.exists(work_dir) and not overwrite:\n        return work_dir\n    else:\n        gdown.download(url, out_file, quiet=quiet)\n        with zipfile.ZipFile(out_file, \"r\") as zip_ref:\n            zip_ref.extractall(out_dir)\n        return work_dir\n</code></pre>"},{"location":"stac/#anymap.stac.flatten_dict","title":"<code>flatten_dict(my_dict, parent_key=False, sep='.')</code>","text":"<p>Flattens a nested dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>my_dict</code> <code>dict</code> <p>The dictionary to flatten.</p> required <code>parent_key</code> <code>bool</code> <p>Whether to include the parent key. Defaults to False.</p> <code>False</code> <code>sep</code> <code>str</code> <p>The separator to use. Defaults to '.'.</p> <code>'.'</code> <p>Returns:</p> Type Description <code>dict</code> <p>The flattened dictionary.</p> Source code in <code>anymap/stac.py</code> <pre><code>def flatten_dict(my_dict, parent_key=False, sep=\".\"):\n    \"\"\"Flattens a nested dictionary.\n\n    Args:\n        my_dict (dict): The dictionary to flatten.\n        parent_key (bool, optional): Whether to include the parent key. Defaults to False.\n        sep (str, optional): The separator to use. Defaults to '.'.\n\n    Returns:\n        dict: The flattened dictionary.\n    \"\"\"\n\n    flat_dict = {}\n    for key, value in my_dict.items():\n        if not isinstance(value, dict):\n            flat_dict[key] = value\n        else:\n            sub_dict = flatten_dict(value)\n            for sub_key, sub_value in sub_dict.items():\n                if parent_key:\n                    flat_dict[parent_key + sep + sub_key] = sub_value\n                else:\n                    flat_dict[sub_key] = sub_value\n\n    return flat_dict\n</code></pre>"},{"location":"stac/#anymap.stac.get_cog_link_from_stac_item","title":"<code>get_cog_link_from_stac_item(item_url)</code>","text":"<p>Retrieve the URL of the GeoTIFF asset from a STAC Item.</p> <p>Parameters:</p> Name Type Description Default <code>item_url</code> <code>str</code> <p>The URL to a STAC Item JSON.</p> required <p>Returns:</p> Type Description <code>str</code> <p>URL of the first .tif asset, or None if not found.</p> Source code in <code>anymap/stac.py</code> <pre><code>def get_cog_link_from_stac_item(item_url: str) -&gt; str:\n    \"\"\"\n    Retrieve the URL of the GeoTIFF asset from a STAC Item.\n\n    Args:\n        item_url (str): The URL to a STAC Item JSON.\n\n    Returns:\n        str: URL of the first .tif asset, or None if not found.\n    \"\"\"\n    try:\n        response = requests.get(item_url)\n        response.raise_for_status()\n        item = response.json()\n\n        # Look for any asset ending in .tif\n        for asset_key, asset in item.get(\"assets\", {}).items():\n            href = asset.get(\"href\", \"\")\n            if href.endswith(\".tif\") or \".tif?\" in href:\n                return href\n\n        print(\"No .tif asset found in item.\")\n        return None\n    except Exception as e:\n        print(f\"Failed to retrieve STAC item: {e}\")\n        return None\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_all_items","title":"<code>maxar_all_items(collection_id, return_gdf=True, assets=['visual'], verbose=True, **kwargs)</code>","text":"<p>Retrieve STAC items from Maxar's public STAC API.</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>The collection ID, e.g., Kahramanmaras-turkey-earthquake-23 Use maxar_collections() to retrieve all available collection IDs.</p> required <code>return_gdf</code> <code>bool</code> <p>If True, return a GeoDataFrame. Defaults to True.</p> <code>True</code> <code>assets</code> <code>list</code> <p>A list of asset names to include in the GeoDataFrame. It can be \"visual\", \"ms_analytic\", \"pan_analytic\", \"data-mask\". Defaults to ['visual'].</p> <code>['visual']</code> <code>verbose</code> <code>bool</code> <p>If True, print progress. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the pystac Catalog.from_file() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>GeoDataFrame | pystac.ItemCollection</code> <p>If return_gdf is True, return a GeoDataFrame.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_all_items(\n    collection_id: str,\n    return_gdf: Optional[bool] = True,\n    assets: Optional[List] = [\"visual\"],\n    verbose: Optional[bool] = True,\n    **kwargs,\n):\n    \"\"\"Retrieve STAC items from Maxar's public STAC API.\n\n    Args:\n        collection_id (str): The collection ID, e.g., Kahramanmaras-turkey-earthquake-23\n            Use maxar_collections() to retrieve all available collection IDs.\n        return_gdf (bool, optional): If True, return a GeoDataFrame. Defaults to True.\n        assets (list, optional): A list of asset names to include in the GeoDataFrame.\n            It can be \"visual\", \"ms_analytic\", \"pan_analytic\", \"data-mask\". Defaults to ['visual'].\n        verbose (bool, optional): If True, print progress. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the pystac Catalog.from_file() method.\n\n    Returns:\n        GeoDataFrame | pystac.ItemCollection: If return_gdf is True, return a GeoDataFrame.\n    \"\"\"\n\n    child_ids = maxar_child_collections(collection_id, **kwargs)\n    for index, child_id in enumerate(child_ids):\n        if verbose:\n            print(\n                f\"Processing ({str(index+1).zfill(len(str(len(child_ids))))} out of {len(child_ids)}): {child_id} ...\"\n            )\n        items = maxar_items(collection_id, child_id, return_gdf, assets, **kwargs)\n        if return_gdf:\n            if child_id == child_ids[0]:\n                gdf = items\n            else:\n                gdf = pd.concat([gdf, items], ignore_index=True)\n        else:\n            if child_id == child_ids[0]:\n                items_all = items\n            else:\n                items_all.extend(items)\n\n    if return_gdf:\n        return gdf\n    else:\n        return items_all\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_child_collections","title":"<code>maxar_child_collections(collection_id, return_ids=True, **kwargs)</code>","text":"<p>Get a list of Maxar child collections.</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>The collection ID, e.g., Kahramanmaras-turkey-earthquake-23 Use maxar_collections() to retrieve all available collection IDs.</p> required <code>return_ids</code> <code>bool</code> <p>Whether to return the collection ids. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the pystac Catalog.from_file() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of Maxar child collections.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_child_collections(\n    collection_id: str, return_ids: Optional[bool] = True, **kwargs\n) -&gt; List:\n    \"\"\"Get a list of Maxar child collections.\n\n    Args:\n        collection_id (str): The collection ID, e.g., Kahramanmaras-turkey-earthquake-23\n            Use maxar_collections() to retrieve all available collection IDs.\n        return_ids (bool, optional): Whether to return the collection ids. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the pystac Catalog.from_file() method.\n\n    Returns:\n        list: A list of Maxar child collections.\n    \"\"\"\n\n    import tempfile\n    from pystac import Catalog\n\n    file_path = os.path.join(tempfile.gettempdir(), f\"maxar-{collection_id}.txt\")\n    if return_ids:\n        if os.path.exists(file_path):\n            with open(file_path, \"r\") as f:\n                return [line.strip() for line in f.readlines()]\n\n    if \"MAXAR_STAC_API\" in os.environ:\n        url = os.environ[\"MAXAR_STAC_API\"]\n    else:\n        url = \"https://maxar-opendata.s3.amazonaws.com/events/catalog.json\"\n\n    root_catalog = Catalog.from_file(url, **kwargs)\n\n    collections = root_catalog.get_child(collection_id).get_collections()\n\n    if return_ids:\n        collection_ids = [collection.id for collection in collections]\n        with open(file_path, \"w\") as f:\n            f.write(\"\\n\".join(collection_ids))\n        return collection_ids\n\n    else:\n        return collections\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_collection_url","title":"<code>maxar_collection_url(collection, dtype='geojson', raw=True)</code>","text":"<p>Retrieve the URL to a Maxar Open Data collection.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The collection ID, e.g., Kahramanmaras-turkey-earthquake-23. Use maxar_collections() to retrieve all available collection IDs.</p> required <code>dtype</code> <code>str</code> <p>The data type. It can be 'geojson' or 'tsv'. Defaults to 'geojson'.</p> <code>'geojson'</code> <code>raw</code> <code>bool</code> <p>If True, return the raw URL. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The URL to the collection.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_collection_url(collection, dtype=\"geojson\", raw=True):\n    \"\"\"Retrieve the URL to a Maxar Open Data collection.\n\n    Args:\n        collection (str): The collection ID, e.g., Kahramanmaras-turkey-earthquake-23.\n            Use maxar_collections() to retrieve all available collection IDs.\n        dtype (str, optional): The data type. It can be 'geojson' or 'tsv'. Defaults to 'geojson'.\n        raw (bool, optional): If True, return the raw URL. Defaults to True.\n\n    Returns:\n        str: The URL to the collection.\n    \"\"\"\n    collections = maxar_collections()\n    if collection not in collections:\n        raise ValueError(\n            f\"Invalid collection name. Use maxar_collections() to retrieve all available collection IDs.\"\n        )\n\n    if dtype not in [\"geojson\", \"tsv\"]:\n        raise ValueError(f\"Invalid dtype. It can be 'geojson' or 'tsv'.\")\n\n    if raw:\n        url = f\"https://raw.githubusercontent.com/giswqs/maxar-open-data/master/datasets/{collection}.{dtype}\"\n    else:\n        url = f\"https://github.com/giswqs/maxar-open-data/blob/master/datasets/{collection}.{dtype}\"\n    return url\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_collections","title":"<code>maxar_collections(return_ids=True, **kwargs)</code>","text":"<p>Get a list of Maxar collections.</p> <p>Parameters:</p> Name Type Description Default <code>return_ids</code> <code>bool</code> <p>Whether to return the collection ids. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the pystac Catalog.from_file() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list </code> <p>A list of Maxar collections.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_collections(return_ids: Optional[bool] = True, **kwargs) -&gt; List:\n    \"\"\"Get a list of Maxar collections.\n\n    Args:\n        return_ids (bool, optional): Whether to return the collection ids. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the pystac Catalog.from_file() method.\n\n    Returns:\n        list : A list of Maxar collections.\n    \"\"\"\n\n    import tempfile\n    from pystac import Catalog\n    import pandas as pd\n\n    if return_ids:\n        url = \"https://raw.githubusercontent.com/giswqs/maxar-open-data/master/datasets.csv\"\n        df = pd.read_csv(url)\n        return df[\"dataset\"].tolist()\n\n    file_path = os.path.join(tempfile.gettempdir(), \"maxar-collections.txt\")\n    if return_ids:\n        if os.path.exists(file_path):\n            with open(file_path, \"r\") as f:\n                return [line.strip() for line in f.readlines()]\n\n    if \"MAXAR_STAC_API\" in os.environ:\n        url = os.environ[\"MAXAR_STAC_API\"]\n    else:\n        url = \"https://maxar-opendata.s3.amazonaws.com/events/catalog.json\"\n\n    root_catalog = Catalog.from_file(url, **kwargs)\n\n    collections = root_catalog.get_collections()\n\n    # if return_ids:\n    #     collection_ids = [collection.id for collection in collections]\n    #     with open(file_path, \"w\") as f:\n    #         f.write(\"\\n\".join(collection_ids))\n\n    #     return collection_ids\n    # else:\n    return collections\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_download","title":"<code>maxar_download(images, out_dir=None, quiet=False, proxy=None, speed=None, use_cookies=True, verify=True, id=None, fuzzy=False, resume=False, overwrite=False)</code>","text":"<p>Download Mxar Open Data images.</p> <p>Parameters:</p> Name Type Description Default <code>images</code> <code>str | images</code> <p>The list of image links or a file path to a geojson or tsv containing the Maxar download links.</p> required <code>out_dir</code> <code>str</code> <p>The output directory. Defaults to None.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Suppress terminal output. Default is False.</p> <code>False</code> <code>proxy</code> <code>str</code> <p>Proxy. Defaults to None.</p> <code>None</code> <code>speed</code> <code>float</code> <p>Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.</p> <code>None</code> <code>use_cookies</code> <code>bool</code> <p>Flag to use cookies. Defaults to True.</p> <code>True</code> <code>verify</code> <code>bool | str</code> <p>Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string, in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.</p> <code>True</code> <code>id</code> <code>str</code> <p>Google Drive's file ID. Defaults to None.</p> <code>None</code> <code>fuzzy</code> <code>bool</code> <p>Fuzzy extraction of Google Drive's file Id. Defaults to False.</p> <code>False</code> <code>resume</code> <code>bool</code> <p>Resume the download from existing tmp file if possible. Defaults to False.</p> <code>False</code> <code>overwrite</code> <code>bool</code> <p>Overwrite the file if it already exists. Defaults to False.</p> <code>False</code> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_download(\n    images,\n    out_dir=None,\n    quiet=False,\n    proxy=None,\n    speed=None,\n    use_cookies=True,\n    verify=True,\n    id=None,\n    fuzzy=False,\n    resume=False,\n    overwrite=False,\n):\n    \"\"\"Download Mxar Open Data images.\n\n    Args:\n        images (str | images): The list of image links or a file path to a geojson or tsv containing the Maxar download links.\n        out_dir (str, optional): The output directory. Defaults to None.\n        quiet (bool, optional): Suppress terminal output. Default is False.\n        proxy (str, optional): Proxy. Defaults to None.\n        speed (float, optional): Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.\n        use_cookies (bool, optional): Flag to use cookies. Defaults to True.\n        verify (bool | str, optional): Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string,\n            in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.\n        id (str, optional): Google Drive's file ID. Defaults to None.\n        fuzzy (bool, optional): Fuzzy extraction of Google Drive's file Id. Defaults to False.\n        resume (bool, optional): Resume the download from existing tmp file if possible. Defaults to False.\n        overwrite (bool, optional): Overwrite the file if it already exists. Defaults to False.\n\n    \"\"\"\n    import gdown\n\n    if out_dir is None:\n        out_dir = os.getcwd()\n\n    if isinstance(images, str):\n        if images.endswith(\".geojson\"):\n            import geopandas as gpd\n\n            data = gpd.read_file(images)\n            images = data[\"visual\"].tolist()\n        elif images.endswith(\".tsv\"):\n            import pandas as pd\n\n            data = pd.read_csv(images, sep=\"\\t\")\n            images = data[\"visual\"].tolist()\n        else:\n            raise ValueError(f\"Invalid file type. It can be 'geojson' or 'tsv'.\")\n\n    if not os.path.exists(out_dir):\n        os.makedirs(out_dir)\n\n    for index, image in enumerate(images):\n        items = image.split(\"/\")\n        file_name = items[7] + \".tif\"\n        dir_name = items[-1].split(\"-\")[0]\n        if not os.path.exists(os.path.join(out_dir, dir_name)):\n            os.makedirs(os.path.join(out_dir, dir_name))\n        out_file = os.path.join(out_dir, dir_name, file_name)\n        if os.path.exists(out_file) and (not overwrite):\n            print(f\"{out_file} already exists. Skipping...\")\n            continue\n        if not quiet:\n            print(\n                f\"Downloading {str(index+1).zfill(len(str(len(images))))} out of {len(images)}: {dir_name}/{file_name}\"\n            )\n\n        gdown.download(\n            image, out_file, quiet, proxy, speed, use_cookies, verify, id, fuzzy, resume\n        )\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_items","title":"<code>maxar_items(collection_id, child_id, return_gdf=True, assets=['visual'], **kwargs)</code>","text":"<p>Retrieve STAC items from Maxar's public STAC API.</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>The collection ID, e.g., Kahramanmaras-turkey-earthquake-23 Use maxar_collections() to retrieve all available collection IDs.</p> required <code>child_id</code> <code>str</code> <p>The child collection ID, e.g., 1050050044DE7E00 Use maxar_child_collections() to retrieve all available child collection IDs.</p> required <code>return_gdf</code> <code>bool</code> <p>If True, return a GeoDataFrame. Defaults to True.</p> <code>True</code> <code>assets</code> <code>list</code> <p>A list of asset names to include in the GeoDataFrame. It can be \"visual\", \"ms_analytic\", \"pan_analytic\", \"data-mask\". Defaults to ['visual'].</p> <code>['visual']</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the pystac Catalog.from_file() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>GeoDataFrame | pystac.ItemCollection</code> <p>If return_gdf is True, return a GeoDataFrame.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_items(\n    collection_id: str,\n    child_id: str,\n    return_gdf: Optional[bool] = True,\n    assets: Optional[List] = [\"visual\"],\n    **kwargs,\n):\n    \"\"\"Retrieve STAC items from Maxar's public STAC API.\n\n    Args:\n        collection_id (str): The collection ID, e.g., Kahramanmaras-turkey-earthquake-23\n            Use maxar_collections() to retrieve all available collection IDs.\n        child_id (str): The child collection ID, e.g., 1050050044DE7E00\n            Use maxar_child_collections() to retrieve all available child collection IDs.\n        return_gdf (bool, optional): If True, return a GeoDataFrame. Defaults to True.\n        assets (list, optional): A list of asset names to include in the GeoDataFrame.\n            It can be \"visual\", \"ms_analytic\", \"pan_analytic\", \"data-mask\". Defaults to ['visual'].\n        **kwargs: Additional keyword arguments to pass to the pystac Catalog.from_file() method.\n\n    Returns:\n        GeoDataFrame | pystac.ItemCollection: If return_gdf is True, return a GeoDataFrame.\n    \"\"\"\n\n    import pickle\n    import tempfile\n    from pystac import Catalog, ItemCollection\n\n    file_path = os.path.join(\n        tempfile.gettempdir(), f\"maxar-{collection_id}-{child_id}.pkl\"\n    )\n\n    if os.path.exists(file_path):\n        with open(file_path, \"rb\") as f:\n            items = pickle.load(f)\n        if return_gdf:\n            import geopandas as gpd\n\n            gdf = gpd.GeoDataFrame.from_features(\n                pystac.ItemCollection(items).to_dict(), crs=\"EPSG:4326\"\n            )\n            # convert bbox column type from list to string\n            gdf[\"proj:bbox\"] = [\",\".join(map(str, l)) for l in gdf[\"proj:bbox\"]]\n            if assets is not None:\n                if isinstance(assets, str):\n                    assets = [assets]\n                elif not isinstance(assets, list):\n                    raise ValueError(\"assets must be a list or a string.\")\n\n                for asset in assets:\n                    links = []\n                    for item in items:\n                        if asset in item.get_assets():\n                            link = item.get_assets()[asset].get_absolute_href()\n                            links.append(link)\n                        else:\n                            links.append(\"\")\n\n                    gdf[asset] = links\n\n            return gdf\n        else:\n            return items\n\n    if \"MAXAR_STAC_API\" in os.environ:\n        url = os.environ[\"MAXAR_STAC_API\"]\n    else:\n        url = \"https://maxar-opendata.s3.amazonaws.com/events/catalog.json\"\n\n    root_catalog = Catalog.from_file(url, **kwargs)\n\n    collection = root_catalog.get_child(collection_id)\n    child = collection.get_child(child_id)\n\n    items = ItemCollection(child.get_all_items())\n\n    with open(file_path, \"wb\") as f:\n        pickle.dump(items, f)\n\n    if return_gdf:\n        import geopandas as gpd\n\n        gdf = gpd.GeoDataFrame.from_features(\n            pystac.ItemCollection(items).to_dict(), crs=\"EPSG:4326\"\n        )\n        # convert bbox column type from list to string\n        gdf[\"proj:bbox\"] = [\",\".join(map(str, l)) for l in gdf[\"proj:bbox\"]]\n        if assets is not None:\n            if isinstance(assets, str):\n                assets = [assets]\n            elif not isinstance(assets, list):\n                raise ValueError(\"assets must be a list or a string.\")\n\n            for asset in assets:\n                links = []\n                for item in items:\n                    if asset in item.get_assets():\n                        link = item.get_assets()[asset].get_absolute_href()\n                        links.append(link)\n                    else:\n                        links.append(\"\")\n\n                gdf[asset] = links\n\n        return gdf\n    else:\n        return items\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_refresh","title":"<code>maxar_refresh()</code>","text":"<p>Refresh the cached Maxar STAC items.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_refresh():\n    \"\"\"Refresh the cached Maxar STAC items.\"\"\"\n    import tempfile\n\n    temp_dir = tempfile.gettempdir()\n    for f in os.listdir(temp_dir):\n        if f.startswith(\"maxar-\"):\n            os.remove(os.path.join(temp_dir, f))\n\n    print(\"Maxar STAC items cache has been refreshed.\")\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_search","title":"<code>maxar_search(collection, start_date=None, end_date=None, bbox=None, within=False, align=True)</code>","text":"<p>Search Maxar Open Data by collection ID, date range, and/or bounding box.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The collection ID, e.g., Kahramanmaras-turkey-earthquake-23. Use maxar_collections() to retrieve all available collection IDs.</p> required <code>start_date</code> <code>str</code> <p>The start date, e.g., 2023-01-01. Defaults to None.</p> <code>None</code> <code>end_date</code> <code>str</code> <p>The end date, e.g., 2023-12-31. Defaults to None.</p> <code>None</code> <code>bbox</code> <code>list | GeoDataFrame</code> <p>The bounding box to filter by. Can be a list of 4 coordinates or a file path or a GeoDataFrame.</p> <code>None</code> <code>within</code> <code>bool</code> <p>Whether to filter by the bounding box or the bounding box's interior. Defaults to False.</p> <code>False</code> <code>align</code> <code>bool</code> <p>If True, automatically aligns GeoSeries based on their indices. If False, the order of elements is preserved.</p> <code>True</code> <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>A GeoDataFrame containing the search results.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_search(\n    collection, start_date=None, end_date=None, bbox=None, within=False, align=True\n):\n    \"\"\"Search Maxar Open Data by collection ID, date range, and/or bounding box.\n\n    Args:\n        collection (str): The collection ID, e.g., Kahramanmaras-turkey-earthquake-23.\n            Use maxar_collections() to retrieve all available collection IDs.\n        start_date (str, optional): The start date, e.g., 2023-01-01. Defaults to None.\n        end_date (str, optional): The end date, e.g., 2023-12-31. Defaults to None.\n        bbox (list | GeoDataFrame): The bounding box to filter by. Can be a list of 4 coordinates or a file path or a GeoDataFrame.\n        within (bool, optional): Whether to filter by the bounding box or the bounding box's interior. Defaults to False.\n        align (bool, optional): If True, automatically aligns GeoSeries based on their indices. If False, the order of elements is preserved.\n\n    Returns:\n        GeoDataFrame: A GeoDataFrame containing the search results.\n    \"\"\"\n    import datetime\n    import pandas as pd\n    import geopandas as gpd\n    from shapely.geometry import Polygon\n\n    collections = maxar_collections()\n    if collection not in collections:\n        raise ValueError(\n            f\"Invalid collection name. Use maxar_collections() to retrieve all available collection IDs.\"\n        )\n\n    url = f\"https://raw.githubusercontent.com/giswqs/maxar-open-data/master/datasets/{collection}.geojson\"\n    data = gpd.read_file(url)\n\n    if bbox is not None:\n        bbox = gpd.GeoDataFrame(\n            geometry=[Polygon.from_bounds(*bbox)],\n            crs=\"epsg:4326\",\n        )\n        if within:\n            data = data[data.within(bbox.unary_union, align=align)]\n        else:\n            data = data[data.intersects(bbox.unary_union, align=align)]\n\n    date_field = \"datetime\"\n    new_field = f\"{date_field}_temp\"\n    data[new_field] = pd.to_datetime(data[date_field])\n\n    if end_date is None:\n        end_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n\n    if start_date is None:\n        start_date = data[new_field].min()\n\n    mask = (data[new_field] &gt;= start_date) &amp; (data[new_field] &lt;= end_date)\n    result = data.loc[mask]\n    return result.drop(columns=[new_field], axis=1)\n</code></pre>"},{"location":"stac/#anymap.stac.maxar_tile_url","title":"<code>maxar_tile_url(collection, tile, dtype='geojson', raw=True)</code>","text":"<p>Retrieve the URL to a Maxar Open Data tile.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The collection ID, e.g., Kahramanmaras-turkey-earthquake-23. Use maxar_collections() to retrieve all available collection IDs.</p> required <code>tile</code> <code>str</code> <p>The tile ID, e.g., 10300500D9F8E600.</p> required <code>dtype</code> <code>str</code> <p>The data type. It can be 'geojson', 'json' or 'tsv'. Defaults to 'geojson'.</p> <code>'geojson'</code> <code>raw</code> <code>bool</code> <p>If True, return the raw URL. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The URL to the tile.</p> Source code in <code>anymap/stac.py</code> <pre><code>def maxar_tile_url(collection, tile, dtype=\"geojson\", raw=True):\n    \"\"\"Retrieve the URL to a Maxar Open Data tile.\n\n    Args:\n\n        collection (str): The collection ID, e.g., Kahramanmaras-turkey-earthquake-23.\n            Use maxar_collections() to retrieve all available collection IDs.\n        tile (str): The tile ID, e.g., 10300500D9F8E600.\n        dtype (str, optional): The data type. It can be 'geojson', 'json' or 'tsv'. Defaults to 'geojson'.\n        raw (bool, optional): If True, return the raw URL. Defaults to True.\n\n    Returns:\n        str: The URL to the tile.\n    \"\"\"\n\n    collections = maxar_collections()\n    if collection not in collections:\n        raise ValueError(\n            f\"Invalid collection name. Use maxar_collections() to retrieve all available collection IDs.\"\n        )\n\n    if dtype not in [\"geojson\", \"json\", \"tsv\"]:\n        raise ValueError(f\"Invalid dtype. It can be 'geojson', 'json' or 'tsv'.\")\n\n    if raw:\n        url = f\"https://raw.githubusercontent.com/giswqs/maxar-open-data/master/datasets/{collection}/{tile}.{dtype}\"\n    else:\n        url = f\"https://github.com/giswqs/maxar-open-data/blob/master/datasets/{collection}/{tile}.{dtype}\"\n\n    return url\n</code></pre>"},{"location":"stac/#anymap.stac.oam_search","title":"<code>oam_search(bbox=None, start_date=None, end_date=None, limit=100, return_gdf=True, **kwargs)</code>","text":"<p>Search OpenAerialMap (https://openaerialmap.org) and return a GeoDataFrame or list of image metadata.</p> <p>Parameters:</p> Name Type Description Default <code>bbox</code> <code>list | str</code> <p>The bounding box [xmin, ymin, xmax, ymax] to search within. Defaults to None.</p> <code>None</code> <code>start_date</code> <code>str</code> <p>The start date to search within, such as \"2015-04-20T00:00:00.000Z\". Defaults to None.</p> <code>None</code> <code>end_date</code> <code>str</code> <p>The end date to search within, such as \"2015-04-21T00:00:00.000Z\". Defaults to None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The maximum number of results to return. Defaults to 100.</p> <code>100</code> <code>return_gdf</code> <code>bool</code> <p>If True, return a GeoDataFrame, otherwise return a list. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the API. See https://hotosm.github.io/oam-api/</p> <code>{}</code> <p>Returns:</p> Type Description <code>GeoDataFrame | list</code> <p>If return_gdf is True, return a GeoDataFrame. Otherwise, return a list.</p> Source code in <code>anymap/stac.py</code> <pre><code>def oam_search(\n    bbox=None, start_date=None, end_date=None, limit=100, return_gdf=True, **kwargs\n):\n    \"\"\"Search OpenAerialMap (https://openaerialmap.org) and return a GeoDataFrame or list of image metadata.\n\n    Args:\n        bbox (list | str, optional): The bounding box [xmin, ymin, xmax, ymax] to search within. Defaults to None.\n        start_date (str, optional): The start date to search within, such as \"2015-04-20T00:00:00.000Z\". Defaults to None.\n        end_date (str, optional): The end date to search within, such as \"2015-04-21T00:00:00.000Z\". Defaults to None.\n        limit (int, optional): The maximum number of results to return. Defaults to 100.\n        return_gdf (bool, optional): If True, return a GeoDataFrame, otherwise return a list. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the API. See https://hotosm.github.io/oam-api/\n\n    Returns:\n        GeoDataFrame | list: If return_gdf is True, return a GeoDataFrame. Otherwise, return a list.\n    \"\"\"\n\n    from shapely.geometry import Polygon\n    import geopandas as gpd\n\n    url = \"https://api.openaerialmap.org/meta\"\n    if bbox is not None:\n        if isinstance(bbox, str):\n            bbox = [float(x) for x in bbox.split(\",\")]\n        if not isinstance(bbox, list):\n            raise ValueError(\"bbox must be a list.\")\n        if len(bbox) != 4:\n            raise ValueError(\"bbox must be a list of 4 numbers.\")\n        bbox = \",\".join(map(str, bbox))\n        kwargs[\"bbox\"] = bbox\n\n    if start_date is not None:\n        kwargs[\"acquisition_from\"] = start_date\n\n    if end_date is not None:\n        kwargs[\"acquisition_to\"] = end_date\n\n    if limit is not None:\n        kwargs[\"limit\"] = limit\n\n    try:\n        r = requests.get(url, params=kwargs).json()\n        if \"results\" in r:\n            results = []\n            for result in r[\"results\"]:\n                if \"geojson\" in result:\n                    del result[\"geojson\"]\n                if \"projection\" in result:\n                    del result[\"projection\"]\n                if \"footprint\" in result:\n                    del result[\"footprint\"]\n                result = flatten_dict(result)\n                results.append(result)\n\n            if not return_gdf:\n                return results\n            else:\n                df = pd.DataFrame(results)\n\n                polygons = [Polygon.from_bounds(*bbox) for bbox in df[\"bbox\"]]\n                gdf = gpd.GeoDataFrame(geometry=polygons, crs=\"epsg:4326\")\n\n                return pd.concat([gdf, df], axis=1)\n\n        else:\n            print(\"No results found.\")\n            return None\n\n    except Exception as e:\n        return None\n</code></pre>"},{"location":"stac/#anymap.stac.stac_assets","title":"<code>stac_assets(url=None, collection=None, item=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get all assets of a STAC item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of assets.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_assets(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get all assets of a STAC item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A list of assets.\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if isinstance(titiler_endpoint, str):\n        r = requests.get(f\"{titiler_endpoint}/stac/assets\", params=kwargs).json()\n    else:\n        r = requests.get(titiler_endpoint.url_for_stac_assets(), params=kwargs).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.stac_bands","title":"<code>stac_bands(url=None, collection=None, item=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get band names of a single SpatialTemporal Asset Catalog (STAC) item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of band names</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_bands(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get band names of a single SpatialTemporal Asset Catalog (STAC) item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A list of band names\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if isinstance(titiler_endpoint, str):\n        r = requests.get(f\"{titiler_endpoint}/stac/assets\", params=kwargs).json()\n    else:\n        r = requests.get(titiler_endpoint.url_for_stac_assets(), params=kwargs).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.stac_bounds","title":"<code>stac_bounds(url=None, collection=None, item=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get the bounding box of a single SpatialTemporal Asset Catalog (STAC) item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of values representing [left, bottom, right, top]</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_bounds(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get the bounding box of a single SpatialTemporal Asset Catalog (STAC) item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A list of values representing [left, bottom, right, top]\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n        response = requests.get(url)\n        r = response.json()\n        if \"mosaicjson\" in r:\n            if \"bounds\" in r:\n                return r[\"bounds\"]\n\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n\n    if isinstance(titiler_endpoint, str):\n        r = requests.get(f\"{titiler_endpoint}/stac/bounds\", params=kwargs).json()\n    else:\n        r = requests.get(titiler_endpoint.url_for_stac_bounds(), params=kwargs).json()\n\n    bounds = r[\"bounds\"]\n    return bounds\n</code></pre>"},{"location":"stac/#anymap.stac.stac_center","title":"<code>stac_center(url=None, collection=None, item=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get the centroid of a single SpatialTemporal Asset Catalog (STAC) item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple representing (longitude, latitude)</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_center(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; Tuple[float, float]:\n    \"\"\"Get the centroid of a single SpatialTemporal Asset Catalog (STAC) item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        tuple: A tuple representing (longitude, latitude)\n    \"\"\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    bounds = stac_bounds(url, collection, item, titiler_endpoint, **kwargs)\n    center = ((bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2)  # (lon, lat)\n    return center\n</code></pre>"},{"location":"stac/#anymap.stac.stac_client","title":"<code>stac_client(url, headers=None, parameters=None, ignore_conformance=False, modifier=None, request_modifier=None, stac_io=None, return_col_id=False, get_root=True, **kwargs)</code>","text":"<p>Get the STAC client. It wraps the pystac.Client.open() method. See     https://pystac-client.readthedocs.io/en/stable/api.html#pystac_client.Client.open</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of a STAC Catalog.</p> required <code>headers</code> <code>dict</code> <p>A dictionary of additional headers to use in all requests made to any part of this Catalog/API. Defaults to None.</p> <code>None</code> <code>parameters</code> <code>dict</code> <p>Optional dictionary of query string parameters to include in all requests. Defaults to None.</p> <code>None</code> <code>ignore_conformance</code> <code>bool</code> <p>Ignore any advertised Conformance Classes in this Catalog/API. This means that functions will skip checking conformance, and may throw an unknown error if that feature is not supported, rather than a NotImplementedError. Defaults to False.</p> <code>False</code> <code>modifier</code> <code>function</code> <p>A callable that modifies the children collection and items returned by this Client. This can be useful for injecting authentication parameters into child assets to access data from non-public sources. Defaults to None.</p> <code>None</code> <code>request_modifier</code> <code>function</code> <p>A callable that either modifies a Request instance or returns a new one. This can be useful for injecting Authentication headers and/or signing fully-formed requests (e.g. signing requests using AWS SigV4). The callable should expect a single argument, which will be an instance of requests.Request. If the callable returns a requests.Request, that will be used. Alternately, the callable may simply modify the provided request object and return None.</p> <code>None</code> <code>stac_io</code> <code>pystac.stac_io</code> <p>A StacApiIO object to use for I/O requests. Generally, leave this to the default. However in cases where customized I/O processing is required, a custom instance can be provided here.</p> <code>None</code> <code>return_col_id</code> <code>bool</code> <p>Return the collection ID. Defaults to False.</p> <code>False</code> <code>get_root</code> <code>bool</code> <p>Get the root link of the STAC object. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the pystac.Client.open() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>pystac.Client</code> <p>The STAC client.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_client(\n    url: str,\n    headers: Optional[Dict] = None,\n    parameters: Optional[Dict] = None,\n    ignore_conformance: Optional[bool] = False,\n    modifier: Optional[Callable] = None,\n    request_modifier: Optional[Callable] = None,\n    stac_io=None,\n    return_col_id: Optional[bool] = False,\n    get_root: Optional[bool] = True,\n    **kwargs,\n):\n    \"\"\"Get the STAC client. It wraps the pystac.Client.open() method. See\n        https://pystac-client.readthedocs.io/en/stable/api.html#pystac_client.Client.open\n\n    Args:\n        url (str): The URL of a STAC Catalog.\n        headers (dict, optional):  A dictionary of additional headers to use in all requests\n            made to any part of this Catalog/API. Defaults to None.\n        parameters (dict, optional): Optional dictionary of query string parameters to include in all requests.\n            Defaults to None.\n        ignore_conformance (bool, optional): Ignore any advertised Conformance Classes in this Catalog/API.\n            This means that functions will skip checking conformance, and may throw an unknown error\n            if that feature is not supported, rather than a NotImplementedError. Defaults to False.\n        modifier (function, optional): A callable that modifies the children collection and items\n            returned by this Client. This can be useful for injecting authentication parameters\n            into child assets to access data from non-public sources. Defaults to None.\n        request_modifier (function, optional): A callable that either modifies a Request instance or returns\n            a new one. This can be useful for injecting Authentication headers and/or signing fully-formed\n            requests (e.g. signing requests using AWS SigV4). The callable should expect a single argument,\n            which will be an instance of requests.Request. If the callable returns a requests.Request, that\n            will be used. Alternately, the callable may simply modify the provided request object and\n            return None.\n        stac_io (pystac.stac_io, optional): A StacApiIO object to use for I/O requests. Generally, leave\n            this to the default. However in cases where customized I/O processing is required, a custom\n            instance can be provided here.\n        return_col_id (bool, optional): Return the collection ID. Defaults to False.\n        get_root (bool, optional): Get the root link of the STAC object. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the pystac.Client.open() method.\n\n    Returns:\n        pystac.Client: The STAC client.\n    \"\"\"\n    from pystac_client import Client\n\n    collection_id = None\n\n    if not get_root:\n        return_col_id = False\n\n    try:\n        if get_root:\n            root = stac_root_link(url, return_col_id=return_col_id)\n            # Handle case where root is None\n            if root is None:\n                if return_col_id:\n                    root = (url, None)\n                else:\n                    root = url\n        else:\n            root = url\n\n        if return_col_id:\n            client = Client.open(\n                root[0],\n                headers,\n                parameters,\n                ignore_conformance,\n                modifier,\n                request_modifier,\n                stac_io,\n                **kwargs,\n            )\n            collection_id = root[1]\n            return client, collection_id\n        else:\n            client = Client.open(\n                root,\n                headers,\n                parameters,\n                ignore_conformance,\n                modifier,\n                request_modifier,\n                stac_io,\n                **kwargs,\n            )\n            return client, client.id\n\n    except Exception as e:\n        print(e)\n        return None\n</code></pre>"},{"location":"stac/#anymap.stac.stac_collections","title":"<code>stac_collections(url, return_ids=False, get_root=True, **kwargs)</code>","text":"<p>Get the collection IDs of a STAC catalog.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The STAC catalog URL.</p> required <code>return_ids</code> <code>bool</code> <p>Return collection IDs. Defaults to False.</p> <code>False</code> <code>get_root</code> <code>bool</code> <p>Get the root link of the STAC object. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the stac_client() method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of collection IDs.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_collections(\n    url: str, return_ids: Optional[bool] = False, get_root=True, **kwargs\n) -&gt; List:\n    \"\"\"Get the collection IDs of a STAC catalog.\n\n    Args:\n        url (str): The STAC catalog URL.\n        return_ids (bool, optional): Return collection IDs. Defaults to False.\n        get_root (bool, optional): Get the root link of the STAC object. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the stac_client() method.\n\n    Returns:\n        list: A list of collection IDs.\n    \"\"\"\n    try:\n        client, _ = stac_client(url, get_root=get_root, **kwargs)\n        collections = client.get_all_collections()\n\n        if return_ids:\n            return [c.id for c in collections]\n        else:\n            return collections\n\n    except Exception as e:\n        print(e)\n        return None\n</code></pre>"},{"location":"stac/#anymap.stac.stac_info","title":"<code>stac_info(url=None, collection=None, item=None, assets=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get band info of a STAC item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>assets</code> <code>str | list</code> <p>The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band info.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_info(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    assets: Union[str, List] = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get band info of a STAC item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        assets (str | list): The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A dictionary of band info.\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n    if assets is not None:\n        kwargs[\"assets\"] = assets\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if isinstance(titiler_endpoint, str):\n        r = requests.get(f\"{titiler_endpoint}/stac/info\", params=kwargs).json()\n    else:\n        r = requests.get(titiler_endpoint.url_for_stac_info(), params=kwargs).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.stac_info_geojson","title":"<code>stac_info_geojson(url=None, collection=None, item=None, assets=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get band info of a STAC item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>assets</code> <code>str | list</code> <p>The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band info.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_info_geojson(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    assets: Union[str, List] = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get band info of a STAC item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        assets (str | list): The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A dictionary of band info.\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n    if assets is not None:\n        kwargs[\"assets\"] = assets\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if isinstance(titiler_endpoint, str):\n        r = requests.get(f\"{titiler_endpoint}/stac/info.geojson\", params=kwargs).json()\n    else:\n        r = requests.get(\n            titiler_endpoint.url_for_stac_info_geojson(), params=kwargs\n        ).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.stac_min_max","title":"<code>stac_min_max(url=None, collection=None, item=None, assets=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get the min and max values of a STAC item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>assets</code> <code>str | list</code> <p>The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band statistics.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_min_max(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    assets: Union[str, List] = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get the min and max values of a STAC item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        assets (str | list): The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A dictionary of band statistics.\n    \"\"\"\n\n    stats = stac_stats(url, collection, item, assets, titiler_endpoint, **kwargs)\n\n    values = stats.values()\n\n    try:\n        min_values = [v[\"min\"] for v in values]\n        max_values = [v[\"max\"] for v in values]\n\n        return min(min_values), max(max_values)\n    except Exception as e:\n        return None, None\n</code></pre>"},{"location":"stac/#anymap.stac.stac_object_type","title":"<code>stac_object_type(url, **kwargs)</code>","text":"<p>Get the STAC object type.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The STAC object URL.</p> required <code>**kwargs</code> <code>Any</code> <p>Keyword arguments for pystac.STACObject.from_file().</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The STAC object type, can be \"catalog\", \"collection\", or \"item\". Returns None if unable to determine type.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_object_type(url: str, **kwargs: Any) -&gt; Optional[str]:\n    \"\"\"Get the STAC object type.\n\n    Args:\n        url: The STAC object URL.\n        **kwargs: Keyword arguments for pystac.STACObject.from_file().\n\n    Returns:\n        The STAC object type, can be \"catalog\", \"collection\", or \"item\".\n        Returns None if unable to determine type.\n    \"\"\"\n    try:\n        obj = pystac.STACObject.from_file(url, **kwargs)\n\n        if isinstance(obj, pystac.Collection):\n            return \"collection\"\n        elif isinstance(obj, pystac.Item):\n            return \"item\"\n        elif isinstance(obj, pystac.Catalog):\n            return \"catalog\"\n\n    except Exception as e:\n        print(e)\n        return None\n</code></pre>"},{"location":"stac/#anymap.stac.stac_pixel_value","title":"<code>stac_pixel_value(lon, lat, url=None, collection=None, item=None, assets=None, titiler_endpoint=None, verbose=True, **kwargs)</code>","text":"<p>Get pixel value from STAC assets.</p> <p>Parameters:</p> Name Type Description Default <code>lon</code> <code>float</code> <p>Longitude of the pixel.</p> required <code>lat</code> <code>float</code> <p>Latitude of the pixel.</p> required <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>assets</code> <code>str | list</code> <p>The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Print out the error message. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of pixel values for each asset.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_pixel_value(\n    lon: float,\n    lat: float,\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    assets: Union[str, List] = None,\n    titiler_endpoint: Optional[str] = None,\n    verbose: Optional[bool] = True,\n    **kwargs,\n):\n    \"\"\"Get pixel value from STAC assets.\n\n    Args:\n        lon (float): Longitude of the pixel.\n        lat (float): Latitude of the pixel.\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        assets (str | list): The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n        verbose (bool, optional): Print out the error message. Defaults to True.\n\n    Returns:\n        list: A dictionary of pixel values for each asset.\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n\n    if assets is None:\n        assets = stac_assets(\n            url=url,\n            collection=collection,\n            item=item,\n            titiler_endpoint=titiler_endpoint,\n        )\n    kwargs[\"assets\"] = assets\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if isinstance(titiler_endpoint, str):\n\n        r = requests.get(\n            f\"{titiler_endpoint}/stac/point/{lon},{lat}\", params=kwargs\n        ).json()\n    else:\n        r = requests.get(\n            titiler_endpoint.url_for_stac_pixel_value(lon, lat), params=kwargs\n        ).json()\n\n    if \"detail\" in r:\n        if verbose:\n            print(r[\"detail\"])\n        return None\n    else:\n        values = r[\"values\"]\n        if isinstance(assets, str):\n            assets = assets.split(\",\")\n        result = dict(zip(assets, values))\n        return result\n</code></pre>"},{"location":"stac/#anymap.stac.stac_root_link","title":"<code>stac_root_link(url, return_col_id=False, **kwargs)</code>","text":"<p>Get the root link of a STAC object.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The STAC object URL.</p> required <code>return_col_id</code> <code>Optional[bool]</code> <p>Return the collection ID if the STAC object is a collection. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Keyword arguments for pystac.STACObject.from_file().</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[str, Tuple[str, Optional[str]]]</code> <p>The root link of the STAC object. Returns None if no root link found. If return_col_id is True, returns (root_link, collection_id).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If FeatureCollection contains no features.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_root_link(\n    url: str, return_col_id: Optional[bool] = False, **kwargs: Any\n) -&gt; Union[str, Tuple[str, Optional[str]], None]:\n    \"\"\"Get the root link of a STAC object.\n\n    Args:\n        url: The STAC object URL.\n        return_col_id: Return the collection ID if the STAC object\n            is a collection. Defaults to False.\n        **kwargs: Keyword arguments for pystac.STACObject.from_file().\n\n    Returns:\n        The root link of the STAC object. Returns None if no root link found.\n        If return_col_id is True, returns (root_link, collection_id).\n\n    Raises:\n        ValueError: If FeatureCollection contains no features.\n    \"\"\"\n    collection_id = None\n    try:\n        response = requests.get(url, **kwargs)\n        response.raise_for_status()\n        data = response.json()\n\n        # Handle FeatureCollection from /items endpoint\n        if data.get(\"type\") == \"FeatureCollection\":\n            features = data.get(\"features\", [])\n            if not features:\n                raise ValueError(\"FeatureCollection contains no features.\")\n            item = pystac.Item.from_dict(features[0])\n            collection_id = item.collection_id\n            root = item.get_root_link()\n            return (\n                (root.get_href() if root else item.get_self_href(), collection_id)\n                if return_col_id\n                else root.get_href() if root else item.get_self_href()\n            )\n\n        # Handle STAC API objects (Collection, Catalog, etc.)\n        links = data.get(\"links\", [])\n        root_href = None\n        self_href = None\n\n        for link in links:\n            if link.get(\"rel\") == \"root\":\n                root_href = link.get(\"href\")\n            elif link.get(\"rel\") == \"self\":\n                self_href = link.get(\"href\")\n\n        # Get collection/catalog ID if requested\n        if return_col_id:\n            if data.get(\"type\") in [\"Collection\", \"Catalog\"]:\n                collection_id = data.get(\"id\")\n\n        # Determine the root href:\n        # 1. If there's an explicit root link, use it\n        # 2. If there's no root link but there's a self link, the self link is the root\n        #    (this is common for root catalogs in STAC APIs)\n        # 3. Otherwise, fall back to parsing as a regular STAC object\n        if root_href:\n            return (root_href, collection_id) if return_col_id else root_href\n        elif self_href and not root_href:\n            # When there's no root link, self link often indicates this IS the root\n            return (self_href, collection_id) if return_col_id else self_href\n\n        # Fallback: parse as regular STAC object using pystac\n        obj = pystac.STACObject.from_dict(data)\n        if isinstance(obj, (pystac.Collection, pystac.Catalog)):\n            collection_id = obj.id\n\n        root = obj.get_root_link()\n        href = root.get_href() if root else obj.get_self_href()\n        return (href, collection_id) if return_col_id else href\n\n    except Exception as e:\n        print(f\"Failed to resolve STAC root from {url}: {e}\")\n        return (None, None) if return_col_id else None\n</code></pre>"},{"location":"stac/#anymap.stac.stac_search","title":"<code>stac_search(url, method='POST', max_items=None, limit=100, ids=None, collections=None, bbox=None, intersects=None, datetime=None, query=None, filter=None, filter_lang=None, sortby=None, fields=None, get_collection=False, get_items=False, get_assets=False, get_links=False, get_gdf=False, get_info=False, get_root=True, **kwargs)</code>","text":"<p>Search a STAC API. The function wraps the pysatc_client.Client.search() method. See     https://pystac-client.readthedocs.io/en/stable/api.html#pystac_client.Client.search</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The STAC API URL.</p> required <code>method</code> <code>str</code> <p>The HTTP method to use when making a request to the service. This must be either \"GET\", \"POST\", or None. If None, this will default to \"POST\". If a \"POST\" request receives a 405 status for the response, it will automatically retry with \"GET\" for all subsequent requests. Defaults to \"POST\".</p> <code>'POST'</code> <code>max_items</code> <code>init</code> <p>The maximum number of items to return from the search, even if there are more matching results. This client to limit the total number of Items returned from the items(), item_collections(), and items_as_dicts methods(). The client will continue to request pages of items until the number of max items is reached. This parameter defaults to 100. Setting this to None will allow iteration over a possibly very large number of results.. Defaults to None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>A recommendation to the service as to the number of items to return per page of results. Defaults to 100.</p> <code>100</code> <code>ids</code> <code>list</code> <p>List of one or more Item ids to filter on. Defaults to None.</p> <code>None</code> <code>collections</code> <code>list</code> <p>List of one or more Collection IDs or pystac.Collection instances. Only Items in one of the provided Collections will be searched. Defaults to None.</p> <code>None</code> <code>bbox</code> <code>list | tuple</code> <p>A list, tuple, or iterator representing a bounding box of 2D or 3D coordinates. Results will be filtered to only those intersecting the bounding box. Defaults to None.</p> <code>None</code> <code>intersects</code> <code>str | dict</code> <p>A string or dictionary representing a GeoJSON geometry, or an object that implements a geo_interface property, as supported by several libraries including Shapely, ArcPy, PySAL, and geojson. Results filtered to only those intersecting the geometry. Defaults to None.</p> <code>None</code> <code>datetime</code> <code>str</code> <p>Either a single datetime or datetime range used to filter results. You may express a single datetime using a datetime.datetime instance, a RFC 3339-compliant timestamp, or a simple date string (see below). Instances of datetime.datetime may be either timezone aware or unaware. Timezone aware instances will be converted to a UTC timestamp before being passed to the endpoint. Timezone unaware instances are assumed to represent UTC timestamps. You may represent a datetime range using a \"/\" separated string as described in the spec, or a list, tuple, or iterator of 2 timestamps or datetime instances. For open-ended ranges, use either \"..\" ('2020-01-01:00:00:00Z/..', ['2020-01-01:00:00:00Z', '..']) or a value of None (['2020-01-01:00:00:00Z', None]). If using a simple date string, the datetime can be specified in YYYY-mm-dd format, optionally truncating to YYYY-mm or just YYYY. Simple date strings will be expanded to include the entire time period. Defaults to None.</p> <code>None</code> <code>query</code> <code>list</code> <p>List or JSON of query parameters as per the STAC API query extension. such as {\"eo:cloud_cover\":{\"lt\":10}}. Defaults to None.</p> <code>None</code> <code>filter</code> <code>dict</code> <p>JSON of query parameters as per the STAC API filter extension. Defaults to None.</p> <code>None</code> <code>filter_lang</code> <code>str</code> <p>Language variant used in the filter body. If filter is a dictionary or not provided, defaults to \u2018cql2-json\u2019. If filter is a string, defaults to cql2-text. Defaults to None.</p> <code>None</code> <code>sortby</code> <code>str | list</code> <p>A single field or list of fields to sort the response by. such as [{ 'field': 'properties.eo:cloud_cover', 'direction': 'asc' }]. Defaults to None.</p> <code>None</code> <code>fields</code> <code>list</code> <p>A list of fields to include in the response. Note this may result in invalid STAC objects, as they may not have required fields. Use items_as_dicts to avoid object unmarshalling errors. Defaults to None.</p> <code>None</code> <code>get_collection</code> <code>bool</code> <p>True to return a pystac.ItemCollection. Defaults to False.</p> <code>False</code> <code>get_items</code> <code>bool</code> <p>True to return a list of pystac.Item. Defaults to False.</p> <code>False</code> <code>get_assets</code> <code>bool</code> <p>True to return a list of pystac.Asset. Defaults to False.</p> <code>False</code> <code>get_links</code> <code>bool</code> <p>True to return a list of links. Defaults to False.</p> <code>False</code> <code>get_gdf</code> <code>bool</code> <p>True to return a GeoDataFrame. Defaults to False.</p> <code>False</code> <code>get_info</code> <code>bool</code> <p>True to return a dictionary of STAC items. Defaults to False.</p> <code>False</code> <code>get_root</code> <code>bool</code> <p>Get the root link of the STAC object. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the stac_client() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list | pystac.ItemCollection </code> <p>The search results as a list of links or a pystac.ItemCollection.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_search(\n    url: str,\n    method: Optional[str] = \"POST\",\n    max_items: Optional[int] = None,\n    limit: Optional[int] = 100,\n    ids: Optional[List] = None,\n    collections: Optional[List] = None,\n    bbox: Optional[Union[List, Tuple]] = None,\n    intersects: Optional[Union[str, Dict]] = None,\n    datetime: Optional[str] = None,\n    query: Optional[List] = None,\n    filter: Optional[Dict] = None,\n    filter_lang: Optional[str] = None,\n    sortby: Optional[Union[List, str]] = None,\n    fields: Optional[List] = None,\n    get_collection: Optional[bool] = False,\n    get_items: Optional[bool] = False,\n    get_assets: Optional[bool] = False,\n    get_links: Optional[bool] = False,\n    get_gdf: Optional[bool] = False,\n    get_info: Optional[bool] = False,\n    get_root: Optional[bool] = True,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Search a STAC API. The function wraps the pysatc_client.Client.search() method. See\n        https://pystac-client.readthedocs.io/en/stable/api.html#pystac_client.Client.search\n\n    Args:\n        url (str): The STAC API URL.\n        method (str, optional): The HTTP method to use when making a request to the service.\n            This must be either \"GET\", \"POST\", or None. If None, this will default to \"POST\".\n            If a \"POST\" request receives a 405 status for the response, it will automatically\n            retry with \"GET\" for all subsequent requests. Defaults to \"POST\".\n        max_items (init, optional): The maximum number of items to return from the search,\n            even if there are more matching results. This client to limit the total number of\n            Items returned from the items(), item_collections(), and items_as_dicts methods().\n            The client will continue to request pages of items until the number of max items\n            is reached. This parameter defaults to 100. Setting this to None will allow iteration\n            over a possibly very large number of results.. Defaults to None.\n        limit (int, optional): A recommendation to the service as to the number of items to\n            return per page of results. Defaults to 100.\n        ids (list, optional): List of one or more Item ids to filter on. Defaults to None.\n        collections (list, optional): List of one or more Collection IDs or pystac.Collection instances.\n            Only Items in one of the provided Collections will be searched. Defaults to None.\n        bbox (list | tuple, optional): A list, tuple, or iterator representing a bounding box of 2D\n            or 3D coordinates. Results will be filtered to only those intersecting the bounding box.\n            Defaults to None.\n        intersects (str | dict, optional):  A string or dictionary representing a GeoJSON geometry, or\n            an object that implements a __geo_interface__ property, as supported by several\n            libraries including Shapely, ArcPy, PySAL, and geojson. Results filtered to only\n            those intersecting the geometry. Defaults to None.\n        datetime (str, optional): Either a single datetime or datetime range used to filter results.\n            You may express a single datetime using a datetime.datetime instance, a RFC 3339-compliant\n            timestamp, or a simple date string (see below). Instances of datetime.datetime may be either\n            timezone aware or unaware. Timezone aware instances will be converted to a UTC timestamp\n            before being passed to the endpoint. Timezone unaware instances are assumed to represent\n            UTC timestamps. You may represent a datetime range using a \"/\" separated string as described\n            in the spec, or a list, tuple, or iterator of 2 timestamps or datetime instances.\n            For open-ended ranges, use either \"..\" ('2020-01-01:00:00:00Z/..', ['2020-01-01:00:00:00Z', '..'])\n            or a value of None (['2020-01-01:00:00:00Z', None]). If using a simple date string,\n            the datetime can be specified in YYYY-mm-dd format, optionally truncating to\n            YYYY-mm or just YYYY. Simple date strings will be expanded to include the entire\n            time period. Defaults to None.\n        query (list, optional): List or JSON of query parameters as per the STAC API query extension.\n            such as {\"eo:cloud_cover\":{\"lt\":10}}. Defaults to None.\n        filter (dict, optional): JSON of query parameters as per the STAC API filter extension. Defaults to None.\n        filter_lang (str, optional): Language variant used in the filter body. If filter is a dictionary\n            or not provided, defaults to \u2018cql2-json\u2019. If filter is a string, defaults to cql2-text. Defaults to None.\n        sortby (str | list, optional): A single field or list of fields to sort the response by.\n            such as [{ 'field': 'properties.eo:cloud_cover', 'direction': 'asc' }]. Defaults to None.\n        fields (list, optional): A list of fields to include in the response. Note this may result in\n            invalid STAC objects, as they may not have required fields. Use items_as_dicts to avoid object\n            unmarshalling errors. Defaults to None.\n        get_collection (bool, optional): True to return a pystac.ItemCollection. Defaults to False.\n        get_items (bool, optional): True to return a list of pystac.Item. Defaults to False.\n        get_assets (bool, optional): True to return a list of pystac.Asset. Defaults to False.\n        get_links (bool, optional): True to return a list of links. Defaults to False.\n        get_gdf (bool, optional): True to return a GeoDataFrame. Defaults to False.\n        get_info (bool, optional): True to return a dictionary of STAC items. Defaults to False.\n        get_root (bool, optional): Get the root link of the STAC object. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the stac_client() function.\n\n    Returns:\n        list | pystac.ItemCollection : The search results as a list of links or a pystac.ItemCollection.\n    \"\"\"\n\n    client, collection_id = stac_client(\n        url, return_col_id=True, get_root=get_root, **kwargs\n    )\n\n    if client is None:\n        return None\n    else:\n        if isinstance(intersects, dict) and \"geometry\" in intersects:\n            intersects = intersects[\"geometry\"]\n\n        if collection_id is not None and collections is None:\n            collections = [collection_id]\n\n        search = client.search(\n            method=method,\n            max_items=max_items,\n            limit=limit,\n            ids=ids,\n            collections=collections,\n            bbox=bbox,\n            intersects=intersects,\n            datetime=datetime,\n            query=query,\n            filter=filter,\n            filter_lang=filter_lang,\n            sortby=sortby,\n            fields=fields,\n        )\n\n        if get_collection:\n            return search.item_collection()\n        elif get_items:\n            return list(search.items())\n        elif get_assets:\n            assets = {}\n            for item in search.items():\n                assets[item.id] = {}\n                for key, value in item.get_assets().items():\n                    assets[item.id][key] = value.href\n            return assets\n        elif get_links:\n            return [item.get_self_href() for item in search.items()]\n        elif get_gdf:\n            import geopandas as gpd\n\n            gdf = gpd.GeoDataFrame.from_features(\n                search.item_collection().to_dict(), crs=\"EPSG:4326\"\n            )\n            return gdf\n        elif get_info:\n            items = search.items()\n            info = {}\n            for item in items:\n                info[item.id] = {\n                    \"id\": item.id,\n                    \"href\": item.get_self_href(),\n                    \"bands\": list(item.get_assets().keys()),\n                    \"assets\": item.get_assets(),\n                }\n            return info\n        else:\n            return search\n</code></pre>"},{"location":"stac/#anymap.stac.stac_search_to_df","title":"<code>stac_search_to_df(search, **kwargs)</code>","text":"<p>Convert STAC search result to a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>pystac_client.item_search</code> <p>The search result returned by leafmap.stac_search().</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to the DataFrame.drop() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A Pandas DataFrame object.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_search_to_df(search, **kwargs) -&gt; pd.DataFrame:\n    \"\"\"Convert STAC search result to a DataFrame.\n\n    Args:\n        search (pystac_client.item_search): The search result returned by leafmap.stac_search().\n        **kwargs: Additional keyword arguments to pass to the DataFrame.drop() function.\n\n    Returns:\n        DataFrame: A Pandas DataFrame object.\n    \"\"\"\n    gdf = stac_search_to_gdf(search)\n    return gdf.drop(columns=[\"geometry\"], **kwargs)\n</code></pre>"},{"location":"stac/#anymap.stac.stac_search_to_dict","title":"<code>stac_search_to_dict(search, **kwargs)</code>","text":"<p>Convert STAC search result to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>pystac_client.item_search</code> <p>The search result returned by leafmap.stac_search().</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary of STAC items, with the stac item id as the key, and the stac item as the value.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_search_to_dict(search, **kwargs) -&gt; Dict:\n    \"\"\"Convert STAC search result to a dictionary.\n\n    Args:\n        search (pystac_client.item_search): The search result returned by leafmap.stac_search().\n\n    Returns:\n        dict: A dictionary of STAC items, with the stac item id as the key, and the stac item as the value.\n    \"\"\"\n\n    items = list(search.item_collection())\n    info = {}\n    for item in items:\n        info[item.id] = {\n            \"id\": item.id,\n            \"href\": item.get_self_href(),\n            \"bands\": list(item.get_assets().keys()),\n            \"assets\": item.get_assets(),\n        }\n        links = {}\n        assets = item.get_assets()\n        for key, value in assets.items():\n            links[key] = value.href\n        info[item.id][\"links\"] = links\n    return info\n</code></pre>"},{"location":"stac/#anymap.stac.stac_search_to_gdf","title":"<code>stac_search_to_gdf(search, **kwargs)</code>","text":"<p>Convert STAC search result to a GeoDataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>pystac_client.item_search</code> <p>The search result returned by leafmap.stac_search().</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to the GeoDataFrame.from_features() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>A GeoPandas GeoDataFrame object.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_search_to_gdf(search, **kwargs):\n    \"\"\"Convert STAC search result to a GeoDataFrame.\n\n    Args:\n        search (pystac_client.item_search): The search result returned by leafmap.stac_search().\n        **kwargs: Additional keyword arguments to pass to the GeoDataFrame.from_features() function.\n\n    Returns:\n        GeoDataFrame: A GeoPandas GeoDataFrame object.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.GeoDataFrame.from_features(\n        search.item_collection().to_dict(), crs=\"EPSG:4326\", **kwargs\n    )\n    return gdf\n</code></pre>"},{"location":"stac/#anymap.stac.stac_search_to_list","title":"<code>stac_search_to_list(search, **kwargs)</code>","text":"<p>Convert STAC search result to a list.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>pystac_client.item_search</code> <p>The search result returned by leafmap.stac_search().</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of STAC items.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_search_to_list(search, **kwargs) -&gt; List:\n    \"\"\"Convert STAC search result to a list.\n\n    Args:\n        search (pystac_client.item_search): The search result returned by leafmap.stac_search().\n\n    Returns:\n        list: A list of STAC items.\n    \"\"\"\n\n    return search.item_collections()\n</code></pre>"},{"location":"stac/#anymap.stac.stac_stats","title":"<code>stac_stats(url=None, collection=None, item=None, assets=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get band statistics of a STAC item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>assets</code> <code>str | list</code> <p>The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary of band statistics.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_stats(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    assets: Union[str, List] = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; List:\n    \"\"\"Get band statistics of a STAC item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        assets (str | list): The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        list: A dictionary of band statistics.\n    \"\"\"\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n    if assets is not None:\n        kwargs[\"assets\"] = assets\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n    if isinstance(titiler_endpoint, str):\n        r = requests.get(f\"{titiler_endpoint}/stac/statistics\", params=kwargs).json()\n    else:\n        r = requests.get(\n            titiler_endpoint.url_for_stac_statistics(), params=kwargs\n        ).json()\n\n    return r\n</code></pre>"},{"location":"stac/#anymap.stac.stac_tile","title":"<code>stac_tile(url=None, collection=None, item=None, assets=None, bands=None, titiler_endpoint=None, **kwargs)</code>","text":"<p>Get a tile layer from a single SpatialTemporal Asset Catalog (STAC) item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json</p> <code>None</code> <code>collection</code> <code>str</code> <p>The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.</p> <code>None</code> <code>item</code> <code>str</code> <p>The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.</p> <code>None</code> <code>assets</code> <code>str | list</code> <p>The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].</p> <code>None</code> <code>bands</code> <code>list</code> <p>A list of band names, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"]</p> <code>None</code> <code>titiler_endpoint</code> <code>str</code> <p>TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"https://planetarycomputer.microsoft.com/api/data/v1\", \"planetary-computer\", \"pc\". Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Returns the STAC Tile layer URL.</p> Source code in <code>anymap/stac.py</code> <pre><code>def stac_tile(\n    url: str = None,\n    collection: str = None,\n    item: str = None,\n    assets: Union[str, List] = None,\n    bands: list = None,\n    titiler_endpoint: Optional[str] = None,\n    **kwargs,\n) -&gt; str:\n    \"\"\"Get a tile layer from a single SpatialTemporal Asset Catalog (STAC) item.\n\n    Args:\n        url (str): HTTP URL to a STAC item, e.g., https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/S5_2007/S5_11055_6057_20070622/S5_11055_6057_20070622.json\n        collection (str): The Microsoft Planetary Computer STAC collection ID, e.g., landsat-8-c2-l2.\n        item (str): The Microsoft Planetary Computer STAC item ID, e.g., LC08_L2SP_047027_20201204_02_T1.\n        assets (str | list): The Microsoft Planetary Computer STAC asset ID, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"].\n        bands (list): A list of band names, e.g., [\"SR_B7\", \"SR_B5\", \"SR_B4\"]\n        titiler_endpoint (str, optional): TiTiler endpoint, e.g., \"https://giswqs-titiler-endpoint.hf.space\", \"https://planetarycomputer.microsoft.com/api/data/v1\", \"planetary-computer\", \"pc\". Defaults to None.\n\n    Returns:\n        str: Returns the STAC Tile layer URL.\n    \"\"\"\n    import json\n\n    if url is None and collection is None:\n        raise ValueError(\"Either url or collection must be specified.\")\n\n    if collection is not None and titiler_endpoint is None:\n        titiler_endpoint = \"planetary-computer\"\n\n    if isinstance(url, pystac.Item):\n        try:\n            url = url.self_href\n        except Exception as e:\n            print(e)\n\n    if url is not None:\n        kwargs[\"url\"] = url\n    if collection is not None:\n        kwargs[\"collection\"] = collection\n    if item is not None:\n        kwargs[\"item\"] = item\n\n    if \"palette\" in kwargs:\n        kwargs[\"colormap_name\"] = kwargs[\"palette\"].lower()\n        del kwargs[\"palette\"]\n\n    if isinstance(bands, list) and len(set(bands)) == 1:\n        bands = bands[0]\n\n    if isinstance(assets, list) and len(set(assets)) == 1:\n        assets = assets[0]\n\n    titiler_endpoint = check_titiler_endpoint(titiler_endpoint)\n\n    if \"expression\" in kwargs and (\"asset_as_band\" not in kwargs):\n        kwargs[\"asset_as_band\"] = True\n\n    mosaic_json = False\n\n    if isinstance(titiler_endpoint, PlanetaryComputerEndpoint):\n        if isinstance(bands, str):\n            bands = bands.split(\",\")\n        if isinstance(assets, str):\n            assets = assets.split(\",\")\n        if assets is None and (bands is not None):\n            assets = bands\n        else:\n            kwargs[\"bidx\"] = bands\n\n        kwargs[\"assets\"] = assets\n\n        if (\n            (assets is not None)\n            and (\"asset_expression\" not in kwargs)\n            and (\"expression\" not in kwargs)\n            and (\"rescale\" not in kwargs)\n        ):\n            try:\n                stats = stac_stats(\n                    collection=collection,\n                    item=item,\n                    assets=assets,\n                    titiler_endpoint=titiler_endpoint,\n                )\n            except Exception as e:\n                titiler_endpoint = \"https://titiler.xyz\"\n                stats = stac_stats(\n                    collection=collection,\n                    item=item,\n                    assets=assets,\n                    titiler_endpoint=titiler_endpoint,\n                )\n\n            if \"detail\" not in stats:\n                try:\n                    percentile_2 = min([stats[s][\"percentile_2\"] for s in stats])\n                    percentile_98 = max([stats[s][\"percentile_98\"] for s in stats])\n                except:\n                    percentile_2 = min(\n                        [\n                            stats[s][list(stats[s].keys())[0]][\"percentile_2\"]\n                            for s in stats\n                        ]\n                    )\n                    percentile_98 = max(\n                        [\n                            stats[s][list(stats[s].keys())[0]][\"percentile_98\"]\n                            for s in stats\n                        ]\n                    )\n                kwargs[\"rescale\"] = f\"{percentile_2},{percentile_98}\"\n            else:\n                print(stats[\"detail\"])  # When operation times out.\n\n    else:\n        data = requests.get(url).json()\n        if \"mosaicjson\" in data:\n            mosaic_json = True\n\n        if isinstance(bands, str):\n            bands = bands.split(\",\")\n        if isinstance(assets, str):\n            assets = assets.split(\",\")\n\n        if assets is None:\n            if bands is not None:\n                assets = bands\n            else:\n                bnames = stac_bands(url)\n                if isinstance(bnames, list):\n                    if len(bnames) &gt;= 3:\n                        assets = bnames[0:3]\n                    else:\n                        assets = bnames[0]\n                else:\n                    assets = None\n\n        else:\n            if bands is not None:\n                kwargs[\"asset_bidx\"] = bands\n        if assets is not None:\n            kwargs[\"assets\"] = assets\n\n            if len(kwargs[\"assets\"]) == 1 and (\"colormap\" not in kwargs):\n                cog_url = get_cog_link_from_stac_item(url)\n                colormap = _get_image_colormap(cog_url)\n                if colormap is not None:\n                    kwargs[\"colormap\"] = colormap\n\n        if (\n            (assets is not None)\n            and (\"asset_expression\" not in kwargs)\n            and (\"expression\" not in kwargs)\n            and (\"rescale\" not in kwargs)\n            and (\"colormap\" not in kwargs)\n        ):\n            try:\n                stats = stac_stats(\n                    url=url,\n                    assets=assets,\n                    titiler_endpoint=titiler_endpoint,\n                )\n            except Exception as e:\n                titiler_endpoint = \"https://titiler.xyz\"\n                stats = stac_stats(\n                    url=url,\n                    assets=assets,\n                    titiler_endpoint=titiler_endpoint,\n                )\n\n            if \"detail\" not in stats:\n                try:\n                    percentile_2 = min([stats[s][\"percentile_2\"] for s in stats])\n                    percentile_98 = max([stats[s][\"percentile_98\"] for s in stats])\n                except:\n                    percentile_2 = min(\n                        [\n                            stats[s][list(stats[s].keys())[0]][\"percentile_2\"]\n                            for s in stats\n                        ]\n                    )\n                    percentile_98 = max(\n                        [\n                            stats[s][list(stats[s].keys())[0]][\"percentile_98\"]\n                            for s in stats\n                        ]\n                    )\n                kwargs[\"rescale\"] = f\"{percentile_2},{percentile_98}\"\n            else:\n                print(stats[\"detail\"])  # When operation times out.\n\n    TileMatrixSetId = \"WebMercatorQuad\"\n    if \"TileMatrixSetId\" in kwargs.keys():\n        TileMatrixSetId = kwargs[\"TileMatrixSetId\"]\n        kwargs.pop(\"TileMatrixSetId\")\n\n    if \"colormap\" in kwargs and isinstance(kwargs[\"colormap\"], dict):\n        kwargs[\"colormap\"] = json.dumps(kwargs[\"colormap\"])\n\n    if mosaic_json:\n        try:\n            r = requests.get(\n                f\"{titiler_endpoint}/mosaicjson/{TileMatrixSetId}/tilejson.json\",\n                params=kwargs,\n                timeout=10,\n            ).json()\n        except Exception as e:\n            titiler_endpoint = \"https://titiler.xyz\"\n            r = requests.get(\n                f\"{titiler_endpoint}/mosaicjson/{TileMatrixSetId}/tilejson.json\",\n                params=kwargs,\n                timeout=10,\n            ).json()\n    else:\n        if isinstance(titiler_endpoint, str):\n            try:\n                r = requests.get(\n                    f\"{titiler_endpoint}/stac/{TileMatrixSetId}/tilejson.json\",\n                    params=kwargs,\n                    timeout=10,\n                ).json()\n            except Exception as e:\n                titiler_endpoint = \"https://titiler.xyz\"\n                r = requests.get(\n                    f\"{titiler_endpoint}/stac/{TileMatrixSetId}/tilejson.json\",\n                    params=kwargs,\n                    timeout=10,\n                ).json()\n        else:\n            r = requests.get(\n                titiler_endpoint.url_for_stac_item(), params=kwargs, timeout=10\n            ).json()\n\n    return r[\"tiles\"][0]\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use anymap in a project:</p> <pre><code>import anymap\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>Utility functions for anymap library.</p> <p>This module contains common utility functions used across the anymap library, including functions for constructing map style URLs, handling API keys, and working with different mapping service providers.</p> <p>Functions</p> <p>get_env_var: Retrieve environment variables or user data keys. construct_carto_style: Construct URL for Carto style. construct_amazon_style: Construct URL for Amazon Map style. construct_maptiler_style: Construct URL for MapTiler style. maptiler_3d_style: Generate 3D terrain style configuration. construct_maplibre_style: Construct MapLibre style configuration.</p> <p>Examples:</p> <p>Getting an environment variable:</p> <pre><code>&gt;&gt;&gt; from anymap.utils import get_env_var\n&gt;&gt;&gt; api_key = get_env_var(\"MAPTILER_KEY\")\n</code></pre> <p>Constructing a style URL:</p> <pre><code>&gt;&gt;&gt; from anymap.utils import construct_maplibre_style\n&gt;&gt;&gt; style = construct_maplibre_style(\"dark-matter\")\n</code></pre>"},{"location":"utils/#anymap.utils.construct_amazon_style","title":"<code>construct_amazon_style(map_style='standard', region='us-east-1', api_key=None, token='AWS_MAPS_API_KEY')</code>","text":"<p>Constructs a URL for an Amazon Map style.</p> <p>Parameters:</p> Name Type Description Default <code>map_style</code> <code>str</code> <p>The name of the MapTiler style to be accessed. It can be one of the following: standard, monochrome, satellite, hybrid.</p> <code>'standard'</code> <code>region</code> <code>str</code> <p>The region of the Amazon Map. It can be one of the following: us-east-1, us-west-2, eu-central-1, eu-west-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, etc.</p> <code>'us-east-1'</code> <code>api_key</code> <code>str</code> <p>The API key for the Amazon Map. If None, the function attempts to retrieve the API key using a predefined method.</p> <code>None</code> <code>token</code> <code>str</code> <p>The token for the Amazon Map. If None, the function attempts to retrieve the API key using a predefined method.</p> <code>'AWS_MAPS_API_KEY'</code> <p>Returns:</p> Type Description <code>str</code> <p>The URL for the requested Amazon Map style.</p> Source code in <code>anymap/utils.py</code> <pre><code>def construct_amazon_style(\n    map_style: str = \"standard\",\n    region: str = \"us-east-1\",\n    api_key: str = None,\n    token: str = \"AWS_MAPS_API_KEY\",\n) -&gt; str:\n    \"\"\"\n    Constructs a URL for an Amazon Map style.\n\n    Args:\n        map_style (str): The name of the MapTiler style to be accessed. It can be one of the following:\n            standard, monochrome, satellite, hybrid.\n        region (str): The region of the Amazon Map. It can be one of the following:\n            us-east-1, us-west-2, eu-central-1, eu-west-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, etc.\n        api_key (str): The API key for the Amazon Map. If None, the function attempts to retrieve the API key using a predefined method.\n        token (str): The token for the Amazon Map. If None, the function attempts to retrieve the API key using a predefined method.\n\n    Returns:\n        str: The URL for the requested Amazon Map style.\n    \"\"\"\n\n    if map_style.lower() not in [\"standard\", \"monochrome\", \"satellite\", \"hybrid\"]:\n        print(\n            \"Invalid map style. Please choose from amazon-standard, amazon-monochrome, amazon-satellite, or amazon-hybrid.\"\n        )\n        return None\n\n    if api_key is None:\n        api_key = get_env_var(token)\n        if api_key is None:\n            print(\"An API key is required to use the Amazon Map style.\")\n            return None\n\n    url = f\"https://maps.geo.{region}.amazonaws.com/v2/styles/{map_style.title()}/descriptor?key={api_key}\"\n    return url\n</code></pre>"},{"location":"utils/#anymap.utils.construct_carto_style","title":"<code>construct_carto_style(style)</code>","text":"<p>Constructs a URL for a Carto style with an optional API key. The URL looks like this: https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json https://basemaps.cartocdn.com/gl/positron-gl-style/style.json</p> Source code in <code>anymap/utils.py</code> <pre><code>def construct_carto_style(style: str) -&gt; str:\n    \"\"\"\n    Constructs a URL for a Carto style with an optional API key.\n    The URL looks like this:\n    https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json\n    https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\n    \"\"\"\n\n    return f\"https://basemaps.cartocdn.com/gl/{style.lower()}-gl-style/style.json\"\n</code></pre>"},{"location":"utils/#anymap.utils.construct_maplibre_style","title":"<code>construct_maplibre_style(style, **kwargs)</code>","text":"<p>Constructs a URL for a MapLibre style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str</code> <p>The name of the MapLibre style to be accessed.</p> required Source code in <code>anymap/utils.py</code> <pre><code>def construct_maplibre_style(style: str, **kwargs) -&gt; str:\n    \"\"\"\n    Constructs a URL for a MapLibre style.\n\n    Args:\n        style (str): The name of the MapLibre style to be accessed.\n    \"\"\"\n    carto_basemaps = [\n        \"dark-matter\",\n        \"positron\",\n        \"voyager\",\n        \"positron-nolabels\",\n        \"dark-matter-nolabels\",\n        \"voyager-nolabels\",\n    ]\n    openfreemap_basemaps = [\n        \"liberty\",\n        \"bright\",\n        \"positron2\",\n    ]\n\n    if isinstance(style, str):\n\n        if style.startswith(\"https\"):\n            response = requests.get(style, timeout=10)\n            if response.status_code != 200:\n                print(\n                    \"The provided style URL is invalid. Falling back to 'dark-matter'.\"\n                )\n                style = \"dark-matter\"\n            else:\n                style = json.loads(response.text)\n        elif style.startswith(\"3d-\"):\n            style = maptiler_3d_style(\n                style=style.replace(\"3d-\", \"\").lower(),\n                exaggeration=kwargs.pop(\"exaggeration\", 1),\n                tile_size=kwargs.pop(\"tile_size\", 512),\n                hillshade=kwargs.pop(\"hillshade\", True),\n            )\n        elif style.startswith(\"amazon-\"):\n            style = construct_amazon_style(\n                map_style=style.replace(\"amazon-\", \"\").lower(),\n                region=kwargs.pop(\"region\", \"us-east-1\"),\n                api_key=kwargs.pop(\"api_key\", None),\n                token=kwargs.pop(\"token\", \"AWS_MAPS_API_KEY\"),\n            )\n\n        elif style.lower() in carto_basemaps:\n            style = construct_carto_style(style.lower())\n        elif style.lower() in openfreemap_basemaps:\n            if style == \"positron2\":\n                style = \"positron\"\n            style = f\"https://tiles.openfreemap.org/styles/{style.lower()}\"\n        elif style == \"demotiles\":\n            style = \"https://demotiles.maplibre.org/style.json\"\n        else:\n            style = construct_maptiler_style(style)\n\n        if style in carto_basemaps:\n            style = construct_carto_style(style)\n\n    return style\n</code></pre>"},{"location":"utils/#anymap.utils.construct_maptiler_style","title":"<code>construct_maptiler_style(style, api_key=None)</code>","text":"<p>Constructs a URL for a MapTiler style with an optional API key.</p> <p>This function generates a URL for accessing a specific MapTiler map style. If an API key is not provided, it attempts to retrieve one using a predefined method. If the request to MapTiler fails, it defaults to a \"liberty\" style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str</code> <p>The name of the MapTiler style to be accessed. It can be one of the following: aquarelle, backdrop, basic, bright, dataviz, landscape, ocean, openstreetmap, outdoor, satellite, streets, toner, topo, winter, etc.</p> required <code>api_key</code> <code>Optional[str]</code> <p>An optional API key for accessing MapTiler services. If None, the function attempts to retrieve the API key using a predefined method. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The URL for the requested MapTiler style. If the request fails, returns a URL for the \"liberty\" style.</p> <p>Exceptions:</p> Type Description <code>requests.exceptions.RequestException</code> <p>If the request to the MapTiler API fails.</p> Source code in <code>anymap/utils.py</code> <pre><code>def construct_maptiler_style(style: str, api_key: Optional[str] = None) -&gt; str:\n    \"\"\"\n    Constructs a URL for a MapTiler style with an optional API key.\n\n    This function generates a URL for accessing a specific MapTiler map style. If an API key is not provided,\n    it attempts to retrieve one using a predefined method. If the request to MapTiler fails, it defaults to\n    a \"liberty\" style.\n\n    Args:\n        style (str): The name of the MapTiler style to be accessed. It can be one of the following:\n            aquarelle, backdrop, basic, bright, dataviz, landscape, ocean, openstreetmap, outdoor,\n            satellite, streets, toner, topo, winter, etc.\n        api_key (Optional[str]): An optional API key for accessing MapTiler services. If None, the function\n            attempts to retrieve the API key using a predefined method. Defaults to None.\n\n    Returns:\n        str: The URL for the requested MapTiler style. If the request fails, returns a URL for the \"liberty\" style.\n\n    Raises:\n        requests.exceptions.RequestException: If the request to the MapTiler API fails.\n    \"\"\"\n\n    if api_key is None:\n        api_key = get_env_var(\"MAPTILER_KEY\")\n\n    url = f\"https://api.maptiler.com/maps/{style}/style.json?key={api_key}\"\n\n    response = requests.get(url, timeout=10)\n    if response.status_code != 200:\n        # print(\n        #     \"Failed to retrieve the MapTiler style. Defaulting to OpenFreeMap 'liberty' style.\"\n        # )\n        url = \"https://tiles.openfreemap.org/styles/liberty\"\n\n    return url\n</code></pre>"},{"location":"utils/#anymap.utils.get_env_var","title":"<code>get_env_var(name=None, key=None)</code>","text":"<p>Retrieves an environment variable. If a key is provided, it is returned directly. If a name is provided, the function attempts to retrieve the key from user data (if running in Google Colab) or from environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>The name of the key to retrieve. Defaults to None.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>The key to return directly. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The retrieved key, or None if no key was found.</p> Source code in <code>anymap/utils.py</code> <pre><code>def get_env_var(name: Optional[str] = None, key: Optional[str] = None) -&gt; Optional[str]:\n    \"\"\"\n    Retrieves an environment variable. If a key is provided, it is returned directly. If a\n    name is provided, the function attempts to retrieve the key from user data\n    (if running in Google Colab) or from environment variables.\n\n    Args:\n        name (Optional[str], optional): The name of the key to retrieve. Defaults to None.\n        key (Optional[str], optional): The key to return directly. Defaults to None.\n\n    Returns:\n        Optional[str]: The retrieved key, or None if no key was found.\n    \"\"\"\n    if key is not None:\n        return key\n    if name is not None:\n        try:\n            if _in_colab_shell():\n                from google.colab import userdata  # pylint: disable=E0611\n\n                return userdata.get(name)\n        except Exception:\n            pass\n        return os.environ.get(name)\n    return None\n</code></pre>"},{"location":"utils/#anymap.utils.maptiler_3d_style","title":"<code>maptiler_3d_style(style='satellite', exaggeration=1, tile_size=512, tile_type=None, max_zoom=24, hillshade=True, token='MAPTILER_KEY', api_key=None)</code>","text":"<p>Get the 3D terrain style for the map.</p> <p>This function generates a style dictionary for the map that includes 3D terrain features. The terrain exaggeration and API key can be specified. If the API key is not provided, it will be retrieved using the specified token.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str</code> <p>The name of the MapTiler style to be accessed. It can be one of the following: aquarelle, backdrop, basic, bright, dataviz, hillshade, landscape, ocean, openstreetmap, outdoor, satellite, streets, toner, topo, winter, etc.</p> <code>'satellite'</code> <code>exaggeration</code> <code>float</code> <p>The terrain exaggeration. Defaults to 1.</p> <code>1</code> <code>tile_size</code> <code>int</code> <p>The size of the tiles. Defaults to 512.</p> <code>512</code> <code>tile_type</code> <code>str</code> <p>The type of the tiles. It can be one of the following: webp, png, jpg. Defaults to None.</p> <code>None</code> <code>max_zoom</code> <code>int</code> <p>The maximum zoom level. Defaults to 24.</p> <code>24</code> <code>hillshade</code> <code>bool</code> <p>Whether to include hillshade. Defaults to True.</p> <code>True</code> <code>token</code> <code>str</code> <p>The token to use to retrieve the API key. Defaults to \"MAPTILER_KEY\".</p> <code>'MAPTILER_KEY'</code> <code>api_key</code> <code>Optional[str]</code> <p>The API key. If not provided, it will be retrieved using the token.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The style dictionary for the map.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the API key is not provided and cannot be retrieved using the token.</p> Source code in <code>anymap/utils.py</code> <pre><code>def maptiler_3d_style(\n    style=\"satellite\",\n    exaggeration: float = 1,\n    tile_size: int = 512,\n    tile_type: str = None,\n    max_zoom: int = 24,\n    hillshade: bool = True,\n    token: str = \"MAPTILER_KEY\",\n    api_key: Optional[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get the 3D terrain style for the map.\n\n    This function generates a style dictionary for the map that includes 3D terrain features.\n    The terrain exaggeration and API key can be specified. If the API key is not provided,\n    it will be retrieved using the specified token.\n\n    Args:\n        style (str): The name of the MapTiler style to be accessed. It can be one of the following:\n            aquarelle, backdrop, basic, bright, dataviz, hillshade, landscape, ocean, openstreetmap, outdoor,\n            satellite, streets, toner, topo, winter, etc.\n        exaggeration (float, optional): The terrain exaggeration. Defaults to 1.\n        tile_size (int, optional): The size of the tiles. Defaults to 512.\n        tile_type (str, optional): The type of the tiles. It can be one of the following:\n            webp, png, jpg. Defaults to None.\n        max_zoom (int, optional): The maximum zoom level. Defaults to 24.\n        hillshade (bool, optional): Whether to include hillshade. Defaults to True.\n        token (str, optional): The token to use to retrieve the API key. Defaults to \"MAPTILER_KEY\".\n        api_key (Optional[str], optional): The API key. If not provided, it will be retrieved using the token.\n\n    Returns:\n        Dict[str, Any]: The style dictionary for the map.\n\n    Raises:\n        ValueError: If the API key is not provided and cannot be retrieved using the token.\n    \"\"\"\n\n    if api_key is None:\n        api_key = get_env_var(token)\n\n    if api_key is None:\n        print(\"An API key is required to use the 3D terrain feature.\")\n        return \"dark-matter\"\n\n    if style == \"terrain\":\n        style = \"satellite\"\n    elif style == \"hillshade\":\n        style = None\n\n    if tile_type is None:\n\n        image_types = {\n            \"aquarelle\": \"webp\",\n            \"backdrop\": \"png\",\n            \"basic\": \"png\",\n            \"basic-v2\": \"png\",\n            \"bright\": \"png\",\n            \"bright-v2\": \"png\",\n            \"dataviz\": \"png\",\n            \"hybrid\": \"jpg\",\n            \"landscape\": \"png\",\n            \"ocean\": \"png\",\n            \"openstreetmap\": \"jpg\",\n            \"outdoor\": \"png\",\n            \"outdoor-v2\": \"png\",\n            \"satellite\": \"jpg\",\n            \"toner\": \"png\",\n            \"toner-v2\": \"png\",\n            \"topo\": \"png\",\n            \"topo-v2\": \"png\",\n            \"winter\": \"png\",\n            \"winter-v2\": \"png\",\n        }\n        if style in image_types:\n            tile_type = image_types[style]\n        else:\n            tile_type = \"png\"\n\n    layers = []\n\n    if isinstance(style, str):\n        layers.append({\"id\": style, \"type\": \"raster\", \"source\": style})\n\n    if hillshade:\n        layers.append(\n            {\n                \"id\": \"hillshade\",\n                \"type\": \"hillshade\",\n                \"source\": \"hillshadeSource\",\n                \"layout\": {\"visibility\": \"visible\"},\n                \"paint\": {\"hillshade-shadow-color\": \"#473B24\"},\n            }\n        )\n\n    if style == \"ocean\":\n        sources = {\n            \"terrainSource\": {\n                \"type\": \"raster-dem\",\n                \"url\": f\"https://api.maptiler.com/tiles/ocean-rgb/tiles.json?key={api_key}\",\n                \"tileSize\": tile_size,\n            },\n            \"hillshadeSource\": {\n                \"type\": \"raster-dem\",\n                \"url\": f\"https://api.maptiler.com/tiles/ocean-rgb/tiles.json?key={api_key}\",\n                \"tileSize\": tile_size,\n            },\n        }\n    else:\n        sources = {\n            \"terrainSource\": {\n                \"type\": \"raster-dem\",\n                \"url\": f\"https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json?key={api_key}\",\n                \"tileSize\": tile_size,\n            },\n            \"hillshadeSource\": {\n                \"type\": \"raster-dem\",\n                \"url\": f\"https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json?key={api_key}\",\n                \"tileSize\": tile_size,\n            },\n        }\n    if isinstance(style, str):\n        sources[style] = {\n            \"type\": \"raster\",\n            \"tiles\": [\n                \"https://api.maptiler.com/maps/\"\n                + style\n                + \"/{z}/{x}/{y}.\"\n                + tile_type\n                + \"?key=\"\n                + api_key\n            ],\n            \"tileSize\": tile_size,\n            \"attribution\": \"&amp;copy; MapTiler\",\n            \"maxzoom\": max_zoom,\n        }\n\n    style = {\n        \"version\": 8,\n        \"sources\": sources,\n        \"layers\": layers,\n        \"terrain\": {\"source\": \"terrainSource\", \"exaggeration\": exaggeration},\n    }\n\n    return style\n</code></pre>"},{"location":"examples/basic_usage/","title":"Basic usage","text":"In\u00a0[1]: Copied! <pre># Import the required modules\nfrom anymap import MapLibreMap\nimport json\n</pre> # Import the required modules from anymap import MapLibreMap import json In\u00a0[2]: Copied! <pre># Create a basic map\nm = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco coordinates [lat, lng]\n    zoom=12,\n    height=\"500px\",\n)\nm\n</pre> # Create a basic map m = MapLibreMap(     center=[37.7749, -122.4194],  # San Francisco coordinates [lat, lng]     zoom=12,     height=\"500px\", ) m Out[2]: In\u00a0[3]: Copied! <pre># Change the center and zoom\nm.set_center(40.7128, -74.0060)  # New York City\nm.set_zoom(10)\n</pre> # Change the center and zoom m.set_center(40.7128, -74.0060)  # New York City m.set_zoom(10) In\u00a0[4]: Copied! <pre># Use fly_to for smooth animation\nm.fly_to(51.5074, -0.1278, zoom=14)  # London\n</pre> # Use fly_to for smooth animation m.fly_to(51.5074, -0.1278, zoom=14)  # London In\u00a0[5]: Copied! <pre>m\n</pre> m Out[5]: In\u00a0[6]: Copied! <pre># Add a marker with popup\nm.add_marker(\n    lat=51.5074,\n    lng=-0.1278,\n    popup=\"&lt;h3&gt;London&lt;/h3&gt;&lt;p&gt;Capital of the United Kingdom&lt;/p&gt;\",\n)\n</pre> # Add a marker with popup m.add_marker(     lat=51.5074,     lng=-0.1278,     popup=\"London<p>Capital of the United Kingdom</p>\", ) In\u00a0[7]: Copied! <pre># Sample GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},\n            \"properties\": {\"name\": \"London\", \"population\": 8900000},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},\n            \"properties\": {\"name\": \"Paris\", \"population\": 2141000},\n        },\n    ],\n}\n\n# Add GeoJSON layer\nm.add_geojson_layer(\n    layer_id=\"cities\",\n    geojson_data=geojson_data,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff0000\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#ffffff\",\n    },\n)\n</pre> # Sample GeoJSON data geojson_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},             \"properties\": {\"name\": \"London\", \"population\": 8900000},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},             \"properties\": {\"name\": \"Paris\", \"population\": 2141000},         },     ], }  # Add GeoJSON layer m.add_geojson_layer(     layer_id=\"cities\",     geojson_data=geojson_data,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#ff0000\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#ffffff\",     }, ) In\u00a0[8]: Copied! <pre># Define event handler\ndef on_map_click(event):\n    lat, lng = event[\"lngLat\"]\n    print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")\n\n\n# Register the event handler\nm.on_map_event(\"click\", on_map_click)\n</pre> # Define event handler def on_map_click(event):     lat, lng = event[\"lngLat\"]     print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")   # Register the event handler m.on_map_event(\"click\", on_map_click) In\u00a0[9]: Copied! <pre># Display the same map instance again\nm\n</pre> # Display the same map instance again m Out[9]: In\u00a0[10]: Copied! <pre># Create a new map instance\nm2 = MapLibreMap(\n    center=[35.6762, 139.6503],  # Tokyo\n    zoom=10,\n    height=\"600px\",\n    style=\"https://demotiles.maplibre.org/style.json\",\n)\nm2\n</pre> # Create a new map instance m2 = MapLibreMap(     center=[35.6762, 139.6503],  # Tokyo     zoom=10,     height=\"600px\",     style=\"https://demotiles.maplibre.org/style.json\", ) m2 Out[10]: In\u00a0[11]: Copied! <pre># Both maps should work independently\nm2.add_marker(35.6762, 139.6503, popup=\"Tokyo, Japan\")\n</pre> # Both maps should work independently m2.add_marker(35.6762, 139.6503, popup=\"Tokyo, Japan\") In\u00a0[12]: Copied! <pre># Change to a different style\nm2.set_style(\"https://demotiles.maplibre.org/style.json\")\n</pre> # Change to a different style m2.set_style(\"https://demotiles.maplibre.org/style.json\") In\u00a0[13]: Copied! <pre># Set bearing and pitch for 3D effect\nm2.set_bearing(45)\nm2.set_pitch(60)\n</pre> # Set bearing and pitch for 3D effect m2.set_bearing(45) m2.set_pitch(60) In\u00a0[14]: Copied! <pre># Reset to default view\nm2.set_bearing(0)\nm2.set_pitch(0)\n</pre> # Reset to default view m2.set_bearing(0) m2.set_pitch(0) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/basic_usage/#anymap-basic-usage-examples","title":"AnyMap Basic Usage Examples\u00b6","text":"<p>This notebook demonstrates the basic usage of the AnyMap package for creating interactive maps with MapLibre GL JS.</p>"},{"location":"examples/basic_usage/#creating-a-basic-map","title":"Creating a Basic Map\u00b6","text":"<p>Let's start by creating a simple map centered on San Francisco.</p>"},{"location":"examples/basic_usage/#changing-map-properties","title":"Changing Map Properties\u00b6","text":"<p>You can dynamically change map properties after creation:</p>"},{"location":"examples/basic_usage/#adding-markers","title":"Adding Markers\u00b6","text":"<p>You can add markers to the map with optional popups:</p>"},{"location":"examples/basic_usage/#working-with-geojson-data","title":"Working with GeoJSON Data\u00b6","text":"<p>Let's add some GeoJSON data to the map:</p>"},{"location":"examples/basic_usage/#event-handling","title":"Event Handling\u00b6","text":"<p>You can register event handlers for map interactions:</p>"},{"location":"examples/basic_usage/#multi-cell-rendering-test","title":"Multi-cell Rendering Test\u00b6","text":"<p>Let's test that the same map can be displayed in multiple cells without issues:</p>"},{"location":"examples/basic_usage/#changing-map-styles","title":"Changing Map Styles\u00b6","text":"<p>You can change the map style dynamically:</p>"},{"location":"examples/basic_usage/#calling-javascript-methods","title":"Calling JavaScript Methods\u00b6","text":"<p>You can call any MapLibre GL JS methods directly:</p>"},{"location":"examples/cesium_example/","title":"Cesium example","text":"In\u00a0[1]: Copied! <pre>import os\nfrom anymap import CesiumMap\n\n# Set your Cesium token (get a free one at https://cesium.com/ion/signup)\n# You can either set it as an environment variable CESIUM_TOKEN or pass it directly\n# os.environ['CESIUM_TOKEN'] = 'your_token_here'\n\nprint(\"Cesium backend loaded successfully!\")\n</pre> import os from anymap import CesiumMap  # Set your Cesium token (get a free one at https://cesium.com/ion/signup) # You can either set it as an environment variable CESIUM_TOKEN or pass it directly # os.environ['CESIUM_TOKEN'] = 'your_token_here'  print(\"Cesium backend loaded successfully!\") <pre>Cesium backend loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre>from anymap import CesiumMap\n\n# Create a basic Cesium map centered on New York City\nglobe = CesiumMap(\n    center=[40.7128, -74.0060],  # NYC coordinates\n    camera_height=2000000,  # 2000 km above surface\n    width=\"100%\",\n    height=\"600px\",\n    navigation_help_button=False,\n)\n\nglobe\n</pre> from anymap import CesiumMap  # Create a basic Cesium map centered on New York City globe = CesiumMap(     center=[40.7128, -74.0060],  # NYC coordinates     camera_height=2000000,  # 2000 km above surface     width=\"100%\",     height=\"600px\",     navigation_help_button=False, )  globe <pre>/home/runner/work/anymap/anymap/anymap/cesium.py:140: UserWarning: No Cesium access token found. Please set CESIUM_TOKEN environment variable or pass access_token parameter. Get a free token at https://cesium.com/ion/signup\n  warnings.warn(\n</pre> Out[2]: In\u00a0[3]: Copied! <pre># Add some famous landmarks as points\nglobe.add_point(\n    40.7128,\n    -74.0060,\n    height=200000,  # 200 km above NYC\n    name=\"New York City\",\n    description=\"The Big Apple\",\n    color=\"#ff0000\",\n    pixel_size=20,\n)\n\nglobe.add_point(\n    51.5074,\n    -0.1278,\n    height=150000,  # 150 km above London\n    name=\"London\",\n    description=\"Capital of England\",\n    color=\"#0000ff\",\n    pixel_size=15,\n)\n\nglobe.add_point(\n    35.6762,\n    139.6503,\n    height=100000,  # 100 km above Tokyo\n    name=\"Tokyo\",\n    description=\"Capital of Japan\",\n    color=\"#00ff00\",\n    pixel_size=18,\n)\n\nprint(\"Added landmark points to the globe!\")\n</pre> # Add some famous landmarks as points globe.add_point(     40.7128,     -74.0060,     height=200000,  # 200 km above NYC     name=\"New York City\",     description=\"The Big Apple\",     color=\"#ff0000\",     pixel_size=20, )  globe.add_point(     51.5074,     -0.1278,     height=150000,  # 150 km above London     name=\"London\",     description=\"Capital of England\",     color=\"#0000ff\",     pixel_size=15, )  globe.add_point(     35.6762,     139.6503,     height=100000,  # 100 km above Tokyo     name=\"Tokyo\",     description=\"Capital of Japan\",     color=\"#00ff00\",     pixel_size=18, )  print(\"Added landmark points to the globe!\") <pre>Added landmark points to the globe!\n</pre> In\u00a0[4]: Copied! <pre># Fly to different locations with smooth transitions\nglobe.fly_to(\n    51.5074,\n    -0.1278,  # London\n    height=5000000,  # 5000 km above\n    duration=3.0,\n    heading=45,\n    pitch=-30,\n)\n\nprint(\"Flying to London...\")\n</pre> # Fly to different locations with smooth transitions globe.fly_to(     51.5074,     -0.1278,  # London     height=5000000,  # 5000 km above     duration=3.0,     heading=45,     pitch=-30, )  print(\"Flying to London...\") <pre>Flying to London...\n</pre> In\u00a0[5]: Copied! <pre># Fly to Tokyo with different camera angle\nglobe.fly_to(\n    35.6762,\n    139.6503,  # Tokyo\n    height=3000000,  # 3000 km above\n    duration=4.0,\n    heading=90,\n    pitch=-45,\n)\n\nprint(\"Flying to Tokyo...\")\n</pre> # Fly to Tokyo with different camera angle globe.fly_to(     35.6762,     139.6503,  # Tokyo     height=3000000,  # 3000 km above     duration=4.0,     heading=90,     pitch=-45, )  print(\"Flying to Tokyo...\") <pre>Flying to Tokyo...\n</pre> In\u00a0[6]: Copied! <pre># Add a flight path polyline from NYC to London\nflight_path = [\n    [40.7128, -74.0060, 10000],  # NYC at 10km altitude\n    [45.0, -30.0, 12000],  # Midpoint over Atlantic\n    [51.5074, -0.1278, 10000],  # London at 10km altitude\n]\n\nglobe.add_polyline(\n    flight_path,\n    width=3,\n    color=\"#ffff00\",\n    name=\"NYC to London Flight Path\",\n    description=\"Transatlantic flight route\",\n)\n\nprint(\"Added flight path polyline!\")\n</pre> # Add a flight path polyline from NYC to London flight_path = [     [40.7128, -74.0060, 10000],  # NYC at 10km altitude     [45.0, -30.0, 12000],  # Midpoint over Atlantic     [51.5074, -0.1278, 10000],  # London at 10km altitude ]  globe.add_polyline(     flight_path,     width=3,     color=\"#ffff00\",     name=\"NYC to London Flight Path\",     description=\"Transatlantic flight route\", )  print(\"Added flight path polyline!\") <pre>Added flight path polyline!\n</pre> In\u00a0[7]: Copied! <pre># Add a polygon area around the Mediterranean Sea\nmediterranean_bounds = [\n    [30.0, -6.0, 0],  # Gibraltar area\n    [30.0, 36.0, 0],  # Eastern Mediterranean\n    [46.0, 36.0, 0],  # Turkey area\n    [46.0, -6.0, 0],  # Spain area\n    [30.0, -6.0, 0],  # Close the polygon\n]\n\nglobe.add_polygon(\n    mediterranean_bounds,\n    color=\"rgba(0, 100, 255, 0.3)\",  # Semi-transparent blue\n    outline_color=\"#0064ff\",\n    name=\"Mediterranean Region\",\n    description=\"Mediterranean Sea region\",\n)\n\nprint(\"Added Mediterranean polygon!\")\n</pre> # Add a polygon area around the Mediterranean Sea mediterranean_bounds = [     [30.0, -6.0, 0],  # Gibraltar area     [30.0, 36.0, 0],  # Eastern Mediterranean     [46.0, 36.0, 0],  # Turkey area     [46.0, -6.0, 0],  # Spain area     [30.0, -6.0, 0],  # Close the polygon ]  globe.add_polygon(     mediterranean_bounds,     color=\"rgba(0, 100, 255, 0.3)\",  # Semi-transparent blue     outline_color=\"#0064ff\",     name=\"Mediterranean Region\",     description=\"Mediterranean Sea region\", )  print(\"Added Mediterranean polygon!\") <pre>Added Mediterranean polygon!\n</pre> In\u00a0[8]: Copied! <pre># Sample GeoJSON data with world capitals\nworld_capitals_geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-77.0369, 38.9072],  # Washington DC\n            },\n            \"properties\": {\n                \"name\": \"Washington DC\",\n                \"country\": \"USA\",\n                \"population\": 705749,\n            },\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},  # Paris\n            \"properties\": {\"name\": \"Paris\", \"country\": \"France\", \"population\": 2161000},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [116.4074, 39.9042],  # Beijing\n            },\n            \"properties\": {\n                \"name\": \"Beijing\",\n                \"country\": \"China\",\n                \"population\": 21540000,\n            },\n        },\n    ],\n}\n\n# Add GeoJSON data to the globe\nglobe.add_geojson(\n    world_capitals_geojson, options={\"name\": \"World Capitals\", \"clampToGround\": True}\n)\n\nprint(\"Added world capitals GeoJSON data!\")\n</pre> # Sample GeoJSON data with world capitals world_capitals_geojson = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Point\",                 \"coordinates\": [-77.0369, 38.9072],  # Washington DC             },             \"properties\": {                 \"name\": \"Washington DC\",                 \"country\": \"USA\",                 \"population\": 705749,             },         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},  # Paris             \"properties\": {\"name\": \"Paris\", \"country\": \"France\", \"population\": 2161000},         },         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Point\",                 \"coordinates\": [116.4074, 39.9042],  # Beijing             },             \"properties\": {                 \"name\": \"Beijing\",                 \"country\": \"China\",                 \"population\": 21540000,             },         },     ], }  # Add GeoJSON data to the globe globe.add_geojson(     world_capitals_geojson, options={\"name\": \"World Capitals\", \"clampToGround\": True} )  print(\"Added world capitals GeoJSON data!\") <pre>Added world capitals GeoJSON data!\n</pre> In\u00a0[9]: Copied! <pre># Enable Cesium World Terrain for realistic 3D terrain\nglobe.set_cesium_world_terrain(request_water_mask=True, request_vertex_normals=True)\n\nprint(\"Enabled Cesium World Terrain!\")\n</pre> # Enable Cesium World Terrain for realistic 3D terrain globe.set_cesium_world_terrain(request_water_mask=True, request_vertex_normals=True)  print(\"Enabled Cesium World Terrain!\") <pre>Enabled Cesium World Terrain!\n</pre> In\u00a0[10]: Copied! <pre># Switch to satellite imagery (requires Bing Maps key for best results)\n# You can get a Bing Maps key at https://www.bingmapsportal.com/\nglobe.set_imagery(\n    {\n        \"type\": \"osm\",  # Using OpenStreetMap as fallback\n        \"url\": \"https://tile.openstreetmap.org/\",\n    }\n)\n\nprint(\"Changed to OpenStreetMap imagery!\")\n</pre> # Switch to satellite imagery (requires Bing Maps key for best results) # You can get a Bing Maps key at https://www.bingmapsportal.com/ globe.set_imagery(     {         \"type\": \"osm\",  # Using OpenStreetMap as fallback         \"url\": \"https://tile.openstreetmap.org/\",     } )  print(\"Changed to OpenStreetMap imagery!\") <pre>Changed to OpenStreetMap imagery!\n</pre> In\u00a0[11]: Copied! <pre># Enable atmospheric effects\nglobe.enable_lighting(True)\nglobe.enable_fog(True)\n\nprint(\"Enabled lighting and atmospheric fog!\")\n</pre> # Enable atmospheric effects globe.enable_lighting(True) globe.enable_fog(True)  print(\"Enabled lighting and atmospheric fog!\") <pre>Enabled lighting and atmospheric fog!\n</pre> In\u00a0[12]: Copied! <pre># Switch to 2D mode for flat map view\nglobe.set_scene_mode_2d()\n\nprint(\"Switched to 2D mode!\")\n</pre> # Switch to 2D mode for flat map view globe.set_scene_mode_2d()  print(\"Switched to 2D mode!\") <pre>Switched to 2D mode!\n</pre> In\u00a0[13]: Copied! <pre># Switch to Columbus view (2.5D)\nglobe.set_scene_mode_columbus()\n\nprint(\"Switched to Columbus view!\")\n</pre> # Switch to Columbus view (2.5D) globe.set_scene_mode_columbus()  print(\"Switched to Columbus view!\") <pre>Switched to Columbus view!\n</pre> In\u00a0[14]: Copied! <pre># Back to full 3D mode\nglobe.set_scene_mode_3d()\n\nprint(\"Switched back to 3D mode!\")\n</pre> # Back to full 3D mode globe.set_scene_mode_3d()  print(\"Switched back to 3D mode!\") <pre>Switched back to 3D mode!\n</pre> In\u00a0[15]: Copied! <pre># Define event handler functions\ndef on_click(event):\n    print(\n        f\"Globe clicked at: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"\n    )\n    if event.get(\"pickedObject\"):\n        print(f\"Clicked on object: {event['pickedObject']}\")\n\n\ndef on_camera_move(event):\n    print(\n        f\"Camera moved to: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"\n    )\n\n\n# Register event handlers\nglobe.on_map_event(\"click\", on_click)\nglobe.on_map_event(\"moveend\", on_camera_move)\n\nprint(\"Event handlers registered! Click on the globe or move the camera to see events.\")\n</pre> # Define event handler functions def on_click(event):     print(         f\"Globe clicked at: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"     )     if event.get(\"pickedObject\"):         print(f\"Clicked on object: {event['pickedObject']}\")   def on_camera_move(event):     print(         f\"Camera moved to: Lat {event['latitude']:.4f}, Lon {event['longitude']:.4f}, Height {event['height']:.0f}m\"     )   # Register event handlers globe.on_map_event(\"click\", on_click) globe.on_map_event(\"moveend\", on_camera_move)  print(\"Event handlers registered! Click on the globe or move the camera to see events.\") <pre>Event handlers registered! Click on the globe or move the camera to see events.\n</pre> In\u00a0[16]: Copied! <pre># Display the same globe instance again\n# This should maintain all the data and state from above\nglobe\n</pre> # Display the same globe instance again # This should maintain all the data and state from above globe Out[16]: In\u00a0[17]: Copied! <pre># Add another point while displayed in multiple cells\nglobe.add_point(\n    -33.8688,\n    151.2093,  # Sydney\n    height=500000,\n    name=\"Sydney\",\n    description=\"Largest city in Australia\",\n    color=\"#ff8800\",\n    pixel_size=16,\n)\n\nprint(\"Added Sydney! The point should appear on all globe instances above.\")\n</pre> # Add another point while displayed in multiple cells globe.add_point(     -33.8688,     151.2093,  # Sydney     height=500000,     name=\"Sydney\",     description=\"Largest city in Australia\",     color=\"#ff8800\",     pixel_size=16, )  print(\"Added Sydney! The point should appear on all globe instances above.\") <pre>Added Sydney! The point should appear on all globe instances above.\n</pre> In\u00a0[18]: Copied! <pre># Create a second, independent globe\nglobe2 = CesiumMap(\n    center=[-33.8688, 151.2093],  # Centered on Sydney\n    camera_height=1000000,  # 1000 km above\n    width=\"100%\",\n    height=\"500px\",\n    timeline=False,  # Disable timeline for cleaner look\n    animation=False,  # Disable animation controls\n)\n\n# Add different content to the second globe\nglobe2.add_point(\n    -33.8688,\n    151.2093,\n    height=50000,\n    name=\"Sydney Opera House Area\",\n    color=\"#9900ff\",\n    pixel_size=25,\n)\n\nglobe2.add_point(\n    -37.8136,\n    144.9631,  # Melbourne\n    height=40000,\n    name=\"Melbourne\",\n    color=\"#00ffff\",\n    pixel_size=20,\n)\n\nglobe2\n</pre> # Create a second, independent globe globe2 = CesiumMap(     center=[-33.8688, 151.2093],  # Centered on Sydney     camera_height=1000000,  # 1000 km above     width=\"100%\",     height=\"500px\",     timeline=False,  # Disable timeline for cleaner look     animation=False,  # Disable animation controls )  # Add different content to the second globe globe2.add_point(     -33.8688,     151.2093,     height=50000,     name=\"Sydney Opera House Area\",     color=\"#9900ff\",     pixel_size=25, )  globe2.add_point(     -37.8136,     144.9631,  # Melbourne     height=40000,     name=\"Melbourne\",     color=\"#00ffff\",     pixel_size=20, )  globe2 Out[18]: In\u00a0[19]: Copied! <pre># Reset camera to home position\nglobe.home()\n\nprint(\"Camera reset to home position!\")\n</pre> # Reset camera to home position globe.home()  print(\"Camera reset to home position!\") <pre>Camera reset to home position!\n</pre>"},{"location":"examples/cesium_example/#cesium-3d-globe-example","title":"Cesium 3D Globe Example\u00b6","text":"<p>This notebook demonstrates the capabilities of the anymap CesiumMap widget for creating interactive 3D globe visualizations.</p>"},{"location":"examples/cesium_example/#setup","title":"Setup\u00b6","text":"<p>First, make sure you have a Cesium ion access token. You can get a free one at https://cesium.com/ion/signup</p>"},{"location":"examples/cesium_example/#basic-3d-globe","title":"Basic 3D Globe\u00b6","text":"<p>Create a basic 3D globe centered on a specific location:</p>"},{"location":"examples/cesium_example/#adding-points-and-markers","title":"Adding Points and Markers\u00b6","text":"<p>Add various points and billboards to the globe:</p>"},{"location":"examples/cesium_example/#camera-controls-and-navigation","title":"Camera Controls and Navigation\u00b6","text":"<p>Demonstrate camera movement and positioning:</p>"},{"location":"examples/cesium_example/#adding-3d-geometries","title":"Adding 3D Geometries\u00b6","text":"<p>Add polylines and polygons to show connections and regions:</p>"},{"location":"examples/cesium_example/#working-with-geojson-data","title":"Working with GeoJSON Data\u00b6","text":"<p>Load and display GeoJSON data on the globe:</p>"},{"location":"examples/cesium_example/#terrain-and-imagery","title":"Terrain and Imagery\u00b6","text":"<p>Configure terrain and satellite imagery:</p>"},{"location":"examples/cesium_example/#scene-modes-and-effects","title":"Scene Modes and Effects\u00b6","text":"<p>Experiment with different viewing modes and atmospheric effects:</p>"},{"location":"examples/cesium_example/#event-handling","title":"Event Handling\u00b6","text":"<p>Set up event handlers to respond to user interactions:</p>"},{"location":"examples/cesium_example/#multi-cell-rendering-test","title":"Multi-cell Rendering Test\u00b6","text":"<p>Test that the globe works correctly when displayed in multiple cells:</p>"},{"location":"examples/cesium_example/#creating-a-second-globe-instance","title":"Creating a Second Globe Instance\u00b6","text":"<p>Create a separate globe to verify independence:</p>"},{"location":"examples/cesium_example/#reset-and-home-view","title":"Reset and Home View\u00b6","text":"<p>Return to the home view:</p>"},{"location":"examples/cesium_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the key features of the anymap CesiumMap widget:</p> <ol> <li>3D Globe Visualization: Interactive 3D globe with realistic Earth rendering</li> <li>Points and Markers: Adding labeled points at various heights</li> <li>3D Geometries: Polylines and polygons for paths and regions</li> <li>GeoJSON Support: Loading external geographic data</li> <li>Terrain and Imagery: Realistic 3D terrain and satellite imagery</li> <li>Scene Modes: 3D, 2D, and Columbus view modes</li> <li>Camera Controls: Smooth fly-to animations and positioning</li> <li>Event Handling: Responding to user interactions</li> <li>Multi-cell Rendering: Persistent state across notebook cells</li> <li>Multiple Instances: Independent globe widgets</li> </ol> <p>The CesiumMap widget provides a powerful platform for creating interactive 3D geospatial visualizations with the full capabilities of Cesium.js in a Jupyter environment.</p>"},{"location":"examples/deckgl_example/","title":"Deckgl example","text":"In\u00a0[1]: Copied! <pre>from anymap import DeckGLMap\nimport json\nimport requests\n</pre> from anymap import DeckGLMap import json import requests In\u00a0[2]: Copied! <pre># Create a simple test map first\nsimple_map = DeckGLMap(center=[0, 0], zoom=2, height=\"600px\")\nprint(\"\u2713 Simple DeckGL map created successfully\")\nprint(f\"Center: {simple_map.center}, Zoom: {simple_map.zoom}\")\n\n# Display the simple map\nsimple_map\n</pre> # Create a simple test map first simple_map = DeckGLMap(center=[0, 0], zoom=2, height=\"600px\") print(\"\u2713 Simple DeckGL map created successfully\") print(f\"Center: {simple_map.center}, Zoom: {simple_map.zoom}\")  # Display the simple map simple_map <pre>\u2713 Simple DeckGL map created successfully\nCenter: [0, 0], Zoom: 2.0\n</pre> Out[2]: In\u00a0[3]: Copied! <pre># Create a basic DeckGL map\nm = DeckGLMap(\n    center=[51.47, 0.45],  # London\n    zoom=4,\n    bearing=0,\n    pitch=30,\n    height=\"600px\",\n    style=\"https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json\",\n)\n\nprint(f\"Created DeckGL map with center: {m.center}, zoom: {m.zoom}\")\nprint(f\"Map style: {m.style}\")\nprint(f\"Current DeckGL layers: {len(m.deckgl_layers)}\")\n</pre> # Create a basic DeckGL map m = DeckGLMap(     center=[51.47, 0.45],  # London     zoom=4,     bearing=0,     pitch=30,     height=\"600px\",     style=\"https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json\", )  print(f\"Created DeckGL map with center: {m.center}, zoom: {m.zoom}\") print(f\"Map style: {m.style}\") print(f\"Current DeckGL layers: {len(m.deckgl_layers)}\") <pre>Created DeckGL map with center: [51.47, 0.45], zoom: 4.0\nMap style: {'version': 8, 'name': 'Positron without labels', 'metadata': {}, 'sources': {'carto': {'type': 'vector', 'url': 'https://tiles.basemaps.cartocdn.com/vector/carto.streets/v1/tiles.json'}}, 'sprite': 'https://tiles.basemaps.cartocdn.com/gl/positron-gl-style/sprite', 'glyphs': 'https://tiles.basemaps.cartocdn.com/fonts/{fontstack}/{range}.pbf', 'layers': [{'id': 'background', 'type': 'background', 'layout': {'visibility': 'visible'}, 'paint': {'background-color': '#fafaf8', 'background-opacity': 1}}, {'id': 'landcover', 'type': 'fill', 'source': 'carto', 'source-layer': 'landcover', 'filter': ['any', ['==', 'class', 'wood'], ['==', 'class', 'grass'], ['==', 'subclass', 'recreation_ground']], 'paint': {'fill-color': {'stops': [[8, 'rgba(234, 241, 233, 0.5)'], [9, 'rgba(234, 241, 233, 0.5)'], [11, 'rgba(234, 241, 233, 0.5)'], [13, 'rgba(234, 241, 233, 0.5)'], [15, 'rgba(234, 241, 233, 0.5)']]}, 'fill-opacity': 1}}, {'id': 'park_national_park', 'type': 'fill', 'source': 'carto', 'source-layer': 'park', 'minzoom': 9, 'filter': ['all', ['==', 'class', 'national_park']], 'layout': {'visibility': 'visible'}, 'paint': {'fill-color': {'stops': [[8, 'rgba(234, 241, 233, 0.5)'], [9, 'rgba(234, 241, 233, 0.5)'], [11, 'rgba(234, 241, 233, 0.5)'], [13, 'rgba(234, 241, 233, 0.5)'], [15, 'rgba(234, 241, 233, 0.5)']]}, 'fill-opacity': 1, 'fill-translate-anchor': 'map'}}, {'id': 'park_nature_reserve', 'type': 'fill', 'source': 'carto', 'source-layer': 'park', 'minzoom': 0, 'filter': ['all', ['==', 'class', 'nature_reserve']], 'layout': {'visibility': 'visible'}, 'paint': {'fill-color': {'stops': [[8, 'rgba(234, 241, 233, 0.5)'], [9, 'rgba(234, 241, 233, 0.5)'], [11, 'rgba(234, 241, 233, 0.5)'], [13, 'rgba(234, 241, 233, 0.5)'], [15, 'rgba(234, 241, 233, 0.5)']]}, 'fill-antialias': True, 'fill-opacity': {'stops': [[6, 0.7], [9, 0.9]]}}}, {'id': 'landuse_residential', 'type': 'fill', 'source': 'carto', 'source-layer': 'landuse', 'minzoom': 6, 'filter': ['any', ['==', 'class', 'residential']], 'paint': {'fill-color': {'stops': [[5, 'rgba(237, 237, 237, 0.5)'], [8, 'rgba(237, 237, 237, 0.45)'], [9, 'rgba(237, 237, 237, 0.4)'], [11, 'rgba(237, 237, 237, 0.35)'], [13, 'rgba(237, 237, 237, 0.3)'], [15, 'rgba(237, 237, 237, 0.25)'], [16, 'rgba(237, 237, 237, 0.25)']]}, 'fill-opacity': {'stops': [[6, 0.6], [9, 1]]}}}, {'id': 'landuse', 'type': 'fill', 'source': 'carto', 'source-layer': 'landuse', 'filter': ['any', ['==', 'class', 'cemetery'], ['==', 'class', 'stadium']], 'paint': {'fill-color': {'stops': [[8, 'rgba(234, 241, 233, 0.5)'], [9, 'rgba(234, 241, 233, 0.5)'], [11, 'rgba(234, 241, 233, 0.5)'], [13, 'rgba(234, 241, 233, 0.5)'], [15, 'rgba(234, 241, 233, 0.5)']]}}}, {'id': 'waterway', 'type': 'line', 'source': 'carto', 'source-layer': 'waterway', 'paint': {'line-color': '#d1dbdf', 'line-width': {'stops': [[8, 0.5], [9, 1], [15, 2], [16, 3]]}}}, {'id': 'boundary_county', 'type': 'line', 'source': 'carto', 'source-layer': 'boundary', 'minzoom': 9, 'maxzoom': 24, 'filter': ['all', ['==', 'admin_level', 6], ['==', 'maritime', 0]], 'paint': {'line-color': {'stops': [[4, '#ead5d7'], [5, '#ead5d7'], [6, '#e1c5c7']]}, 'line-width': {'stops': [[4, 0.5], [7, 1]]}, 'line-dasharray': {'stops': [[6, [1]], [7, [2, 2]]]}}}, {'id': 'boundary_state', 'type': 'line', 'source': 'carto', 'source-layer': 'boundary', 'minzoom': 4, 'filter': ['all', ['==', 'admin_level', 4], ['==', 'maritime', 0]], 'paint': {'line-color': {'stops': [[4, '#ead5d7'], [5, '#ead5d7'], [6, '#e1c5c7']]}, 'line-width': {'stops': [[4, 0.5], [7, 1], [8, 1], [9, 1.2]]}, 'line-dasharray': {'stops': [[6, [1]], [7, [2, 2]]]}}}, {'id': 'water', 'type': 'fill', 'source': 'carto', 'source-layer': 'water', 'minzoom': 0, 'maxzoom': 24, 'filter': ['all', ['==', '$type', 'Polygon']], 'layout': {'visibility': 'visible'}, 'paint': {'fill-color': '#d4dadc', 'fill-antialias': True, 'fill-translate-anchor': 'map', 'fill-opacity': 1}}, {'id': 'water_shadow', 'type': 'fill', 'source': 'carto', 'source-layer': 'water', 'minzoom': 0, 'filter': ['all', ['==', '$type', 'Polygon']], 'layout': {'visibility': 'visible'}, 'paint': {'fill-color': 'transparent', 'fill-antialias': True, 'fill-translate-anchor': 'map', 'fill-opacity': 1, 'fill-translate': {'stops': [[0, [0, 2]], [6, [0, 1]], [14, [0, 1]], [17, [0, 2]]]}}}, {'id': 'aeroway-runway', 'type': 'line', 'source': 'carto', 'source-layer': 'aeroway', 'minzoom': 12, 'filter': ['all', ['==', 'class', 'runway']], 'layout': {'line-cap': 'square'}, 'paint': {'line-width': {'stops': [[11, 1], [13, 4], [14, 6], [15, 8], [16, 10]]}, 'line-color': '#e8e8e8'}}, {'id': 'aeroway-taxiway', 'type': 'line', 'source': 'carto', 'source-layer': 'aeroway', 'minzoom': 13, 'filter': ['all', ['==', 'class', 'taxiway']], 'paint': {'line-color': '#e8e8e8', 'line-width': {'stops': [[13, 0.5], [14, 1], [15, 2], [16, 4]]}}}, {'id': 'tunnel_service_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'service'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 1], [16, 3], [17, 6], [18, 8]]}, 'line-opacity': 1, 'line-color': '#ddd'}}, {'id': 'tunnel_minor_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'minor'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'miter'}, 'paint': {'line-width': {'stops': [[11, 0.5], [12, 0.5], [14, 2], [15, 4], [16, 6], [17, 10], [18, 14]]}, 'line-opacity': 1, 'line-color': '#ddd'}}, {'id': 'tunnel_sec_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'secondary', 'tertiary'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 0.5], [12, 1], [13, 2], [14, 5], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#ddd'}}, {'id': 'tunnel_pri_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 8, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['!=', 'ramp', 1], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [13, 4], [14, 6], [15, 8], [16, 10], [17, 14], [18, 18]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': '#ddd'}}, {'id': 'tunnel_trunk_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 5, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['!=', 'ramp', 1], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'round', 'visibility': 'visible'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [13, 4], [14, 6], [15, 8], [16, 10], [17, 14], [18, 18]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': '#ddd'}}, {'id': 'tunnel_mot_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 5, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['!=', 'ramp', 1], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [12, 4], [13, 5], [14, 7], [15, 9], [16, 11], [17, 13], [18, 22]]}, 'line-opacity': {'stops': [[6, 0.5], [7, 1]]}, 'line-color': '#ddd'}}, {'id': 'tunnel_path', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'path'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 0.5], [16, 1], [18, 3]]}, 'line-opacity': 1, 'line-color': '#d5d5d5', 'line-dasharray': {'stops': [[15, [2, 2]], [18, [3, 3]]]}}}, {'id': 'tunnel_service_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'service'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 2], [16, 2], [17, 4], [18, 6]]}, 'line-opacity': 1, 'line-color': '#eee'}}, {'id': 'tunnel_minor_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'minor'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 3], [16, 4], [17, 8], [18, 12]]}, 'line-opacity': 1, 'line-color': 'rgba(238, 238, 238, 1)'}}, {'id': 'tunnel_sec_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'secondary', 'tertiary'], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 2], [13, 2], [14, 3], [15, 4], [16, 6], [17, 10], [18, 14]]}, 'line-opacity': 1, 'line-color': '#eee'}}, {'id': 'tunnel_pri_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['!=', 'ramp', 1], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 1], [13, 2], [14, 4], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#eee'}}, {'id': 'tunnel_trunk_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['!=', 'ramp', 1], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round', 'visibility': 'visible'}, 'paint': {'line-width': {'stops': [[11, 1], [13, 2], [14, 4], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#eee'}}, {'id': 'tunnel_mot_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 10, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['!=', 'ramp', 1], ['==', 'brunnel', 'tunnel']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[10, 1], [12, 2], [13, 3], [14, 5], [15, 7], [16, 9], [17, 11], [18, 20]]}, 'line-opacity': 1, 'line-color': '#eee'}}, {'id': 'tunnel_rail', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'filter': ['all', ['==', 'class', 'rail'], ['==', 'brunnel', 'tunnel']], 'layout': {'visibility': 'visible', 'line-join': 'round'}, 'paint': {'line-color': '#dddddd', 'line-width': {'base': 1.3, 'stops': [[13, 0.5], [14, 1], [15, 1], [16, 3], [21, 7]]}, 'line-opacity': 0.5}}, {'id': 'tunnel_rail_dash', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'filter': ['all', ['==', 'class', 'rail'], ['==', 'brunnel', 'tunnel']], 'layout': {'visibility': 'visible', 'line-join': 'round'}, 'paint': {'line-color': '#ffffff', 'line-width': {'base': 1.3, 'stops': [[15, 0.5], [16, 1], [20, 5]]}, 'line-dasharray': {'stops': [[15, [5, 5]], [16, [6, 6]]]}, 'line-opacity': 0.5}}, {'id': 'road_service_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'service'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 1], [16, 3], [17, 6], [18, 8]]}, 'line-opacity': 1, 'line-color': '#ddd'}}, {'id': 'road_minor_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'minor'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 0.5], [12, 0.5], [14, 2], [15, 3], [16, 4.3], [17, 10], [18, 14]]}, 'line-opacity': 1, 'line-color': {'stops': [[13, '#e6e6e6'], [15.7, '#e6e6e6'], [16, '#ddd']]}}}, {'id': 'road_pri_case_ramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 12, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['==', 'ramp', 1]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[12, 2], [13, 3], [14, 4], [15, 5], [16, 8], [17, 10]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': '#ddd'}}, {'id': 'road_trunk_case_ramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 12, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['==', 'ramp', 1]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[12, 2], [13, 3], [14, 4], [15, 5], [16, 8], [17, 10]]}, 'line-opacity': 1, 'line-color': {'stops': [[12, '#e6e6e6'], [14, '#ddd']]}}}, {'id': 'road_mot_case_ramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 12, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['==', 'ramp', 1]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[12, 2], [13, 3], [14, 4], [15, 5], [16, 8], [17, 10]]}, 'line-opacity': 1, 'line-color': {'stops': [[12, '#e6e6e6'], [14, '#ddd']]}}}, {'id': 'road_sec_case_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'secondary', 'tertiary'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 0.5], [12, 1.5], [13, 3], [14, 5], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': {'stops': [[11, '#e6e6e6'], [12.99, '#e6e6e6'], [13, '#ddd']]}}}, {'id': 'road_pri_case_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 7, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['!=', 'ramp', 1], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [13, 4], [14, 6], [15, 8], [16, 10], [17, 14], [18, 18]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': {'stops': [[7, '#e6e6e6'], [12, '#ddd']]}}}, {'id': 'road_trunk_case_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 5, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['!=', 'ramp', 1], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [13, 4], [14, 6], [15, 8], [16, 10], [17, 14], [18, 18]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': {'stops': [[5, '#e6e6e6'], [12, '#ddd']]}}}, {'id': 'road_mot_case_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 5, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['!=', 'ramp', 1], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.7], [8, 0.8], [11, 3], [12, 4], [13, 5], [14, 7], [15, 9], [16, 11], [17, 13], [18, 22]]}, 'line-opacity': {'stops': [[6, 0.5], [7, 1]]}, 'line-color': {'stops': [[5, '#e6e6e6'], [12, '#ddd']]}}}, {'id': 'road_path', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'path', 'track'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 0.5], [16, 1], [18, 3]]}, 'line-opacity': 1, 'line-color': '#d5d5d5', 'line-dasharray': {'stops': [[15, [2, 2]], [18, [3, 3]]]}}}, {'id': 'road_service_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'service'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 2], [16, 2], [17, 4], [18, 6]]}, 'line-opacity': 1, 'line-color': '#fdfdfd'}}, {'id': 'road_minor_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'minor'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 3], [16, 4], [17, 8], [18, 12]]}, 'line-opacity': 1, 'line-color': '#fdfdfd'}}, {'id': 'road_pri_fill_ramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 12, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['==', 'ramp', 1]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[12, 1], [13, 1.5], [14, 2], [15, 3], [16, 6], [17, 8]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'road_trunk_fill_ramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 12, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['==', 'ramp', 1]], 'layout': {'line-cap': 'square', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[12, 1], [13, 1.5], [14, 2], [15, 3], [16, 6], [17, 8]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'road_mot_fill_ramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 12, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['==', 'ramp', 1]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[12, 1], [13, 1.5], [14, 2], [15, 3], [16, 6], [17, 8]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'road_sec_fill_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'secondary', 'tertiary'], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 2], [13, 2], [14, 3], [15, 4], [16, 6], [17, 10], [18, 14]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'road_pri_fill_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 10, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['!=', 'ramp', 1], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[10, 0.3], [13, 2], [14, 4], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'road_trunk_fill_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 10, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['!=', 'ramp', 1], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 1], [13, 2], [14, 4], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'road_mot_fill_noramp', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 10, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['!=', 'ramp', 1], ['!has', 'brunnel']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[10, 1], [12, 2], [13, 3], [14, 5], [15, 7], [16, 9], [17, 11], [18, 20]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'rail', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'filter': ['all', ['==', 'class', 'rail'], ['!=', 'brunnel', 'tunnel']], 'layout': {'visibility': 'visible', 'line-join': 'round'}, 'paint': {'line-color': '#dddddd', 'line-width': {'base': 1.3, 'stops': [[13, 0.5], [14, 1], [15, 1], [16, 3], [21, 7]]}}}, {'id': 'rail_dash', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'filter': ['all', ['==', 'class', 'rail'], ['!=', 'brunnel', 'tunnel']], 'layout': {'visibility': 'visible', 'line-join': 'round'}, 'paint': {'line-color': '#ffffff', 'line-width': {'base': 1.3, 'stops': [[15, 0.5], [16, 1], [20, 5]]}, 'line-dasharray': {'stops': [[15, [5, 5]], [16, [6, 6]]]}}}, {'id': 'bridge_service_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'service'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 1], [16, 3], [17, 6], [18, 8]]}, 'line-opacity': 1, 'line-color': '#ddd'}}, {'id': 'bridge_minor_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'minor'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'miter'}, 'paint': {'line-width': {'stops': [[11, 0.5], [12, 0.5], [14, 2], [15, 3], [16, 4.3], [17, 10], [18, 14]]}, 'line-opacity': 1, 'line-color': {'stops': [[13, '#e6e6e6'], [15.7, '#e6e6e6'], [16, '#ddd']]}}}, {'id': 'bridge_sec_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'secondary', 'tertiary'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'miter'}, 'paint': {'line-width': {'stops': [[11, 0.5], [12, 1.5], [13, 3], [14, 5], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': {'stops': [[11, '#e6e6e6'], [12.99, '#e6e6e6'], [13, '#ddd']]}}}, {'id': 'bridge_pri_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 8, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['!=', 'ramp', 1], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [13, 4], [14, 6], [15, 8], [16, 10], [17, 14], [18, 18]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': {'stops': [[8, '#e6e6e6'], [12, '#ddd']]}}}, {'id': 'bridge_trunk_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 5, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['!=', 'ramp', 1], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round', 'visibility': 'visible'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [13, 4], [14, 6], [15, 8], [16, 10], [17, 14], [18, 18]]}, 'line-opacity': {'stops': [[5, 0.5], [7, 1]]}, 'line-color': {'stops': [[5, '#e6e6e6'], [12, '#ddd']]}}}, {'id': 'bridge_mot_case', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 5, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['!=', 'ramp', 1], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[6, 0.5], [7, 0.8], [8, 1], [11, 3], [12, 4], [13, 5], [14, 7], [15, 9], [16, 11], [17, 13], [18, 22]]}, 'line-opacity': {'stops': [[6, 0.5], [7, 1]]}, 'line-color': {'stops': [[5, '#e6e6e6'], [10, '#ddd']]}}}, {'id': 'bridge_path', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'path'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 0.5], [16, 1], [18, 3]]}, 'line-opacity': 1, 'line-color': '#d5d5d5', 'line-dasharray': {'stops': [[15, [2, 2]], [18, [3, 3]]]}}}, {'id': 'bridge_service_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'service'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 2], [16, 2], [17, 4], [18, 6]]}, 'line-opacity': 1, 'line-color': '#fdfdfd'}}, {'id': 'bridge_minor_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 15, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'minor'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[15, 3], [16, 4], [17, 8], [18, 12]]}, 'line-opacity': 1, 'line-color': '#fdfdfd'}}, {'id': 'bridge_sec_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 13, 'maxzoom': 24, 'filter': ['all', ['in', 'class', 'secondary', 'tertiary'], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 2], [13, 2], [14, 3], [15, 4], [16, 6], [17, 10], [18, 14]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'bridge_pri_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'primary'], ['!=', 'ramp', 1], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[11, 1], [13, 2], [14, 4], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'bridge_trunk_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 11, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'trunk'], ['!=', 'ramp', 1], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round', 'visibility': 'visible'}, 'paint': {'line-width': {'stops': [[11, 1], [13, 2], [14, 4], [15, 6], [16, 8], [17, 12], [18, 16]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'bridge_mot_fill', 'type': 'line', 'source': 'carto', 'source-layer': 'transportation', 'minzoom': 10, 'maxzoom': 24, 'filter': ['all', ['==', 'class', 'motorway'], ['!=', 'ramp', 1], ['==', 'brunnel', 'bridge']], 'layout': {'line-cap': 'butt', 'line-join': 'round'}, 'paint': {'line-width': {'stops': [[10, 1], [12, 2], [13, 3], [14, 5], [15, 7], [16, 9], [17, 11], [18, 20]]}, 'line-opacity': 1, 'line-color': '#fff'}}, {'id': 'building', 'type': 'fill', 'source': 'carto', 'source-layer': 'building', 'layout': {'visibility': 'visible'}, 'paint': {'fill-color': {'base': 1, 'stops': [[15.5, '#dfdfdf'], [16, '#dfdfdf']]}, 'fill-antialias': True}}, {'id': 'building-top', 'type': 'fill', 'source': 'carto', 'source-layer': 'building', 'layout': {'visibility': 'visible'}, 'paint': {'fill-translate': {'base': 1, 'stops': [[14, [0, 0]], [16, [-2, -2]]]}, 'fill-outline-color': '#dfdfdf', 'fill-color': '#ededed', 'fill-opacity': {'base': 1, 'stops': [[13, 0], [16, 1]]}}}, {'id': 'boundary_country_outline', 'type': 'line', 'source': 'carto', 'source-layer': 'boundary', 'minzoom': 6, 'maxzoom': 24, 'filter': ['all', ['==', 'admin_level', 2], ['==', 'maritime', 0]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-color': '#f3efed', 'line-opacity': 0.5, 'line-width': 8, 'line-offset': 0}}, {'id': 'boundary_country_inner', 'type': 'line', 'source': 'carto', 'source-layer': 'boundary', 'minzoom': 0, 'filter': ['all', ['==', 'admin_level', 2], ['==', 'maritime', 0]], 'layout': {'line-cap': 'round', 'line-join': 'round'}, 'paint': {'line-color': {'stops': [[4, '#f2e6e7'], [5, '#ebd6d8'], [6, '#ebd6d8']]}, 'line-opacity': 1, 'line-width': {'stops': [[3, 1], [6, 1.5]]}, 'line-offset': 0}}], 'id': 'voyager', 'owner': 'Carto'}\nCurrent DeckGL layers: 0\n</pre> In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]: In\u00a0[5]: Copied! <pre># Add airports GeoJSON layer\nairports_url = (\n    \"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_airports.geojson\"\n)\n\nm.add_geojson_layer(\n    layer_id=\"airports\",\n    geojson_data=airports_url,\n    filled=True,\n    pointRadiusMinPixels=2,\n    pointRadiusScale=2000,\n    getPointRadius=\"@@=11 - f.properties.scalerank\",  # DeckGL expression\n    getFillColor=[200, 0, 80, 180],\n    pickable=True,\n    autoHighlight=True,\n)\n\nprint(f\"Added airports layer. Total layers: {len(m.deckgl_layers)}\")\n</pre> # Add airports GeoJSON layer airports_url = (     \"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_airports.geojson\" )  m.add_geojson_layer(     layer_id=\"airports\",     geojson_data=airports_url,     filled=True,     pointRadiusMinPixels=2,     pointRadiusScale=2000,     getPointRadius=\"@@=11 - f.properties.scalerank\",  # DeckGL expression     getFillColor=[200, 0, 80, 180],     pickable=True,     autoHighlight=True, )  print(f\"Added airports layer. Total layers: {len(m.deckgl_layers)}\") <pre>Added airports layer. Total layers: 1\n</pre> In\u00a0[6]: Copied! <pre># Add arc layer showing connections from London\nm.add_arc_layer(\n    layer_id=\"arcs\",\n    data=airports_url,\n    dataTransform=\"@@=d =&gt; d.features.filter(f =&gt; f.properties.scalerank &lt; 4)\",  # Filter major airports\n    getSourcePosition=\"@@=f =&gt; [-0.4531566, 51.4709959]\",  # London coordinates (function)\n    getTargetPosition=\"@@=f =&gt; f.geometry.coordinates\",  # Target airport coordinates\n    getSourceColor=[0, 128, 200],\n    getTargetColor=[200, 0, 80],\n    getWidth=1,\n    pickable=True,\n)\n\nprint(f\"Added arcs layer. Total layers: {len(m.deckgl_layers)}\")\n</pre> # Add arc layer showing connections from London m.add_arc_layer(     layer_id=\"arcs\",     data=airports_url,     dataTransform=\"@@=d =&gt; d.features.filter(f =&gt; f.properties.scalerank &lt; 4)\",  # Filter major airports     getSourcePosition=\"@@=f =&gt; [-0.4531566, 51.4709959]\",  # London coordinates (function)     getTargetPosition=\"@@=f =&gt; f.geometry.coordinates\",  # Target airport coordinates     getSourceColor=[0, 128, 200],     getTargetColor=[200, 0, 80],     getWidth=1,     pickable=True, )  print(f\"Added arcs layer. Total layers: {len(m.deckgl_layers)}\") <pre>Added arcs layer. Total layers: 2\n</pre> In\u00a0[7]: Copied! <pre># Create sample data for scatterplot\nsample_data = [\n    {\"position\": [-0.1276, 51.5074], \"name\": \"London\", \"size\": 1000},\n    {\"position\": [2.3522, 48.8566], \"name\": \"Paris\", \"size\": 800},\n    {\"position\": [13.4050, 52.5200], \"name\": \"Berlin\", \"size\": 600},\n    {\"position\": [12.4964, 41.9028], \"name\": \"Rome\", \"size\": 700},\n    {\"position\": [-3.7038, 40.4168], \"name\": \"Madrid\", \"size\": 650},\n]\n\nm.add_scatterplot_layer(\n    layer_id=\"cities\",\n    data=sample_data,\n    get_position=\"@@=d.position\",\n    get_radius=\"@@=d.size\",\n    get_fill_color=[255, 140, 0, 200],\n    radiusMinPixels=10,\n    radiusMaxPixels=100,\n    pickable=True,\n)\n\nprint(f\"Added cities scatterplot layer. Total layers: {len(m.deckgl_layers)}\")\n</pre> # Create sample data for scatterplot sample_data = [     {\"position\": [-0.1276, 51.5074], \"name\": \"London\", \"size\": 1000},     {\"position\": [2.3522, 48.8566], \"name\": \"Paris\", \"size\": 800},     {\"position\": [13.4050, 52.5200], \"name\": \"Berlin\", \"size\": 600},     {\"position\": [12.4964, 41.9028], \"name\": \"Rome\", \"size\": 700},     {\"position\": [-3.7038, 40.4168], \"name\": \"Madrid\", \"size\": 650}, ]  m.add_scatterplot_layer(     layer_id=\"cities\",     data=sample_data,     get_position=\"@@=d.position\",     get_radius=\"@@=d.size\",     get_fill_color=[255, 140, 0, 200],     radiusMinPixels=10,     radiusMaxPixels=100,     pickable=True, )  print(f\"Added cities scatterplot layer. Total layers: {len(m.deckgl_layers)}\") <pre>Added cities scatterplot layer. Total layers: 3\n</pre> In\u00a0[8]: Copied! <pre># Display the map\nm\n</pre> # Display the map m Out[8]: In\u00a0[9]: Copied! <pre># Export to HTML\nhtml_content = m.to_html(\n    filename=\"deckgl_example_export.html\",\n    title=\"DeckGL Map Example - Airports and Cities\",\n    width=\"100%\",\n    height=\"600px\",\n)\n\nprint(f\"HTML exported successfully!\")\nprint(f\"File saved as: deckgl_example_export.html\")\nprint(f\"HTML content length: {len(html_content)} characters\")\n</pre> # Export to HTML html_content = m.to_html(     filename=\"deckgl_example_export.html\",     title=\"DeckGL Map Example - Airports and Cities\",     width=\"100%\",     height=\"600px\", )  print(f\"HTML exported successfully!\") print(f\"File saved as: deckgl_example_export.html\") print(f\"HTML content length: {len(html_content)} characters\") <pre>HTML exported successfully!\nFile saved as: deckgl_example_export.html\nHTML content length: 87744 characters\n</pre> In\u00a0[10]: Copied! <pre># Change map view\nprint(\"Current center:\", m.center)\nprint(\"Current zoom:\", m.zoom)\n\n# Update map center and zoom\nm.set_center(48.8566, 2.3522)  # Paris\nm.set_zoom(6)\n\nprint(\"New center:\", m.center)\nprint(\"New zoom:\", m.zoom)\n</pre> # Change map view print(\"Current center:\", m.center) print(\"Current zoom:\", m.zoom)  # Update map center and zoom m.set_center(48.8566, 2.3522)  # Paris m.set_zoom(6)  print(\"New center:\", m.center) print(\"New zoom:\", m.zoom) <pre>Current center: [51.47, 0.45]\nCurrent zoom: 4.0\nNew center: [48.8566, 2.3522]\nNew zoom: 6.0\n</pre> In\u00a0[11]: Copied! <pre># Change bearing and pitch\nm.set_bearing(45)\nm.set_pitch(60)\n\nprint(\"New bearing:\", m.bearing)\nprint(\"New pitch:\", m.pitch)\n</pre> # Change bearing and pitch m.set_bearing(45) m.set_pitch(60)  print(\"New bearing:\", m.bearing) print(\"New pitch:\", m.pitch) <pre>New bearing: 45.0\nNew pitch: 60.0\n</pre> In\u00a0[12]: Copied! <pre># Show current layers\nprint(\"Current DeckGL layers:\")\nfor i, layer in enumerate(m.deckgl_layers):\n    print(\n        f\"  {i+1}. {layer.get('id', 'Unknown')} ({layer.get('@@type', 'Unknown type')})\"\n    )\n\n# Remove a layer\nm.remove_deckgl_layer(\"cities\")\nprint(f\"\\nAfter removing cities layer: {len(m.deckgl_layers)} layers remaining\")\n</pre> # Show current layers print(\"Current DeckGL layers:\") for i, layer in enumerate(m.deckgl_layers):     print(         f\"  {i+1}. {layer.get('id', 'Unknown')} ({layer.get('@@type', 'Unknown type')})\"     )  # Remove a layer m.remove_deckgl_layer(\"cities\") print(f\"\\nAfter removing cities layer: {len(m.deckgl_layers)} layers remaining\") <pre>Current DeckGL layers:\n  1. airports (GeoJsonLayer)\n  2. arcs (ArcLayer)\n  3. cities (ScatterplotLayer)\n\nAfter removing cities layer: 2 layers remaining\n</pre> In\u00a0[13]: Copied! <pre># Add the cities layer back with different styling\nm.add_scatterplot_layer(\n    layer_id=\"cities_styled\",\n    data=sample_data,\n    get_position=\"@@=d.position\",\n    get_radius=\"@@=d.size * 0.5\",\n    get_fill_color=[0, 255, 0, 180],  # Green color\n    radiusMinPixels=5,\n    radiusMaxPixels=50,\n    pickable=True,\n)\n\nprint(f\"Added styled cities layer. Total layers: {len(m.deckgl_layers)}\")\n</pre> # Add the cities layer back with different styling m.add_scatterplot_layer(     layer_id=\"cities_styled\",     data=sample_data,     get_position=\"@@=d.position\",     get_radius=\"@@=d.size * 0.5\",     get_fill_color=[0, 255, 0, 180],  # Green color     radiusMinPixels=5,     radiusMaxPixels=50,     pickable=True, )  print(f\"Added styled cities layer. Total layers: {len(m.deckgl_layers)}\") <pre>Added styled cities layer. Total layers: 3\n</pre> In\u00a0[14]: Copied! <pre># Export final version\nfinal_html = m.to_html(\n    filename=\"deckgl_final_example.html\",\n    title=\"Final DeckGL Map - Airports, Arcs, and Cities\",\n    width=\"100%\",\n    height=\"800px\",\n)\n\nprint(\"Final HTML exported successfully!\")\nprint(\"File saved as: deckgl_final_example.html\")\nprint(f\"Final map has {len(m.deckgl_layers)} DeckGL layers\")\nprint(\n    f\"Final view: center={m.center}, zoom={m.zoom}, bearing={m.bearing}, pitch={m.pitch}\"\n)\n</pre> # Export final version final_html = m.to_html(     filename=\"deckgl_final_example.html\",     title=\"Final DeckGL Map - Airports, Arcs, and Cities\",     width=\"100%\",     height=\"800px\", )  print(\"Final HTML exported successfully!\") print(\"File saved as: deckgl_final_example.html\") print(f\"Final map has {len(m.deckgl_layers)} DeckGL layers\") print(     f\"Final view: center={m.center}, zoom={m.zoom}, bearing={m.bearing}, pitch={m.pitch}\" ) <pre>Final HTML exported successfully!\nFile saved as: deckgl_final_example.html\nFinal map has 3 DeckGL layers\nFinal view: center=[48.8566, 2.3522], zoom=6.0, bearing=45.0, pitch=60.0\n</pre>"},{"location":"examples/deckgl_example/#deckgl-backend-example","title":"DeckGL Backend Example\u00b6","text":"<p>This notebook demonstrates how to use the DeckGL backend in anymap, which builds upon the MapLibre backend to provide advanced data visualization capabilities using DeckGL layers.</p>"},{"location":"examples/deckgl_example/#installation","title":"Installation\u00b6","text":"<p>Make sure you have anymap installed:</p> <pre>pip install anymap\n</pre>"},{"location":"examples/deckgl_example/#troubleshooting","title":"Troubleshooting\u00b6","text":"<p>If you encounter widget loading issues:</p> <ol> <li>Restart the kernel and clear all outputs</li> <li>Check internet connectivity - DeckGL loads from CDN</li> <li>Open browser console (F12) to see any JavaScript errors</li> <li>Try a simple example first before complex visualizations</li> </ol> <p>The widget dynamically loads DeckGL and MapLibre from CDN, so it requires an internet connection.</p>"},{"location":"examples/deckgl_example/#basic-setup","title":"Basic Setup\u00b6","text":"<p>First, let's import the necessary modules and create a basic DeckGL map:</p>"},{"location":"examples/deckgl_example/#simple-test-first","title":"Simple Test First\u00b6","text":"<p>Let's start with a very simple DeckGL map to ensure the widget loads correctly:</p>"},{"location":"examples/deckgl_example/#adding-geojson-layer","title":"Adding GeoJSON Layer\u00b6","text":"<p>Let's add a GeoJSON layer showing airports around the world:</p>"},{"location":"examples/deckgl_example/#adding-arc-layer","title":"Adding Arc Layer\u00b6","text":"<p>Now let's add an Arc layer showing connections from London to major airports. This will display curved lines connecting London to airports with scalerank &lt; 4:</p>"},{"location":"examples/deckgl_example/#adding-scatterplot-layer","title":"Adding Scatterplot Layer\u00b6","text":"<p>Let's also add a scatterplot layer with custom styling:</p>"},{"location":"examples/deckgl_example/#display-the-map","title":"Display the Map\u00b6","text":"<p>Now let's display the interactive map (note: this will only work in a Jupyter environment with widget support):</p>"},{"location":"examples/deckgl_example/#export-to-html","title":"Export to HTML\u00b6","text":"<p>Let's export the map to a standalone HTML file that can be opened in any browser:</p>"},{"location":"examples/deckgl_example/#map-interaction-methods","title":"Map Interaction Methods\u00b6","text":"<p>The DeckGL map supports various interaction methods inherited from the MapLibre backend:</p>"},{"location":"examples/deckgl_example/#layer-management","title":"Layer Management\u00b6","text":"<p>You can manage DeckGL layers dynamically:</p>"},{"location":"examples/deckgl_example/#export-final-version","title":"Export Final Version\u00b6","text":"<p>Let's export the final version with all our changes:</p>"},{"location":"examples/deckgl_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated:</p> <ol> <li>Basic DeckGL Map Creation: Creating a DeckGL map with custom styling and view settings</li> <li>GeoJSON Layer: Adding interactive airport data with custom styling</li> <li>Arc Layer: Visualizing connections between geographic points</li> <li>Scatterplot Layer: Displaying point data with custom sizing and colors</li> <li>Map Interaction: Changing view, bearing, and pitch programmatically</li> <li>Layer Management: Adding and removing layers dynamically</li> <li>HTML Export: Exporting interactive maps to standalone HTML files</li> </ol> <p>The DeckGL backend provides powerful visualization capabilities while maintaining compatibility with the anymap framework. The exported HTML files can be shared and viewed in any modern web browser without requiring a Python environment.</p>"},{"location":"examples/draw_control_example/","title":"Draw control example","text":"In\u00a0[1]: Copied! <pre># Import required modules\nfrom anymap import MapLibreMap\nimport json\n\nprint(\"AnyMap loaded successfully!\")\nprint(\"Draw control support is built into the MapLibre implementation.\")\n</pre> # Import required modules from anymap import MapLibreMap import json  print(\"AnyMap loaded successfully!\") print(\"Draw control support is built into the MapLibre implementation.\") <pre>AnyMap loaded successfully!\nDraw control support is built into the MapLibre implementation.\n</pre> In\u00a0[2]: Copied! <pre># Create a map\nm = MapLibreMap(\n    center=[40.7749, -122.4194],  # San Francisco coordinates\n    zoom=12,\n    height=\"600px\",\n    style=\"positron\",\n)\n\n# Add draw control with default settings\nm.add_draw_control()\n\nprint(\"Draw control added with default settings\")\nprint(\"You can now draw points, lines, and polygons on the map!\")\nm\n</pre> # Create a map m = MapLibreMap(     center=[40.7749, -122.4194],  # San Francisco coordinates     zoom=12,     height=\"600px\",     style=\"positron\", )  # Add draw control with default settings m.add_draw_control()  print(\"Draw control added with default settings\") print(\"You can now draw points, lines, and polygons on the map!\") m <pre>Draw control added with default settings\nYou can now draw points, lines, and polygons on the map!\n</pre> Out[2]: <p>Instructions for the map above:</p> <ul> <li>Use the point tool (\ud83d\udccd) to add points</li> <li>Use the line tool (\ud83d\udccf) to draw lines</li> <li>Use the polygon tool (\ud83d\udd37) to draw polygons</li> <li>Use the trash tool (\ud83d\uddd1\ufe0f) to delete selected features</li> <li>Click and drag to select and move features</li> </ul> In\u00a0[3]: Copied! <pre># Create a new map for custom configuration\nm2 = MapLibreMap(\n    center=[40.7749, -122.4194], zoom=13, height=\"600px\", style=\"dark-matter\"\n)\n\n# Add draw control with custom configuration\nm2.add_draw_control(\n    position=\"top-right\",  # Position the control on the top-right\n    controls={\n        \"point\": True,  # Enable point drawing\n        \"line_string\": False,  # Disable line drawing\n        \"polygon\": True,  # Enable polygon drawing\n        \"trash\": True,  # Enable delete tool\n    },\n    default_mode=\"draw_polygon\",  # Start in polygon drawing mode\n    keybindings=True,  # Enable keyboard shortcuts\n    touch_enabled=True,  # Enable touch interactions\n)\n\nprint(\"Custom draw control added:\")\nprint(\"- Position: top-right\")\nprint(\"- Tools: points and polygons only\")\nprint(\"- Default mode: polygon drawing\")\nm2\n</pre> # Create a new map for custom configuration m2 = MapLibreMap(     center=[40.7749, -122.4194], zoom=13, height=\"600px\", style=\"dark-matter\" )  # Add draw control with custom configuration m2.add_draw_control(     position=\"top-right\",  # Position the control on the top-right     controls={         \"point\": True,  # Enable point drawing         \"line_string\": False,  # Disable line drawing         \"polygon\": True,  # Enable polygon drawing         \"trash\": True,  # Enable delete tool     },     default_mode=\"draw_polygon\",  # Start in polygon drawing mode     keybindings=True,  # Enable keyboard shortcuts     touch_enabled=True,  # Enable touch interactions )  print(\"Custom draw control added:\") print(\"- Position: top-right\") print(\"- Tools: points and polygons only\") print(\"- Default mode: polygon drawing\") m2 <pre>Custom draw control added:\n- Position: top-right\n- Tools: points and polygons only\n- Default mode: polygon drawing\n</pre> Out[3]: In\u00a0[4]: Copied! <pre># Create sample GeoJSON data\nsample_geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco City Hall\", \"type\": \"landmark\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [-122.4200, 37.7700],\n                        [-122.4150, 37.7700],\n                        [-122.4150, 37.7750],\n                        [-122.4200, 37.7750],\n                        [-122.4200, 37.7700],\n                    ]\n                ],\n            },\n            \"properties\": {\"name\": \"Sample Area\", \"type\": \"area\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                    [-122.4180, 37.7720],\n                    [-122.4160, 37.7740],\n                    [-122.4140, 37.7730],\n                ],\n            },\n            \"properties\": {\"name\": \"Sample Route\", \"type\": \"route\"},\n        },\n    ],\n}\n\n# Create a new map\nm3 = MapLibreMap(center=[37.7749, -122.4194], zoom=14, height=\"600px\", style=\"voyager\")\n\n# Add draw control\nm3.add_draw_control(position=\"top-left\")\n\n# Load the sample GeoJSON data\nm3.load_draw_data(sample_geojson)\n\nprint(\"Loaded sample GeoJSON data:\")\nprint(\"- 1 Point (City Hall)\")\nprint(\"- 1 Polygon (Sample Area)\")\nprint(\"- 1 LineString (Sample Route)\")\nprint(\"\\nYou can now edit these existing features or draw new ones!\")\nm3\n</pre> # Create sample GeoJSON data sample_geojson = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco City Hall\", \"type\": \"landmark\"},         },         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Polygon\",                 \"coordinates\": [                     [                         [-122.4200, 37.7700],                         [-122.4150, 37.7700],                         [-122.4150, 37.7750],                         [-122.4200, 37.7750],                         [-122.4200, 37.7700],                     ]                 ],             },             \"properties\": {\"name\": \"Sample Area\", \"type\": \"area\"},         },         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"LineString\",                 \"coordinates\": [                     [-122.4180, 37.7720],                     [-122.4160, 37.7740],                     [-122.4140, 37.7730],                 ],             },             \"properties\": {\"name\": \"Sample Route\", \"type\": \"route\"},         },     ], }  # Create a new map m3 = MapLibreMap(center=[37.7749, -122.4194], zoom=14, height=\"600px\", style=\"voyager\")  # Add draw control m3.add_draw_control(position=\"top-left\")  # Load the sample GeoJSON data m3.load_draw_data(sample_geojson)  print(\"Loaded sample GeoJSON data:\") print(\"- 1 Point (City Hall)\") print(\"- 1 Polygon (Sample Area)\") print(\"- 1 LineString (Sample Route)\") print(\"\\nYou can now edit these existing features or draw new ones!\") m3 <pre>Loaded sample GeoJSON data:\n- 1 Point (City Hall)\n- 1 Polygon (Sample Area)\n- 1 LineString (Sample Route)\n\nYou can now edit these existing features or draw new ones!\n</pre> Out[4]: In\u00a0[5]: Copied! <pre># Note: In a real Jupyter environment, you would draw some features on the map above\n# then run this cell to get the drawn data\n\n# Trigger retrieval of draw data\ndraw_data = m3.get_draw_data()\n\n# The actual data will be available in the _draw_data trait\nprint(\"Draw data retrieval triggered.\")\nprint(\"In a real environment, drawn features would be available in m3._draw_data\")\n\n# You can also access it directly (this will be empty until features are drawn)\ncurrent_draw_data = m3._draw_data\nprint(f\"Current draw data: {current_draw_data}\")\n</pre> # Note: In a real Jupyter environment, you would draw some features on the map above # then run this cell to get the drawn data  # Trigger retrieval of draw data draw_data = m3.get_draw_data()  # The actual data will be available in the _draw_data trait print(\"Draw data retrieval triggered.\") print(\"In a real environment, drawn features would be available in m3._draw_data\")  # You can also access it directly (this will be empty until features are drawn) current_draw_data = m3._draw_data print(f\"Current draw data: {current_draw_data}\") <pre>Draw data retrieval triggered.\nIn a real environment, drawn features would be available in m3._draw_data\nCurrent draw data: {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'geometry': {'type': 'Point', 'coordinates': [-122.4194, 37.7749]}, 'properties': {'name': 'San Francisco City Hall', 'type': 'landmark'}}, {'type': 'Feature', 'geometry': {'type': 'Polygon', 'coordinates': [[[-122.42, 37.77], [-122.415, 37.77], [-122.415, 37.775], [-122.42, 37.775], [-122.42, 37.77]]]}, 'properties': {'name': 'Sample Area', 'type': 'area'}}, {'type': 'Feature', 'geometry': {'type': 'LineString', 'coordinates': [[-122.418, 37.772], [-122.416, 37.774], [-122.414, 37.773]]}, 'properties': {'name': 'Sample Route', 'type': 'route'}}]}\n</pre> In\u00a0[6]: Copied! <pre># Set different drawing modes\nprint(\"Available drawing modes:\")\nprint(\"- simple_select: Select and edit features\")\nprint(\"- direct_select: Edit vertices of selected features\")\nprint(\"- draw_point: Draw points\")\nprint(\"- draw_line_string: Draw lines\")\nprint(\"- draw_polygon: Draw polygons\")\nprint(\"- static: Disable all interactions\")\n\n# Set the draw mode to polygon drawing\nm3.set_draw_mode(\"draw_polygon\")\nprint(\"\\n\u2713 Set mode to polygon drawing\")\n\n# You can change modes programmatically\nprint(\"\\nTry drawing a polygon, then run the next cell to switch to point mode\")\n</pre> # Set different drawing modes print(\"Available drawing modes:\") print(\"- simple_select: Select and edit features\") print(\"- direct_select: Edit vertices of selected features\") print(\"- draw_point: Draw points\") print(\"- draw_line_string: Draw lines\") print(\"- draw_polygon: Draw polygons\") print(\"- static: Disable all interactions\")  # Set the draw mode to polygon drawing m3.set_draw_mode(\"draw_polygon\") print(\"\\n\u2713 Set mode to polygon drawing\")  # You can change modes programmatically print(\"\\nTry drawing a polygon, then run the next cell to switch to point mode\") <pre>Available drawing modes:\n- simple_select: Select and edit features\n- direct_select: Edit vertices of selected features\n- draw_point: Draw points\n- draw_line_string: Draw lines\n- draw_polygon: Draw polygons\n- static: Disable all interactions\n\n\u2713 Set mode to polygon drawing\n\nTry drawing a polygon, then run the next cell to switch to point mode\n</pre> In\u00a0[7]: Copied! <pre># Switch to point drawing mode\nm3.set_draw_mode(\"draw_point\")\nprint(\"\u2713 Switched to point drawing mode\")\n</pre> # Switch to point drawing mode m3.set_draw_mode(\"draw_point\") print(\"\u2713 Switched to point drawing mode\") <pre>\u2713 Switched to point drawing mode\n</pre> In\u00a0[8]: Copied! <pre># Create a map with some initial data for demonstration\nm4 = MapLibreMap(center=[37.7749, -122.4194], zoom=13, height=\"600px\", style=\"streets\")\n\n# Add draw control\nm4.add_draw_control()\n\n# Load some test data\ntest_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"Point 1\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4150, 37.7700]},\n            \"properties\": {\"name\": \"Point 2\"},\n        },\n    ],\n}\n\nm4.load_draw_data(test_data)\nprint(\"Loaded test data with 2 points\")\nprint(\"Try drawing some additional features, then run the cell below to test deletion\")\nm4\n</pre> # Create a map with some initial data for demonstration m4 = MapLibreMap(center=[37.7749, -122.4194], zoom=13, height=\"600px\", style=\"streets\")  # Add draw control m4.add_draw_control()  # Load some test data test_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"Point 1\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4150, 37.7700]},             \"properties\": {\"name\": \"Point 2\"},         },     ], }  m4.load_draw_data(test_data) print(\"Loaded test data with 2 points\") print(\"Try drawing some additional features, then run the cell below to test deletion\") m4 <pre>Loaded test data with 2 points\nTry drawing some additional features, then run the cell below to test deletion\n</pre> Out[8]: In\u00a0[9]: Copied! <pre># Clear all drawn features\nm4.clear_draw_data()\nprint(\"\u2713 Cleared all drawn features\")\n\n# Note: In a real scenario, you could also delete specific features by ID:\n# m4.delete_draw_features(['feature_id_1', 'feature_id_2'])\nprint(\"\\nTo delete specific features, you would use:\")\nprint(\"m4.delete_draw_features(['feature_id_1', 'feature_id_2'])\")\n</pre> # Clear all drawn features m4.clear_draw_data() print(\"\u2713 Cleared all drawn features\")  # Note: In a real scenario, you could also delete specific features by ID: # m4.delete_draw_features(['feature_id_1', 'feature_id_2']) print(\"\\nTo delete specific features, you would use:\") print(\"m4.delete_draw_features(['feature_id_1', 'feature_id_2'])\") <pre>\u2713 Cleared all drawn features\n\nTo delete specific features, you would use:\nm4.delete_draw_features(['feature_id_1', 'feature_id_2'])\n</pre> In\u00a0[10]: Copied! <pre># Create a final map for HTML export\nexport_map = MapLibreMap(\n    center=[37.7749, -122.4194], zoom=12, height=\"600px\", style=\"satellite\"\n)\n\n# Add draw control\nexport_map.add_draw_control(\n    position=\"top-right\",\n    controls={\"point\": True, \"line_string\": True, \"polygon\": True, \"trash\": True},\n)\n\n# Load some sample data\nexport_map.load_draw_data(sample_geojson)\n\n# Export to HTML\nexport_map.to_html(\n    \"san_francisco_draw_map.html\", title=\"San Francisco Draw Control Demo\"\n)\n\nprint(\"Map exported to 'san_francisco_draw_map.html'\")\nprint(\n    \"The HTML file includes draw control functionality and can be opened in any browser\"\n)\nexport_map\n</pre> # Create a final map for HTML export export_map = MapLibreMap(     center=[37.7749, -122.4194], zoom=12, height=\"600px\", style=\"satellite\" )  # Add draw control export_map.add_draw_control(     position=\"top-right\",     controls={\"point\": True, \"line_string\": True, \"polygon\": True, \"trash\": True}, )  # Load some sample data export_map.load_draw_data(sample_geojson)  # Export to HTML export_map.to_html(     \"san_francisco_draw_map.html\", title=\"San Francisco Draw Control Demo\" )  print(\"Map exported to 'san_francisco_draw_map.html'\") print(     \"The HTML file includes draw control functionality and can be opened in any browser\" ) export_map <pre>Map exported to 'san_francisco_draw_map.html'\nThe HTML file includes draw control functionality and can be opened in any browser\n</pre> Out[10]:"},{"location":"examples/draw_control_example/#draw-control-support-in-anymap","title":"Draw Control Support in AnyMap\u00b6","text":"<p>This notebook demonstrates how to use the draw control functionality with the MapLibre implementation in AnyMap. The draw control allows users to interactively draw and edit geometries on the map.</p>"},{"location":"examples/draw_control_example/#what-is-the-draw-control","title":"What is the Draw Control?\u00b6","text":"<p>The draw control is based on mapbox-gl-draw and provides:</p> <ul> <li>Interactive drawing of points, lines, and polygons</li> <li>Editing and deleting existing geometries</li> <li>Loading existing GeoJSON data</li> <li>Retrieving drawn features as GeoJSON</li> <li>Programmatic control over drawing modes</li> </ul>"},{"location":"examples/draw_control_example/#features","title":"Features\u00b6","text":"<ul> <li>\u2705 Draw geometries: Points, lines, and polygons</li> <li>\u2705 Edit geometries: Modify existing shapes</li> <li>\u2705 Delete geometries: Remove unwanted features</li> <li>\u2705 Load data: Import existing GeoJSON</li> <li>\u2705 Export data: Get drawn features as GeoJSON</li> <li>\u2705 Mode control: Switch between different drawing modes</li> <li>\u2705 Event handling: React to drawing events</li> </ul>"},{"location":"examples/draw_control_example/#example-1-basic-draw-control","title":"Example 1: Basic Draw Control\u00b6","text":"<p>Let's start with a simple example of adding a draw control to the map.</p>"},{"location":"examples/draw_control_example/#example-2-custom-draw-control-configuration","title":"Example 2: Custom Draw Control Configuration\u00b6","text":"<p>You can customize which drawing tools are available and where the control is positioned.</p>"},{"location":"examples/draw_control_example/#example-3-loading-existing-geojson-data","title":"Example 3: Loading Existing GeoJSON Data\u00b6","text":"<p>You can load existing GeoJSON data into the draw control for editing.</p>"},{"location":"examples/draw_control_example/#example-4-retrieving-draw-data","title":"Example 4: Retrieving Draw Data\u00b6","text":"<p>You can retrieve the currently drawn features as GeoJSON.</p>"},{"location":"examples/draw_control_example/#example-5-draw-control-mode-management","title":"Example 5: Draw Control Mode Management\u00b6","text":"<p>You can programmatically control the drawing mode.</p>"},{"location":"examples/draw_control_example/#example-6-clearing-and-deleting-features","title":"Example 6: Clearing and Deleting Features\u00b6","text":"<p>You can clear all drawn features or delete specific ones.</p>"},{"location":"examples/draw_control_example/#example-7-export-map-with-draw-control-to-html","title":"Example 7: Export Map with Draw Control to HTML\u00b6","text":"<p>Maps with draw controls can be exported to standalone HTML files.</p>"},{"location":"examples/draw_control_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the draw control functionality in AnyMap:</p>"},{"location":"examples/draw_control_example/#key-features-covered","title":"\u2705 Key Features Covered:\u00b6","text":"<ol> <li>Basic Draw Control: Simple addition of draw tools to the map</li> <li>Custom Configuration: Customizing available tools, position, and behavior</li> <li>Loading Data: Importing existing GeoJSON data for editing</li> <li>Retrieving Data: Getting drawn features as GeoJSON</li> <li>Mode Management: Programmatically controlling drawing modes</li> <li>Data Management: Clearing and deleting features</li> <li>HTML Export: Exporting maps with draw controls to HTML</li> </ol>"},{"location":"examples/draw_control_example/#method-signatures","title":"\ud83d\udd27 Method Signatures:\u00b6","text":"<pre># Add draw control\nmap.add_draw_control(\n    position: str = \"top-left\",\n    controls: Optional[Dict[str, bool]] = None,\n    default_mode: str = \"simple_select\",\n    keybindings: bool = True,\n    touch_enabled: bool = True\n)\n\n# Load GeoJSON data\nmap.load_draw_data(geojson_data: Union[Dict, str])\n\n# Get drawn data\nmap.get_draw_data() -&gt; Dict\n\n# Clear all features\nmap.clear_draw_data()\n\n# Delete specific features\nmap.delete_draw_features(feature_ids: List[str])\n\n# Set drawing mode\nmap.set_draw_mode(mode: str)\n</pre>"},{"location":"examples/draw_control_example/#drawing-modes","title":"\ud83c\udfa8 Drawing Modes:\u00b6","text":"<ul> <li>simple_select: Select and move features</li> <li>direct_select: Edit feature vertices</li> <li>draw_point: Draw points</li> <li>draw_line_string: Draw lines</li> <li>draw_polygon: Draw polygons</li> <li>static: Disable all interactions</li> </ul>"},{"location":"examples/draw_control_example/#use-cases","title":"\ud83c\udfaf Use Cases:\u00b6","text":"<ul> <li>Annotation: Mark important locations or areas</li> <li>Planning: Draw routes, boundaries, or zones</li> <li>Data Collection: Gather spatial information interactively</li> <li>Editing: Modify existing spatial data</li> <li>Measurement: Create geometries for area/distance calculations</li> </ul> <p>The draw control integration provides a powerful way to create interactive mapping applications with drawing and editing capabilities!</p>"},{"location":"examples/geocoder_example/","title":"Geocoder example","text":"In\u00a0[1]: Copied! <pre>from anymap import MapLibreMap\n</pre> from anymap import MapLibreMap In\u00a0[2]: Copied! <pre># Create a MapLibre map\nm = MapLibreMap(\n    center=[-87.61694, 41.86625], zoom=10, style=\"positron\", height=\"600px\"  # Chicago\n)\n\n# Add a collapsed geocoder control (default behavior)\nm.add_geocoder_control(position=\"top-left\", collapsed=True)\n\nm\n</pre> # Create a MapLibre map m = MapLibreMap(     center=[-87.61694, 41.86625], zoom=10, style=\"positron\", height=\"600px\"  # Chicago )  # Add a collapsed geocoder control (default behavior) m.add_geocoder_control(position=\"top-left\", collapsed=True)  m Out[2]: In\u00a0[3]: Copied! <pre># Create a map with expanded geocoder\nm_expanded = MapLibreMap(\n    center=[2.3522, 48.8566], zoom=11, style=\"positron\", height=\"600px\"  # Paris\n)\n\n# Add an expanded geocoder control\nm_expanded.add_geocoder_control(position=\"top-left\", collapsed=False)\n\nm_expanded\n</pre> # Create a map with expanded geocoder m_expanded = MapLibreMap(     center=[2.3522, 48.8566], zoom=11, style=\"positron\", height=\"600px\"  # Paris )  # Add an expanded geocoder control m_expanded.add_geocoder_control(position=\"top-left\", collapsed=False)  m_expanded Out[3]: In\u00a0[4]: Copied! <pre># Create a map with custom geocoder settings\nm2 = MapLibreMap(center=[0, 0], zoom=2, style=\"dark-matter\", height=\"600px\")\n\n# Add geocoder with custom API configuration\ncustom_api_config = {\n    \"forwardGeocode\": True,\n    \"reverseGeocode\": False,\n    \"placeholder\": \"Search for cities, countries...\",\n    \"limit\": 10,\n    \"api_url\": \"https://nominatim.openstreetmap.org/search\",\n}\n\nm2.add_geocoder_control(position=\"top-right\", api_config=custom_api_config)\n\nm2\n</pre> # Create a map with custom geocoder settings m2 = MapLibreMap(center=[0, 0], zoom=2, style=\"dark-matter\", height=\"600px\")  # Add geocoder with custom API configuration custom_api_config = {     \"forwardGeocode\": True,     \"reverseGeocode\": False,     \"placeholder\": \"Search for cities, countries...\",     \"limit\": 10,     \"api_url\": \"https://nominatim.openstreetmap.org/search\", }  m2.add_geocoder_control(position=\"top-right\", api_config=custom_api_config)  m2 Out[4]: In\u00a0[5]: Copied! <pre># Export the map with geocoder to HTML\nm.to_html(\"geocoder_map.html\")\nprint(\"Map with geocoder control exported to geocoder_map.html\")\n</pre> # Export the map with geocoder to HTML m.to_html(\"geocoder_map.html\") print(\"Map with geocoder control exported to geocoder_map.html\") <pre>Map with geocoder control exported to geocoder_map.html\n</pre> In\u00a0[6]: Copied! <pre># Create a comprehensive map with multiple controls\nm3 = MapLibreMap(\n    center=[-74.0059, 40.7128],  # New York City\n    zoom=12,\n    style=\"liberty\",\n    height=\"600px\",\n)\n\n# Add various controls\nm3.add_geocoder_control(position=\"top-left\")\nm3.add_control(\"navigation\", \"top-right\")\nm3.add_control(\"fullscreen\", \"top-right\")\nm3.add_control(\"scale\", \"bottom-left\")\nm3.add_layer_control(position=\"top-right\")\n\n# Add a basemap for more visual context\nm3.add_basemap(\"OpenStreetMap.Mapnik\")\n\nm3\n</pre> # Create a comprehensive map with multiple controls m3 = MapLibreMap(     center=[-74.0059, 40.7128],  # New York City     zoom=12,     style=\"liberty\",     height=\"600px\", )  # Add various controls m3.add_geocoder_control(position=\"top-left\") m3.add_control(\"navigation\", \"top-right\") m3.add_control(\"fullscreen\", \"top-right\") m3.add_control(\"scale\", \"bottom-left\") m3.add_layer_control(position=\"top-right\")  # Add a basemap for more visual context m3.add_basemap(\"OpenStreetMap.Mapnik\")  m3 Out[6]:"},{"location":"examples/geocoder_example/#maplibre-geocoder-control-example","title":"MapLibre Geocoder Control Example\u00b6","text":"<p>This notebook demonstrates how to use the geocoder control with MapLibre GL JS maps in AnyMap.</p>"},{"location":"examples/geocoder_example/#basic-geocoder-control-collapsed-mode","title":"Basic Geocoder Control (Collapsed Mode)\u00b6","text":"<p>Create a map with a collapsed geocoder control that shows only a search icon initially. Click the icon to expand the search input:</p>"},{"location":"examples/geocoder_example/#custom-geocoder-configuration","title":"Custom Geocoder Configuration\u00b6","text":"<p>You can customize the geocoder with different settings:</p>"},{"location":"examples/geocoder_example/#expanded-geocoder-control","title":"Expanded Geocoder Control\u00b6","text":"<p>You can also create a geocoder that shows the input box immediately without requiring a click:</p>"},{"location":"examples/geocoder_example/#export-to-html","title":"Export to HTML\u00b6","text":"<p>The geocoder control is also preserved when exporting to HTML:</p>"},{"location":"examples/geocoder_example/#combining-with-other-controls","title":"Combining with Other Controls\u00b6","text":"<p>The geocoder control works well with other map controls:</p>"},{"location":"examples/keplergl_example/","title":"Keplergl example","text":"# Real KeplerGL Interactive Map Test  Testing the updated KeplerGL widget that displays an actual interactive map. In\u00a0[1]: Copied! <pre>import anymap\n\n# Create KeplerGL map with data\nkepler = anymap.KeplerGLMap(center=[37.7749, -122.4194], zoom=10, height=\"600px\")\n\n# Add sample data\nsample_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco\", \"population\": 874961},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.0832, 37.4221]},\n            \"properties\": {\"name\": \"Palo Alto\", \"population\": 66666},\n        },\n    ],\n}\n\nkepler.add_geojson(sample_data, \"cities\")\n\n# Display the interactive map\nkepler\n</pre> import anymap  # Create KeplerGL map with data kepler = anymap.KeplerGLMap(center=[37.7749, -122.4194], zoom=10, height=\"600px\")  # Add sample data sample_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco\", \"population\": 874961},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.0832, 37.4221]},             \"properties\": {\"name\": \"Palo Alto\", \"population\": 66666},         },     ], }  kepler.add_geojson(sample_data, \"cities\")  # Display the interactive map kepler Out[1]:"},{"location":"examples/layer_control_example/","title":"Layer control example","text":"In\u00a0[1]: Copied! <pre>from anymap.maplibre import MapLibreMap\n</pre> from anymap.maplibre import MapLibreMap In\u00a0[2]: Copied! <pre># Create map with default style\nm = MapLibreMap(center=[-122.4307025, 37.780538], zoom=12, style=\"dark-matter\")\n\n# Add layer control - should show immediately with Background\nm.add_layer_control(position=\"top-right\", collapsed=True)\n\nm\n</pre> # Create map with default style m = MapLibreMap(center=[-122.4307025, 37.780538], zoom=12, style=\"dark-matter\")  # Add layer control - should show immediately with Background m.add_layer_control(position=\"top-right\", collapsed=True)  m Out[2]: In\u00a0[3]: Copied! <pre># Add a test point layer - should appear in layer control automatically\npoint_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4294, 37.7849]},\n            \"properties\": {\"name\": \"Point 2\"},\n        },\n    ],\n}\n\nlayer_config = {\n    \"id\": \"test-points\",\n    \"type\": \"circle\",\n    \"source\": {\"type\": \"geojson\", \"data\": point_data},\n    \"paint\": {\n        \"circle-radius\": 8,\n        \"circle-color\": \"#FF0000\",\n        \"circle-stroke-color\": \"#FFFFFF\",\n        \"circle-stroke-width\": 2,\n    },\n}\n\nm.add_layer(\"test-points\", layer_config)\n\nprint(\n    \"Added test-points layer. Check the layer control - it should now show both 'Background' and 'test-points'.\"\n)\n</pre> # Add a test point layer - should appear in layer control automatically point_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4294, 37.7849]},             \"properties\": {\"name\": \"Point 2\"},         },     ], }  layer_config = {     \"id\": \"test-points\",     \"type\": \"circle\",     \"source\": {\"type\": \"geojson\", \"data\": point_data},     \"paint\": {         \"circle-radius\": 8,         \"circle-color\": \"#FF0000\",         \"circle-stroke-color\": \"#FFFFFF\",         \"circle-stroke-width\": 2,     }, }  m.add_layer(\"test-points\", layer_config)  print(     \"Added test-points layer. Check the layer control - it should now show both 'Background' and 'test-points'.\" ) <pre>Added test-points layer. Check the layer control - it should now show both 'Background' and 'test-points'.\n</pre> In\u00a0[4]: Copied! <pre># Add a polygon layer\npolygon_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [-122.43, 37.77],\n                        [-122.43, 37.78],\n                        [-122.42, 37.78],\n                        [-122.42, 37.77],\n                        [-122.43, 37.77],\n                    ]\n                ],\n            },\n            \"properties\": {\"name\": \"Test Area\"},\n        }\n    ],\n}\n\npolygon_layer_config = {\n    \"id\": \"test-polygon\",\n    \"type\": \"fill\",\n    \"source\": {\"type\": \"geojson\", \"data\": polygon_data},\n    \"paint\": {\"fill-color\": \"#00FF00\", \"fill-opacity\": 0.5},\n}\n\nm.add_layer(\"test-polygon\", polygon_layer_config)\n\n# Add a line layer\nline_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [[-122.45, 37.77], [-122.44, 37.78], [-122.43, 37.79]],\n            },\n            \"properties\": {\"name\": \"Test Route\"},\n        }\n    ],\n}\n\nline_layer_config = {\n    \"id\": \"test-line\",\n    \"type\": \"line\",\n    \"source\": {\"type\": \"geojson\", \"data\": line_data},\n    \"paint\": {\"line-color\": \"#0000FF\", \"line-width\": 3},\n}\n\nm.add_layer(\"test-line\", line_layer_config)\n\nprint(\n    \"Added test-polygon and test-line layers. Layer control should now show all 4 items:\"\n)\nprint(\"- Background\")\nprint(\"- test-points\")\nprint(\"- test-polygon\")\nprint(\"- test-line\")\n</pre> # Add a polygon layer polygon_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Polygon\",                 \"coordinates\": [                     [                         [-122.43, 37.77],                         [-122.43, 37.78],                         [-122.42, 37.78],                         [-122.42, 37.77],                         [-122.43, 37.77],                     ]                 ],             },             \"properties\": {\"name\": \"Test Area\"},         }     ], }  polygon_layer_config = {     \"id\": \"test-polygon\",     \"type\": \"fill\",     \"source\": {\"type\": \"geojson\", \"data\": polygon_data},     \"paint\": {\"fill-color\": \"#00FF00\", \"fill-opacity\": 0.5}, }  m.add_layer(\"test-polygon\", polygon_layer_config)  # Add a line layer line_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"LineString\",                 \"coordinates\": [[-122.45, 37.77], [-122.44, 37.78], [-122.43, 37.79]],             },             \"properties\": {\"name\": \"Test Route\"},         }     ], }  line_layer_config = {     \"id\": \"test-line\",     \"type\": \"line\",     \"source\": {\"type\": \"geojson\", \"data\": line_data},     \"paint\": {\"line-color\": \"#0000FF\", \"line-width\": 3}, }  m.add_layer(\"test-line\", line_layer_config)  print(     \"Added test-polygon and test-line layers. Layer control should now show all 4 items:\" ) print(\"- Background\") print(\"- test-points\") print(\"- test-polygon\") print(\"- test-line\") <pre>Added test-polygon and test-line layers. Layer control should now show all 4 items:\n- Background\n- test-points\n- test-polygon\n- test-line\n</pre> In\u00a0[5]: Copied! <pre>html = m.to_html(\"layer_control.html\", title=\"MapLibre Layer Control\", height=\"800px\")\n</pre> html = m.to_html(\"layer_control.html\", title=\"MapLibre Layer Control\", height=\"800px\") In\u00a0[6]: Copied! <pre># Test visibility changes - the checkboxes should update automatically\nprint(\"Testing visibility changes...\")\nm.set_visibility(\"test-points\", False)\nprint(\"- Set test-points visibility to False (checkbox should be unchecked)\")\n\nm.set_visibility(\"test-polygon\", False)\nprint(\"- Set test-polygon visibility to False (checkbox should be unchecked)\")\n\n# Test opacity changes - the sliders should update automatically\nprint(\"\\nTesting opacity changes...\")\nm.set_opacity(\"test-line\", 0.3)\nprint(\"- Set test-line opacity to 0.3 (slider should move to 30%)\")\n\nm.set_opacity(\"test-polygon\", 0.8)\nprint(\"- Set test-polygon opacity to 0.8 (slider should move to 80%)\")\n\nprint(\"\\nCheck the layer control - all changes should be reflected in the UI!\")\n</pre> # Test visibility changes - the checkboxes should update automatically print(\"Testing visibility changes...\") m.set_visibility(\"test-points\", False) print(\"- Set test-points visibility to False (checkbox should be unchecked)\")  m.set_visibility(\"test-polygon\", False) print(\"- Set test-polygon visibility to False (checkbox should be unchecked)\")  # Test opacity changes - the sliders should update automatically print(\"\\nTesting opacity changes...\") m.set_opacity(\"test-line\", 0.3) print(\"- Set test-line opacity to 0.3 (slider should move to 30%)\")  m.set_opacity(\"test-polygon\", 0.8) print(\"- Set test-polygon opacity to 0.8 (slider should move to 80%)\")  print(\"\\nCheck the layer control - all changes should be reflected in the UI!\") <pre>Testing visibility changes...\n- Set test-points visibility to False (checkbox should be unchecked)\n- Set test-polygon visibility to False (checkbox should be unchecked)\n\nTesting opacity changes...\n- Set test-line opacity to 0.3 (slider should move to 30%)\n- Set test-polygon opacity to 0.8 (slider should move to 80%)\n\nCheck the layer control - all changes should be reflected in the UI!\n</pre> In\u00a0[7]: Copied! <pre># Restore visibility\nm.set_visibility(\"test-points\", True)\nm.set_visibility(\"test-polygon\", True)\nm.set_opacity(\"test-line\", 1.0)\nm.set_opacity(\"test-polygon\", 0.5)\n\nprint(\"Restored all layer visibility and opacity.\")\nprint(\"\\nTry using the layer control UI:\")\nprint(\"- Toggle the 'Background' checkbox to hide/show all background layers\")\nprint(\"- Adjust the 'Background' opacity slider to change map transparency\")\nprint(\"- Toggle individual layer checkboxes to show/hide specific layers\")\nprint(\"- Adjust individual layer opacity sliders for fine control\")\nprint(\"\\nAll changes should work in both directions (UI \u2192 Python and Python \u2192 UI)!\")\n</pre> # Restore visibility m.set_visibility(\"test-points\", True) m.set_visibility(\"test-polygon\", True) m.set_opacity(\"test-line\", 1.0) m.set_opacity(\"test-polygon\", 0.5)  print(\"Restored all layer visibility and opacity.\") print(\"\\nTry using the layer control UI:\") print(\"- Toggle the 'Background' checkbox to hide/show all background layers\") print(\"- Adjust the 'Background' opacity slider to change map transparency\") print(\"- Toggle individual layer checkboxes to show/hide specific layers\") print(\"- Adjust individual layer opacity sliders for fine control\") print(\"\\nAll changes should work in both directions (UI \u2192 Python and Python \u2192 UI)!\") <pre>Restored all layer visibility and opacity.\n\nTry using the layer control UI:\n- Toggle the 'Background' checkbox to hide/show all background layers\n- Adjust the 'Background' opacity slider to change map transparency\n- Toggle individual layer checkboxes to show/hide specific layers\n- Adjust individual layer opacity sliders for fine control\n\nAll changes should work in both directions (UI \u2192 Python and Python \u2192 UI)!\n</pre> In\u00a0[8]: Copied! <pre># Add a second layer control with only specific layers\nm.add_layer_control(\n    position=\"top-left\",\n    collapsed=True,\n    layers=[\"test-points\", \"test-line\"],  # Only show these layers\n)\n\nprint(\"Added second layer control on top-left with filtered layers.\")\nprint(\"The left control should only show test-points and test-line.\")\nprint(\"The right control should show all layers including Background.\")\n</pre> # Add a second layer control with only specific layers m.add_layer_control(     position=\"top-left\",     collapsed=True,     layers=[\"test-points\", \"test-line\"],  # Only show these layers )  print(\"Added second layer control on top-left with filtered layers.\") print(\"The left control should only show test-points and test-line.\") print(\"The right control should show all layers including Background.\") <pre>Added second layer control on top-left with filtered layers.\nThe left control should only show test-points and test-line.\nThe right control should show all layers including Background.\n</pre> In\u00a0[9]: Copied! <pre># Export to HTML with improved styling that matches the notebook appearance\nhtml = m.to_html(\"layer_control.html\", title=\"Layer Control Test\")\n\nprint(\"\u2713 Map exported to HTML with enhanced layer control styling!\")\nprint(\"\\\\nThe exported HTML now features:\")\nprint(\"- Professional SVG layers icon (3 stacked rectangles)\")\nprint(\"- Gray gradient opacity sliders matching notebook appearance\")\nprint(\"- Consistent typography and spacing\")\nprint(\"- Proper hover effects and visual feedback\")\nprint(\"- Clean scrollbar styling\")\nprint(\"- All interactive functionality preserved\")\nprint(\"\\\\nThe layer control appearance now matches the Jupyter notebook exactly!\")\nprint(\"\\\\nOpen layer_control.html in a browser to see the improved styling!\")\n</pre> # Export to HTML with improved styling that matches the notebook appearance html = m.to_html(\"layer_control.html\", title=\"Layer Control Test\")  print(\"\u2713 Map exported to HTML with enhanced layer control styling!\") print(\"\\\\nThe exported HTML now features:\") print(\"- Professional SVG layers icon (3 stacked rectangles)\") print(\"- Gray gradient opacity sliders matching notebook appearance\") print(\"- Consistent typography and spacing\") print(\"- Proper hover effects and visual feedback\") print(\"- Clean scrollbar styling\") print(\"- All interactive functionality preserved\") print(\"\\\\nThe layer control appearance now matches the Jupyter notebook exactly!\") print(\"\\\\nOpen layer_control.html in a browser to see the improved styling!\") <pre>\u2713 Map exported to HTML with enhanced layer control styling!\n\\nThe exported HTML now features:\n- Professional SVG layers icon (3 stacked rectangles)\n- Gray gradient opacity sliders matching notebook appearance\n- Consistent typography and spacing\n- Proper hover effects and visual feedback\n- Clean scrollbar styling\n- All interactive functionality preserved\n\\nThe layer control appearance now matches the Jupyter notebook exactly!\n\\nOpen layer_control.html in a browser to see the improved styling!\n</pre>"},{"location":"examples/layer_control_example/#maplibrelayer-control","title":"MapLibreLayer Control\u00b6","text":"<p>This notebook demonstrates the fixed layer control implementation that:</p> <ul> <li>Shows immediately after map initialization</li> <li>Groups background layers as \"Background Map\"</li> <li>Dynamically updates when new layers are added</li> <li>Properly syncs with programmatic changes</li> </ul>"},{"location":"examples/layer_control_example/#1-create-map-with-immediate-layer-control","title":"1. Create Map with Immediate Layer Control\u00b6","text":"<p>The layer control now shows up immediately after map initialization, displaying the \"Background Map\" control even when no user layers are present.</p>"},{"location":"examples/layer_control_example/#2-dynamic-layer-addition","title":"2. Dynamic Layer Addition\u00b6","text":"<p>New layers are now automatically detected and added to the layer control panel.</p>"},{"location":"examples/layer_control_example/#3-add-multiple-layers","title":"3. Add Multiple Layers\u00b6","text":"<p>All new layers are automatically added to the control panel.</p>"},{"location":"examples/layer_control_example/#4-test-programmatic-changes","title":"4. Test Programmatic Changes\u00b6","text":"<p>The layer control now properly syncs with programmatic visibility and opacity changes.</p>"},{"location":"examples/layer_control_example/#5-restore-visibility-and-test-background-control","title":"5. Restore Visibility and Test Background Control\u00b6","text":"<p>Test that the background control properly affects all map style layers.</p>"},{"location":"examples/layer_control_example/#6-test-multiple-layer-controls","title":"6. Test Multiple Layer Controls\u00b6","text":"<p>You can add multiple layer controls in different positions with different layer filters.</p>"},{"location":"examples/layer_control_example/#summary","title":"Summary\u00b6","text":"<p>The layer control implementation now provides:</p>"},{"location":"examples/layer_control_example/#features","title":"Features:\u00b6","text":"<ul> <li>Collapsible Panel: Click the icon to expand/collapse the layer list</li> <li>Visibility Control: Checkboxes to toggle layer visibility</li> <li>Opacity Control: Sliders to adjust layer transparency</li> <li>Layer Filtering: Optional parameter to show only specific layers</li> <li>Multiple Controls: Add controls in different positions with different layer sets</li> <li>Bidirectional Sync: Changes work both ways (UI \u2194 Python)</li> </ul>"},{"location":"examples/layer_control_example/#background-layer-handling","title":"Background Layer Handling:\u00b6","text":"<ul> <li>All map style layers (landcover, parks, roads, etc.) are grouped under \"Background Map\"</li> <li>User-added layers appear as individual controls</li> <li>Background control affects all style layers simultaneously</li> <li>Individual layer controls only affect their specific layer</li> </ul>"},{"location":"examples/leaflet_example/","title":"Leaflet example","text":"In\u00a0[1]: Copied! <pre>import anymap\nimport json\n</pre> import anymap import json In\u00a0[2]: Copied! <pre># Create a basic Leaflet map\nleaflet_map = anymap.LeafletMap(\n    center=[51.505, -0.09], zoom=13, width=\"100%\", height=\"600px\"  # London coordinates\n)\n\nleaflet_map\n</pre> # Create a basic Leaflet map leaflet_map = anymap.LeafletMap(     center=[51.505, -0.09], zoom=13, width=\"100%\", height=\"600px\"  # London coordinates )  leaflet_map Out[2]: In\u00a0[3]: Copied! <pre># Create a Leaflet map with advanced options\nmap_with_options = anymap.LeafletMap(\n    height=\"400px\",\n    map_options={\n        \"zoomControl\": False,\n        \"attributionControl\": False,\n        \"scrollWheelZoom\": False,\n        \"dragging\": False,\n        \"doubleClickZoom\": False,\n        \"boxZoom\": False,\n    },\n)\n\nmap_with_options\n</pre> # Create a Leaflet map with advanced options map_with_options = anymap.LeafletMap(     height=\"400px\",     map_options={         \"zoomControl\": False,         \"attributionControl\": False,         \"scrollWheelZoom\": False,         \"dragging\": False,         \"doubleClickZoom\": False,         \"boxZoom\": False,     }, )  map_with_options Out[3]: In\u00a0[4]: Copied! <pre># OpenStreetMap (default)\nosm_map = anymap.LeafletMap(\n    center=[40.7128, -74.0060], zoom=10, tile_layer=\"OpenStreetMap\"  # New York\n)\n\nosm_map\n</pre> # OpenStreetMap (default) osm_map = anymap.LeafletMap(     center=[40.7128, -74.0060], zoom=10, tile_layer=\"OpenStreetMap\"  # New York )  osm_map Out[4]: In\u00a0[5]: Copied! <pre># CartoDB Positron (light theme)\npositron_map = anymap.LeafletMap(\n    center=[40.7128, -74.0060], zoom=10, tile_layer=\"CartoDB.Positron\"\n)\n\npositron_map\n</pre> # CartoDB Positron (light theme) positron_map = anymap.LeafletMap(     center=[40.7128, -74.0060], zoom=10, tile_layer=\"CartoDB.Positron\" )  positron_map Out[5]: In\u00a0[6]: Copied! <pre># CartoDB Dark Matter (dark theme)\ndark_map = anymap.LeafletMap(\n    center=[40.7128, -74.0060], zoom=10, tile_layer=\"CartoDB.DarkMatter\"\n)\n\ndark_map\n</pre> # CartoDB Dark Matter (dark theme) dark_map = anymap.LeafletMap(     center=[40.7128, -74.0060], zoom=10, tile_layer=\"CartoDB.DarkMatter\" )  dark_map Out[6]: In\u00a0[7]: Copied! <pre># Create a map with markers\nmarker_map = anymap.LeafletMap(center=[51.5074, -0.1278], zoom=12)  # London\n\n# Add markers for famous London landmarks\nmarker_map.add_marker(\n    [51.5074, -0.1278],\n    popup=\"&lt;b&gt;London&lt;/b&gt;&lt;br&gt;Capital of the United Kingdom\",\n    tooltip=\"London City Center\",\n)\n\nmarker_map.add_marker(\n    [51.5007, -0.1246],\n    popup=\"&lt;b&gt;Big Ben&lt;/b&gt;&lt;br&gt;Famous clock tower\",\n    tooltip=\"Big Ben's permanent tooltip\",\n    # https://leafletjs.com/reference.html#tooltip-option\n    tooltip_options=dict(permanent=True, direction=\"right\", opacity=0.7),\n)\n\nmarker_map.add_marker(\n    [51.5033, -0.1195],\n    popup=\"&lt;b&gt;London Eye&lt;/b&gt;&lt;br&gt;Giant Ferris wheel\",\n    tooltip=\"London Eye\",\n)\n\nmarker_map\n</pre> # Create a map with markers marker_map = anymap.LeafletMap(center=[51.5074, -0.1278], zoom=12)  # London  # Add markers for famous London landmarks marker_map.add_marker(     [51.5074, -0.1278],     popup=\"LondonCapital of the United Kingdom\",     tooltip=\"London City Center\", )  marker_map.add_marker(     [51.5007, -0.1246],     popup=\"Big BenFamous clock tower\",     tooltip=\"Big Ben's permanent tooltip\",     # https://leafletjs.com/reference.html#tooltip-option     tooltip_options=dict(permanent=True, direction=\"right\", opacity=0.7), )  marker_map.add_marker(     [51.5033, -0.1195],     popup=\"London EyeGiant Ferris wheel\",     tooltip=\"London Eye\", )  marker_map Out[7]: In\u00a0[8]: Copied! <pre># Create a map with shapes\nshapes_map = anymap.LeafletMap(center=[40.7128, -74.0060], zoom=11)  # New York\n\n# Add a circle around Central Park\nshapes_map.add_circle(\n    [40.7829, -73.9654],  # Central Park\n    radius=1000,  # 1km radius\n    color=\"green\",\n    fillColor=\"lightgreen\",\n    fillOpacity=0.3,\n    tooltip=\"Central Park\ud83c\udf33&lt;br /&gt;Permanent tooltip\",\n    tooltip_options=dict(permanent=True, direction=\"top\"),\n)\n\n# Add a polygon for Manhattan (simplified)\nmanhattan_coords = [\n    [40.7831, -73.9712],\n    [40.7489, -73.9441],\n    [40.7061, -73.9969],\n    [40.7194, -74.0113],\n    [40.7831, -73.9712],\n]\n\nshapes_map.add_polygon(\n    manhattan_coords,\n    color=\"blue\",\n    fillColor=\"lightblue\",\n    fillOpacity=0.2,\n    tooltip=\"Sticky tooltip (stays with mouse)\",\n    tooltip_options=dict(sticky=True),\n)\n\n# Add a polyline for Broadway\nbroadway_coords = [\n    [40.7614, -73.9776],\n    [40.7589, -73.9851],\n    [40.7565, -73.9926],\n    [40.7505, -74.0014],\n]\n\nshapes_map.add_polyline(broadway_coords, color=\"red\", weight=5)\n\nshapes_map\n</pre> # Create a map with shapes shapes_map = anymap.LeafletMap(center=[40.7128, -74.0060], zoom=11)  # New York  # Add a circle around Central Park shapes_map.add_circle(     [40.7829, -73.9654],  # Central Park     radius=1000,  # 1km radius     color=\"green\",     fillColor=\"lightgreen\",     fillOpacity=0.3,     tooltip=\"Central Park\ud83c\udf33Permanent tooltip\",     tooltip_options=dict(permanent=True, direction=\"top\"), )  # Add a polygon for Manhattan (simplified) manhattan_coords = [     [40.7831, -73.9712],     [40.7489, -73.9441],     [40.7061, -73.9969],     [40.7194, -74.0113],     [40.7831, -73.9712], ]  shapes_map.add_polygon(     manhattan_coords,     color=\"blue\",     fillColor=\"lightblue\",     fillOpacity=0.2,     tooltip=\"Sticky tooltip (stays with mouse)\",     tooltip_options=dict(sticky=True), )  # Add a polyline for Broadway broadway_coords = [     [40.7614, -73.9776],     [40.7589, -73.9851],     [40.7565, -73.9926],     [40.7505, -74.0014], ]  shapes_map.add_polyline(broadway_coords, color=\"red\", weight=5)  shapes_map Out[8]: In\u00a0[9]: Copied! <pre># Sample GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"New York City\", \"population\": 8175133},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-87.6298, 41.8781]},\n            \"properties\": {\"name\": \"Chicago\", \"population\": 2693976},\n        },\n    ],\n}\n\n# Create map with GeoJSON data\ngeojson_map = anymap.LeafletMap(center=[40.0, -80.0], zoom=5)\n\ngeojson_map.add_geojson(\n    geojson_data, style={\"color\": \"purple\", \"weight\": 2, \"fillOpacity\": 0.7}\n)\n\ngeojson_map\n</pre> # Sample GeoJSON data geojson_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"New York City\", \"population\": 8175133},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-87.6298, 41.8781]},             \"properties\": {\"name\": \"Chicago\", \"population\": 2693976},         },     ], }  # Create map with GeoJSON data geojson_map = anymap.LeafletMap(center=[40.0, -80.0], zoom=5)  geojson_map.add_geojson(     geojson_data, style={\"color\": \"purple\", \"weight\": 2, \"fillOpacity\": 0.7} )  geojson_map Out[9]: In\u00a0[10]: Copied! <pre># Create a map for demonstrations\ncontrol_map = anymap.LeafletMap(center=[37.7749, -122.4194], zoom=10)  # San Francisco\n\ncontrol_map\n</pre> # Create a map for demonstrations control_map = anymap.LeafletMap(center=[37.7749, -122.4194], zoom=10)  # San Francisco  control_map Out[10]: In\u00a0[11]: Copied! <pre># Fly to a different location\ncontrol_map.fly_to(34.0522, -118.2437, 12)  # Los Angeles\n</pre> # Fly to a different location control_map.fly_to(34.0522, -118.2437, 12)  # Los Angeles In\u00a0[12]: Copied! <pre># Set center and zoom\ncontrol_map.set_center(25.7617, -80.1918)  # Miami\ncontrol_map.set_zoom(11)\n</pre> # Set center and zoom control_map.set_center(25.7617, -80.1918)  # Miami control_map.set_zoom(11) In\u00a0[13]: Copied! <pre># Fit bounds to a specific area\n# Southwest and Northeast corners of the bounding box\ncontrol_map.fit_bounds([[25.7617, -80.1918], [25.7907, -80.1310]])\n</pre> # Fit bounds to a specific area # Southwest and Northeast corners of the bounding box control_map.fit_bounds([[25.7617, -80.1918], [25.7907, -80.1310]]) In\u00a0[14]: Copied! <pre># Create a map with multiple tile layers\nmulti_layer_map = anymap.LeafletMap(center=[48.8566, 2.3522], zoom=12)  # Paris\n\n# Add a custom tile layer\nmulti_layer_map.add_tile_layer(\n    \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\",\n    attribution=\"Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\",\n    layer_id=\"watercolor\",\n)\n\nmulti_layer_map\n</pre> # Create a map with multiple tile layers multi_layer_map = anymap.LeafletMap(center=[48.8566, 2.3522], zoom=12)  # Paris  # Add a custom tile layer multi_layer_map.add_tile_layer(     \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\",     attribution=\"Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\",     layer_id=\"watercolor\", )  multi_layer_map Out[14]: In\u00a0[15]: Copied! <pre># Create a map for export\nexport_map = anymap.LeafletMap(\n    center=[35.6762, 139.6503], zoom=10, tile_layer=\"CartoDB.Positron\"  # Tokyo\n)\n\n# Add some markers\nexport_map.add_marker(\n    [35.6762, 139.6503], popup=\"&lt;b&gt;Tokyo&lt;/b&gt;&lt;br&gt;Capital of Japan\", tooltip=\"Tokyo\"\n)\n\nexport_map.add_circle(\n    [35.6762, 139.6503], radius=5000, color=\"red\", fillColor=\"pink\", fillOpacity=0.3\n)\n\n# Export to HTML\nhtml_content = export_map.to_html(\n    title=\"Tokyo Map - Leaflet Example\", width=\"100%\", height=\"600px\"\n)\n\n# Save to file\nwith open(\"tokyo_map.html\", \"w\") as f:\n    f.write(html_content)\n\nprint(\"Map exported to tokyo_map.html\")\nexport_map\n</pre> # Create a map for export export_map = anymap.LeafletMap(     center=[35.6762, 139.6503], zoom=10, tile_layer=\"CartoDB.Positron\"  # Tokyo )  # Add some markers export_map.add_marker(     [35.6762, 139.6503], popup=\"TokyoCapital of Japan\", tooltip=\"Tokyo\" )  export_map.add_circle(     [35.6762, 139.6503], radius=5000, color=\"red\", fillColor=\"pink\", fillOpacity=0.3 )  # Export to HTML html_content = export_map.to_html(     title=\"Tokyo Map - Leaflet Example\", width=\"100%\", height=\"600px\" )  # Save to file with open(\"tokyo_map.html\", \"w\") as f:     f.write(html_content)  print(\"Map exported to tokyo_map.html\") export_map <pre>Map exported to tokyo_map.html\n</pre> Out[15]: In\u00a0[16]: Copied! <pre># Create a map for layer management\nlayer_map = anymap.LeafletMap(center=[52.5200, 13.4050], zoom=11)  # Berlin\n\n# Add several layers\nmarker_id = layer_map.add_marker(\n    [52.5200, 13.4050], popup=\"Berlin\", tooltip=\"German Capital\"\n)\n\ncircle_id = layer_map.add_circle(\n    [52.5200, 13.4050],\n    radius=3000,\n    color=\"blue\",\n    fillColor=\"lightblue\",\n    fillOpacity=0.2,\n)\n\nprint(f\"Added marker with ID: {marker_id}\")\nprint(f\"Added circle with ID: {circle_id}\")\n\nlayer_map\n</pre> # Create a map for layer management layer_map = anymap.LeafletMap(center=[52.5200, 13.4050], zoom=11)  # Berlin  # Add several layers marker_id = layer_map.add_marker(     [52.5200, 13.4050], popup=\"Berlin\", tooltip=\"German Capital\" )  circle_id = layer_map.add_circle(     [52.5200, 13.4050],     radius=3000,     color=\"blue\",     fillColor=\"lightblue\",     fillOpacity=0.2, )  print(f\"Added marker with ID: {marker_id}\") print(f\"Added circle with ID: {circle_id}\")  layer_map <pre>Added marker with ID: marker_0\nAdded circle with ID: circle_1\n</pre> Out[16]: In\u00a0[17]: Copied! <pre># Get current layers\nlayers = layer_map.get_layers()\nprint(\"Current layers:\")\nfor layer_id, layer_config in layers.items():\n    print(f\"  {layer_id}: {layer_config['type']}\")\n</pre> # Get current layers layers = layer_map.get_layers() print(\"Current layers:\") for layer_id, layer_config in layers.items():     print(f\"  {layer_id}: {layer_config['type']}\") <pre>Current layers:\n  marker_0: marker\n  circle_1: circle\n</pre> In\u00a0[18]: Copied! <pre># Remove a layer\nlayer_map.remove_layer(circle_id)\nprint(f\"Removed circle layer: {circle_id}\")\n</pre> # Remove a layer layer_map.remove_layer(circle_id) print(f\"Removed circle layer: {circle_id}\") <pre>Removed circle layer: circle_1\n</pre> In\u00a0[19]: Copied! <pre># Clear all layers\nlayer_map.clear_layers()\nprint(\"All layers cleared\")\n</pre> # Clear all layers layer_map.clear_layers() print(\"All layers cleared\") <pre>All layers cleared\n</pre>"},{"location":"examples/leaflet_example/#leaflet-map-examples","title":"Leaflet Map Examples\u00b6","text":"<p>This notebook demonstrates how to use the LeafletMap widget from the anymap package.</p>"},{"location":"examples/leaflet_example/#installation","title":"Installation\u00b6","text":"<p>First, make sure you have the anymap package installed:</p> <pre>pip install anymap\n</pre>"},{"location":"examples/leaflet_example/#basic-leaflet-map","title":"Basic Leaflet Map\u00b6","text":"<p>Create a basic Leaflet map with default settings:</p>"},{"location":"examples/leaflet_example/#leaflet-map-options","title":"Leaflet Map Options\u00b6","text":"<p>Create a map with different leaflet map options (click here for a full list)</p>"},{"location":"examples/leaflet_example/#different-tile-layers","title":"Different Tile Layers\u00b6","text":"<p>Leaflet supports various tile layer providers:</p>"},{"location":"examples/leaflet_example/#adding-markers","title":"Adding Markers\u00b6","text":"<p>Add markers to your map with popups and tooltips:</p>"},{"location":"examples/leaflet_example/#adding-shapes","title":"Adding Shapes\u00b6","text":"<p>Add various shapes like circles, polygons, and polylines:</p>"},{"location":"examples/leaflet_example/#geojson-data","title":"GeoJSON Data\u00b6","text":"<p>Load and display GeoJSON data:</p>"},{"location":"examples/leaflet_example/#map-controls-and-interactions","title":"Map Controls and Interactions\u00b6","text":"<p>Demonstrate various map control methods:</p>"},{"location":"examples/leaflet_example/#adding-multiple-tile-layers","title":"Adding Multiple Tile Layers\u00b6","text":"<p>You can add multiple tile layers to the same map:</p>"},{"location":"examples/leaflet_example/#exporting-to-html","title":"Exporting to HTML\u00b6","text":"<p>Export your map to a standalone HTML file:</p>"},{"location":"examples/leaflet_example/#layer-management","title":"Layer Management\u00b6","text":"<p>Demonstrate layer management capabilities:</p>"},{"location":"examples/leaflet_example/#conclusion","title":"Conclusion\u00b6","text":"<p>This notebook demonstrated the key features of the LeafletMap widget:</p> <ol> <li>Basic map creation with different tile layers</li> <li>Adding markers with popups and tooltips</li> <li>Drawing shapes (circles, polygons, polylines)</li> <li>Loading GeoJSON data</li> <li>Map controls (fly to, set center/zoom, fit bounds)</li> <li>Layer management (add, remove, clear)</li> <li>HTML export for sharing standalone maps</li> </ol> <p>The LeafletMap widget provides a lightweight, flexible mapping solution that integrates seamlessly with Jupyter notebooks and supports the full Leaflet ecosystem.</p>"},{"location":"examples/map_comparison/","title":"Map comparison","text":"In\u00a0[1]: Copied! <pre>import anymap\n</pre> import anymap In\u00a0[2]: Copied! <pre># Basic MapLibre comparison with different styles\ncompare = anymap.MapCompare(\n    left_map={\n        \"center\": [37.7749, -122.4194],  # San Francisco\n        \"zoom\": 12,\n        \"style\": \"https://demotiles.maplibre.org/style.json\",\n    },\n    right_map={\n        \"center\": [37.7749, -122.4194],\n        \"zoom\": 12,\n        \"style\": \"https://tiles.stadiamaps.com/styles/alidade_smooth.json\",\n    },\n    backend=\"maplibre\",\n    orientation=\"vertical\",\n    mousemove=False,\n    height=\"600px\",\n)\n\ncompare\n</pre> # Basic MapLibre comparison with different styles compare = anymap.MapCompare(     left_map={         \"center\": [37.7749, -122.4194],  # San Francisco         \"zoom\": 12,         \"style\": \"https://demotiles.maplibre.org/style.json\",     },     right_map={         \"center\": [37.7749, -122.4194],         \"zoom\": 12,         \"style\": \"https://tiles.stadiamaps.com/styles/alidade_smooth.json\",     },     backend=\"maplibre\",     orientation=\"vertical\",     mousemove=False,     height=\"600px\", )  compare Out[2]: In\u00a0[3]: Copied! <pre># Move slider to 25% position (more of the left map visible)\ncompare.set_slider_position(0.25)\n</pre> # Move slider to 25% position (more of the left map visible) compare.set_slider_position(0.25) In\u00a0[4]: Copied! <pre># Move slider to 75% position (more of the right map visible)\ncompare.set_slider_position(0.75)\n</pre> # Move slider to 75% position (more of the right map visible) compare.set_slider_position(0.75) In\u00a0[5]: Copied! <pre># Center the slider\"\ncompare.set_slider_position(0.5)\n</pre> # Center the slider\" compare.set_slider_position(0.5) In\u00a0[6]: Copied! <pre># Switch to horizontal orientation (top/bottom comparison)\ncompare.set_orientation(\"horizontal\")\n</pre> # Switch to horizontal orientation (top/bottom comparison) compare.set_orientation(\"horizontal\") In\u00a0[7]: Copied! <pre># Switch back to vertical orientation (left/right comparison)\ncompare.set_orientation(\"vertical\")\n</pre> # Switch back to vertical orientation (left/right comparison) compare.set_orientation(\"vertical\") In\u00a0[8]: Copied! <pre># Disable mouse move (slider must be dragged)\ncompare.enable_mousemove(False)\n</pre> # Disable mouse move (slider must be dragged) compare.enable_mousemove(False) In\u00a0[9]: Copied! <pre># Re-enable mouse move\ncompare.enable_mousemove(True)\n</pre> # Re-enable mouse move compare.enable_mousemove(True) In\u00a0[10]: Copied! <pre># Update the left map to a different style\ncompare.update_left_map({\"style\": \"https://tiles.stadiamaps.com/styles/outdoors.json\"})\n</pre> # Update the left map to a different style compare.update_left_map({\"style\": \"https://tiles.stadiamaps.com/styles/outdoors.json\"}) In\u00a0[11]: Copied! <pre># Update the right map to a satellite style\ncompare.update_right_map(\n    {\"style\": \"https://tiles.stadiamaps.com/styles/alidade_satellite.json\"}\n)\n</pre> # Update the right map to a satellite style compare.update_right_map(     {\"style\": \"https://tiles.stadiamaps.com/styles/alidade_satellite.json\"} ) In\u00a0[12]: Copied! <pre># Fly to New York City\ncompare.fly_to(40.7128, -74.0060, zoom=13)\n</pre> # Fly to New York City compare.fly_to(40.7128, -74.0060, zoom=13) In\u00a0[13]: Copied! <pre># Fly to London\ncompare.fly_to(51.5074, -0.1278, zoom=12)\n</pre> # Fly to London compare.fly_to(51.5074, -0.1278, zoom=12) In\u00a0[14]: Copied! <pre># Disable center synchronization but keep zoom sync\ncompare.set_sync_options(center=False, zoom=True, bearing=True, pitch=True)\n</pre> # Disable center synchronization but keep zoom sync compare.set_sync_options(center=False, zoom=True, bearing=True, pitch=True) In\u00a0[15]: Copied! <pre># Re-enable all synchronization\ncompare.set_sync_options(center=True, zoom=True, bearing=True, pitch=True)\n</pre> # Re-enable all synchronization compare.set_sync_options(center=True, zoom=True, bearing=True, pitch=True) In\u00a0[16]: Copied! <pre># Uncomment and set your Mapbox access token\n# import os\n# os.environ['MAPBOX_ACCESS_TOKEN'] = 'your_mapbox_token_here'\n\n# mapbox_compare = anymap.MapCompare(\n#     left_map={\n#         \"center\": [37.7749, -122.4194],\n#         \"zoom\": 12,\n#         \"style\": \"mapbox://styles/mapbox/streets-v12\"\n#     },\n#     right_map={\n#         \"center\": [37.7749, -122.4194],\n#         \"zoom\": 12,\n#         \"style\": \"mapbox://styles/mapbox/satellite-v9\"\n#     },\n#     backend=\"mapbox\",\n#     orientation=\"vertical\",\n#     mousemove=True,\n#     height=\"500px\"\n# )\n\n# mapbox_compare\n</pre> # Uncomment and set your Mapbox access token # import os # os.environ['MAPBOX_ACCESS_TOKEN'] = 'your_mapbox_token_here'  # mapbox_compare = anymap.MapCompare( #     left_map={ #         \"center\": [37.7749, -122.4194], #         \"zoom\": 12, #         \"style\": \"mapbox://styles/mapbox/streets-v12\" #     }, #     right_map={ #         \"center\": [37.7749, -122.4194], #         \"zoom\": 12, #         \"style\": \"mapbox://styles/mapbox/satellite-v9\" #     }, #     backend=\"mapbox\", #     orientation=\"vertical\", #     mousemove=True, #     height=\"500px\" # )  # mapbox_compare In\u00a0[17]: Copied! <pre># Define an event handler\ndef on_slide_end(event):\n    print(f\"Slider moved to position: {event.get('position', 'unknown')}\")\n\n\n# Register the event handler\ncompare.on_event(\"slideend\", on_slide_end)\n</pre> # Define an event handler def on_slide_end(event):     print(f\"Slider moved to position: {event.get('position', 'unknown')}\")   # Register the event handler compare.on_event(\"slideend\", on_slide_end) In\u00a0[18]: Copied! <pre># Second comparison with different settings\ncompare2 = anymap.MapCompare(\n    left_map={\n        \"center\": [51.5074, -0.1278],  # London\n        \"zoom\": 10,\n        \"style\": \"https://demotiles.maplibre.org/style.json\",\n    },\n    right_map={\n        \"center\": [51.5074, -0.1278],\n        \"zoom\": 10,\n        \"style\": \"https://tiles.stadiamaps.com/styles/alidade_smooth_dark.json\",\n    },\n    backend=\"maplibre\",\n    orientation=\"horizontal\",\n    mousemove=False,\n    height=\"400px\",\n)\n\ncompare2\n</pre> # Second comparison with different settings compare2 = anymap.MapCompare(     left_map={         \"center\": [51.5074, -0.1278],  # London         \"zoom\": 10,         \"style\": \"https://demotiles.maplibre.org/style.json\",     },     right_map={         \"center\": [51.5074, -0.1278],         \"zoom\": 10,         \"style\": \"https://tiles.stadiamaps.com/styles/alidade_smooth_dark.json\",     },     backend=\"maplibre\",     orientation=\"horizontal\",     mousemove=False,     height=\"400px\", )  compare2 Out[18]: In\u00a0[19]: Copied! <pre># You can also get the HTML content without saving to file\nhtml_content = compare.to_html(title=\"My Map Comparison\")\nprint(\"HTML content generated (first 500 characters):\")\nprint(html_content[:500] + \"...\")\n</pre> # You can also get the HTML content without saving to file html_content = compare.to_html(title=\"My Map Comparison\") print(\"HTML content generated (first 500 characters):\") print(html_content[:500] + \"...\") <pre>HTML content generated (first 500 characters):\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Map Comparison&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://unpkg.com/@maplibre/maplibre-gl-compare@0.5.0/dist/maplibre-gl-compare.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"https://unpkg.com/@maplibre/m...\n</pre> In\u00a0[20]: Copied! <pre># Export to HTML file\nhtml_content = compare.to_html(\n    filename=\"map_comparison.html\", title=\"San Francisco Map Style Comparison\"\n)\n\nprint(\"Map comparison exported to map_comparison.html\")\nprint(f\"HTML file size: {len(html_content)} characters\")\n</pre> # Export to HTML file html_content = compare.to_html(     filename=\"map_comparison.html\", title=\"San Francisco Map Style Comparison\" )  print(\"Map comparison exported to map_comparison.html\") print(f\"HTML file size: {len(html_content)} characters\") <pre>Map comparison exported to map_comparison.html\nHTML file size: 11190 characters\n</pre>"},{"location":"examples/map_comparison/#map-comparison-example","title":"Map Comparison Example\u00b6","text":"<p>This notebook demonstrates the map comparison functionality in anymap using the MapCompare widget. You can compare two maps side-by-side with different styles, data layers, or temporal states.</p>"},{"location":"examples/map_comparison/#features","title":"Features\u00b6","text":"<ul> <li>Side-by-side map comparison with swipe control</li> <li>Support for both MapLibre and Mapbox backends</li> <li>Configurable orientation (vertical/horizontal)</li> <li>Map synchronization options</li> <li>Interactive slider control</li> </ul>"},{"location":"examples/map_comparison/#basic-maplibre-comparison","title":"Basic MapLibre Comparison\u00b6","text":"<p>Let's start with a basic comparison of two different MapLibre styles.</p>"},{"location":"examples/map_comparison/#controlling-the-slider-position","title":"Controlling the Slider Position\u00b6","text":"<p>You can programmatically control the slider position.</p>"},{"location":"examples/map_comparison/#changing-orientation","title":"Changing Orientation\u00b6","text":"<p>You can switch between vertical and horizontal orientations.</p>"},{"location":"examples/map_comparison/#enablingdisabling-mouse-move","title":"Enabling/Disabling Mouse Move\u00b6","text":"<p>You can control whether the slider follows mouse movement or requires dragging.</p>"},{"location":"examples/map_comparison/#updating-map-styles","title":"Updating Map Styles\u00b6","text":"<p>You can dynamically update the styles of either map.</p>"},{"location":"examples/map_comparison/#flying-to-different-locations","title":"Flying to Different Locations\u00b6","text":"<p>You can fly both maps to a new location simultaneously.</p>"},{"location":"examples/map_comparison/#synchronization-options","title":"Synchronization Options\u00b6","text":"<p>You can control which aspects of the maps are synchronized.</p>"},{"location":"examples/map_comparison/#mapbox-comparison-requires-access-token","title":"Mapbox Comparison (requires access token)\u00b6","text":"<p>If you have a Mapbox access token, you can use Mapbox styles for comparison.</p>"},{"location":"examples/map_comparison/#event-handling","title":"Event Handling\u00b6","text":"<p>You can listen to events from the comparison widget.</p>"},{"location":"examples/map_comparison/#conclusion","title":"Conclusion\u00b6","text":"<p>The MapCompare widget provides a powerful way to compare different map styles, data layers, or temporal states side-by-side. Key features include:</p> <ol> <li>Interactive Swipe Control: Easily compare maps by dragging the slider or moving the mouse</li> <li>Multiple Backends: Support for both MapLibre and Mapbox</li> <li>Flexible Orientation: Choose between vertical and horizontal comparisons</li> <li>Synchronization Options: Control which map properties are synchronized</li> <li>Dynamic Updates: Change styles and settings programmatically</li> <li>Multiple Widgets: Create multiple comparisons in the same notebook</li> <li>HTML Export: Export comparisons to standalone HTML files</li> </ol> <p>This makes it ideal for:</p> <ul> <li>Comparing different map styles</li> <li>Before/after visualizations</li> <li>Temporal data comparisons</li> <li>A/B testing of map designs</li> <li>Educational demonstrations</li> <li>Sharing interactive comparisons as HTML files</li> </ul>"},{"location":"examples/map_comparison/#html-export","title":"HTML Export\u00b6","text":"<p>You can export any comparison widget to a standalone HTML file.</p>"},{"location":"examples/map_comparison/#conclusion","title":"Conclusion\u00b6","text":"<p>The MapCompare widget provides a powerful way to compare different map styles, data layers, or temporal states side-by-side. Key features include:</p> <ol> <li>Interactive Swipe Control: Easily compare maps by dragging the slider or moving the mouse</li> <li>Multiple Backends: Support for both MapLibre and Mapbox</li> <li>Flexible Orientation: Choose between vertical and horizontal comparisons</li> <li>Synchronization Options: Control which map properties are synchronized</li> <li>Dynamic Updates: Change styles and settings programmatically</li> <li>Multiple Widgets: Create multiple comparisons in the same notebook</li> </ol> <p>This makes it ideal for:</p> <ul> <li>Comparing different map styles</li> <li>Before/after visualizations</li> <li>Temporal data comparisons</li> <li>A/B testing of map designs</li> <li>Educational demonstrations</li> </ul>"},{"location":"examples/mapbox_example/","title":"Mapbox example","text":"In\u00a0[1]: Copied! <pre># Import required modules\nfrom anymap import MapboxMap\nimport json\nimport os\n\n# Note: You need a Mapbox access token to use the Mapbox backend\n# Get a free token at https://account.mapbox.com/access-tokens/\n# Set it as an environment variable: export MAPBOX_TOKEN=\"your_token_here\"\n# Or pass it directly when creating the map: MapboxMap(access_token=\"your_token\")\n\nprint(\"AnyMap with Mapbox backend loaded successfully!\")\n</pre> # Import required modules from anymap import MapboxMap import json import os  # Note: You need a Mapbox access token to use the Mapbox backend # Get a free token at https://account.mapbox.com/access-tokens/ # Set it as an environment variable: export MAPBOX_TOKEN=\"your_token_here\" # Or pass it directly when creating the map: MapboxMap(access_token=\"your_token\")  print(\"AnyMap with Mapbox backend loaded successfully!\") <pre>AnyMap with Mapbox backend loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre># Create a basic Mapbox map\n# NOTE: Replace \"your_token_here\" with your actual Mapbox access token\n# or set the MAPBOX_TOKEN environment variable\n\nm = MapboxMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"600px\",\n    style=\"mapbox://styles/mapbox/streets-v12\",\n    # access_token=\"your_token_here\"  # Replace with your actual token\n)\n\nprint(f\"Access token set: {bool(m.access_token)}\")\nprint(f\"Map style: {m.style}\")\n\nm\n</pre> # Create a basic Mapbox map # NOTE: Replace \"your_token_here\" with your actual Mapbox access token # or set the MAPBOX_TOKEN environment variable  m = MapboxMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"600px\",     style=\"mapbox://styles/mapbox/streets-v12\",     # access_token=\"your_token_here\"  # Replace with your actual token )  print(f\"Access token set: {bool(m.access_token)}\") print(f\"Map style: {m.style}\")  m <pre>Access token set: False\nMap style: mapbox://styles/mapbox/streets-v12\n</pre> <pre>/home/runner/work/anymap/anymap/anymap/mapbox.py:111: UserWarning: No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\n  warnings.warn(\n</pre> Out[2]: In\u00a0[3]: Copied! <pre>m = MapboxMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"600px\",\n    style=\"mapbox://styles/mapbox/streets-v12\",\n    # access_token=\"your_token_here\"  # Replace with your actual token\n)\n\nm.add_basemap(\"Esri.WorldImagery\")\nm\n</pre> m = MapboxMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"600px\",     style=\"mapbox://styles/mapbox/streets-v12\",     # access_token=\"your_token_here\"  # Replace with your actual token )  m.add_basemap(\"Esri.WorldImagery\") m Out[3]: In\u00a0[4]: Copied! <pre># Change to satellite style\nm.set_style(\"mapbox://styles/mapbox/satellite-v9\")\nm\n</pre> # Change to satellite style m.set_style(\"mapbox://styles/mapbox/satellite-v9\") m Out[4]: In\u00a0[5]: Copied! <pre># Create a new map focused on a mountainous area\nm3d = MapboxMap(\n    center=[46.8182, 8.2275],  # Swiss Alps\n    zoom=12,\n    pitch=60,\n    bearing=45,\n    height=\"600px\",\n    style=\"mapbox://styles/mapbox/satellite-v9\",\n)\n\n# Add 3D terrain\nterrain_config = {\"source\": \"mapbox-dem\", \"exaggeration\": 1.5}\nm3d.set_terrain(terrain_config)\n\n# Add atmospheric fog for realism\nfog_config = {\n    \"color\": \"rgb(186, 210, 235)\",\n    \"high-color\": \"rgb(36, 92, 223)\",\n    \"horizon-blend\": 0.02,\n    \"space-color\": \"rgb(11, 11, 25)\",\n    \"star-intensity\": 0.6,\n}\nm3d.set_fog(fog_config)\n\nprint(\"3D terrain and fog added to the map\")\nm3d\n</pre> # Create a new map focused on a mountainous area m3d = MapboxMap(     center=[46.8182, 8.2275],  # Swiss Alps     zoom=12,     pitch=60,     bearing=45,     height=\"600px\",     style=\"mapbox://styles/mapbox/satellite-v9\", )  # Add 3D terrain terrain_config = {\"source\": \"mapbox-dem\", \"exaggeration\": 1.5} m3d.set_terrain(terrain_config)  # Add atmospheric fog for realism fog_config = {     \"color\": \"rgb(186, 210, 235)\",     \"high-color\": \"rgb(36, 92, 223)\",     \"horizon-blend\": 0.02,     \"space-color\": \"rgb(11, 11, 25)\",     \"star-intensity\": 0.6, } m3d.set_fog(fog_config)  print(\"3D terrain and fog added to the map\") m3d <pre>3D terrain and fog added to the map\n</pre> Out[5]: In\u00a0[6]: Copied! <pre># Add various controls to the map\nm3d.add_control(\"navigation\", \"top-left\")\nm3d.add_control(\"scale\", \"bottom-left\")\nm3d.add_control(\"fullscreen\", \"top-right\")\n\nprint(\"Navigation, scale, and fullscreen controls added\")\n</pre> # Add various controls to the map m3d.add_control(\"navigation\", \"top-left\") m3d.add_control(\"scale\", \"bottom-left\") m3d.add_control(\"fullscreen\", \"top-right\")  print(\"Navigation, scale, and fullscreen controls added\") <pre>Navigation, scale, and fullscreen controls added\n</pre> In\u00a0[7]: Copied! <pre># Create a map focused on New York City\nnyc_map = MapboxMap(\n    center=[40.7589, -73.9851],  # Times Square\n    zoom=16,\n    pitch=60,\n    bearing=30,\n    height=\"600px\",\n    style=\"mapbox://styles/mapbox/streets-v12\",\n)\n\n# Add 3D buildings\nnyc_map.add_3d_buildings()\n\n# Add navigation control\nnyc_map.add_control(\"navigation\", \"top-left\")\n\nprint(\"3D buildings added to NYC map\")\nnyc_map\n</pre> # Create a map focused on New York City nyc_map = MapboxMap(     center=[40.7589, -73.9851],  # Times Square     zoom=16,     pitch=60,     bearing=30,     height=\"600px\",     style=\"mapbox://styles/mapbox/streets-v12\", )  # Add 3D buildings nyc_map.add_3d_buildings()  # Add navigation control nyc_map.add_control(\"navigation\", \"top-left\")  print(\"3D buildings added to NYC map\") nyc_map <pre>3D buildings added to NYC map\n</pre> Out[7]: In\u00a0[8]: Copied! <pre># Sample data for NYC landmarks\nnyc_landmarks = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},\n            \"properties\": {\"name\": \"Statue of Liberty\", \"type\": \"monument\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"One World Trade Center\", \"type\": \"building\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},\n            \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9442, 40.8176]},\n            \"properties\": {\"name\": \"Yankee Stadium\", \"type\": \"stadium\"},\n        },\n    ],\n}\n\n# Add the landmarks as a circle layer\nnyc_map.add_geojson_layer(\n    layer_id=\"landmarks\",\n    geojson_data=nyc_landmarks,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#FF6B6B\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#FFFFFF\",\n        \"circle-opacity\": 0.8,\n    },\n)\n\n# Add markers with popups\nnyc_map.add_marker(\n    40.6892,\n    -74.0445,\n    \"&lt;h3&gt;Statue of Liberty&lt;/h3&gt;&lt;p&gt;Symbol of freedom and democracy&lt;/p&gt;\",\n)\nnyc_map.add_marker(\n    40.7484, -73.9857, \"&lt;h3&gt;Central Park&lt;/h3&gt;&lt;p&gt;Manhattan's green oasis&lt;/p&gt;\"\n)\n\nprint(\"NYC landmarks added to the map\")\nprint(f\"Current layers: {list(nyc_map.get_layers().keys())}\")\n</pre> # Sample data for NYC landmarks nyc_landmarks = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},             \"properties\": {\"name\": \"Statue of Liberty\", \"type\": \"monument\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"One World Trade Center\", \"type\": \"building\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},             \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9442, 40.8176]},             \"properties\": {\"name\": \"Yankee Stadium\", \"type\": \"stadium\"},         },     ], }  # Add the landmarks as a circle layer nyc_map.add_geojson_layer(     layer_id=\"landmarks\",     geojson_data=nyc_landmarks,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#FF6B6B\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#FFFFFF\",         \"circle-opacity\": 0.8,     }, )  # Add markers with popups nyc_map.add_marker(     40.6892,     -74.0445,     \"Statue of Liberty<p>Symbol of freedom and democracy</p>\", ) nyc_map.add_marker(     40.7484, -73.9857, \"Central Park<p>Manhattan's green oasis</p>\" )  print(\"NYC landmarks added to the map\") print(f\"Current layers: {list(nyc_map.get_layers().keys())}\") <pre>NYC landmarks added to the map\nCurrent layers: ['3d-buildings', 'landmarks']\n</pre> In\u00a0[9]: Copied! <pre># Display the NYC map again - should show all layers\nprint(\"Displaying NYC map again with all layers:\")\nprint(f\"Layers: {list(nyc_map.get_layers().keys())}\")\nprint(f\"Sources: {list(nyc_map.get_sources().keys())}\")\nnyc_map\n</pre> # Display the NYC map again - should show all layers print(\"Displaying NYC map again with all layers:\") print(f\"Layers: {list(nyc_map.get_layers().keys())}\") print(f\"Sources: {list(nyc_map.get_sources().keys())}\") nyc_map <pre>Displaying NYC map again with all layers:\nLayers: ['3d-buildings', 'landmarks']\nSources: ['landmarks_source']\n</pre> Out[9]: In\u00a0[10]: Copied! <pre># Store events for demonstration\nmap_events = []\n\n\ndef on_map_click(event):\n    lat, lng = event[\"lngLat\"]\n    map_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n    print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")\n\n\ndef on_map_move(event):\n    center = event.get(\"center\", [0, 0])\n    zoom = event.get(\"zoom\", 0)\n    print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")\n\n\n# Register event handlers\nnyc_map.on_map_event(\"click\", on_map_click)\nnyc_map.on_map_event(\"moveend\", on_map_move)\n\nprint(\"Event handlers registered. Try clicking and moving the map!\")\n</pre> # Store events for demonstration map_events = []   def on_map_click(event):     lat, lng = event[\"lngLat\"]     map_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")     print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")   def on_map_move(event):     center = event.get(\"center\", [0, 0])     zoom = event.get(\"zoom\", 0)     print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")   # Register event handlers nyc_map.on_map_event(\"click\", on_map_click) nyc_map.on_map_event(\"moveend\", on_map_move)  print(\"Event handlers registered. Try clicking and moving the map!\") <pre>Event handlers registered. Try clicking and moving the map!\n</pre> In\u00a0[11]: Copied! <pre>from anymap import MapLibreMap\n\n# Create a MapLibre map for comparison\nmaplibre_map = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"400px\",\n    style=\"https://demotiles.maplibre.org/style.json\",\n)\n\n# Add some data to differentiate\nsf_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco City Hall\"},\n        }\n    ],\n}\n\nmaplibre_map.add_geojson_layer(\n    \"sf_poi\", sf_data, \"circle\", {\"circle-color\": \"#50C878\", \"circle-radius\": 10}\n)\n\nprint(\"MapLibre map (San Francisco):\")\nmaplibre_map\n</pre> from anymap import MapLibreMap  # Create a MapLibre map for comparison maplibre_map = MapLibreMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"400px\",     style=\"https://demotiles.maplibre.org/style.json\", )  # Add some data to differentiate sf_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco City Hall\"},         }     ], }  maplibre_map.add_geojson_layer(     \"sf_poi\", sf_data, \"circle\", {\"circle-color\": \"#50C878\", \"circle-radius\": 10} )  print(\"MapLibre map (San Francisco):\") maplibre_map <pre>MapLibre map (San Francisco):\n</pre> Out[11]: In\u00a0[12]: Copied! <pre># Create a Mapbox map of the same location for comparison\nmapbox_sf = MapboxMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"400px\",\n    style=\"mapbox://styles/mapbox/streets-v12\",\n)\n\nmapbox_sf.add_geojson_layer(\n    \"sf_poi_mapbox\", sf_data, \"circle\", {\"circle-color\": \"#FF6B6B\", \"circle-radius\": 10}\n)\n\nprint(\"Mapbox map (San Francisco):\")\nmapbox_sf\n</pre> # Create a Mapbox map of the same location for comparison mapbox_sf = MapboxMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     height=\"400px\",     style=\"mapbox://styles/mapbox/streets-v12\", )  mapbox_sf.add_geojson_layer(     \"sf_poi_mapbox\", sf_data, \"circle\", {\"circle-color\": \"#FF6B6B\", \"circle-radius\": 10} )  print(\"Mapbox map (San Francisco):\") mapbox_sf <pre>Mapbox map (San Francisco):\n</pre> Out[12]: In\u00a0[13]: Copied! <pre># Create a map of the Grand Canyon with enhanced terrain\ncanyon_map = MapboxMap(\n    center=[36.1069, -112.1129],  # Grand Canyon\n    zoom=13,\n    pitch=70,\n    bearing=150,\n    height=\"600px\",\n    style=\"mapbox://styles/mapbox/satellite-v9\",\n)\n\n# Add terrain with higher exaggeration for dramatic effect\ncanyon_terrain = {\"source\": \"mapbox-dem\", \"exaggeration\": 2.0}\ncanyon_map.set_terrain(canyon_terrain)\n\n# Add enhanced atmospheric fog\ncanyon_fog = {\n    \"color\": \"rgb(255, 255, 255)\",\n    \"high-color\": \"rgb(200, 200, 255)\",\n    \"horizon-blend\": 0.1,\n    \"space-color\": \"rgb(11, 11, 25)\",\n    \"star-intensity\": 0.0,\n}\ncanyon_map.set_fog(canyon_fog)\n\n# Add controls\ncanyon_map.add_control(\"navigation\", \"top-left\")\ncanyon_map.add_control(\"scale\", \"bottom-left\")\n\nprint(\"Grand Canyon with enhanced 3D terrain\")\ncanyon_map\n</pre> # Create a map of the Grand Canyon with enhanced terrain canyon_map = MapboxMap(     center=[36.1069, -112.1129],  # Grand Canyon     zoom=13,     pitch=70,     bearing=150,     height=\"600px\",     style=\"mapbox://styles/mapbox/satellite-v9\", )  # Add terrain with higher exaggeration for dramatic effect canyon_terrain = {\"source\": \"mapbox-dem\", \"exaggeration\": 2.0} canyon_map.set_terrain(canyon_terrain)  # Add enhanced atmospheric fog canyon_fog = {     \"color\": \"rgb(255, 255, 255)\",     \"high-color\": \"rgb(200, 200, 255)\",     \"horizon-blend\": 0.1,     \"space-color\": \"rgb(11, 11, 25)\",     \"star-intensity\": 0.0, } canyon_map.set_fog(canyon_fog)  # Add controls canyon_map.add_control(\"navigation\", \"top-left\") canyon_map.add_control(\"scale\", \"bottom-left\")  print(\"Grand Canyon with enhanced 3D terrain\") canyon_map <pre>Grand Canyon with enhanced 3D terrain\n</pre> Out[13]: In\u00a0[14]: Copied! <pre># Create a simple map for layer management demo\nlayer_demo = MapboxMap(center=[40.7128, -74.0060], zoom=10, height=\"400px\")  # NYC\n\n# Add multiple layers\ndemo_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"Point 1\"},\n        }\n    ],\n}\n\nlayer_demo.add_geojson_layer(\"layer1\", demo_data, \"circle\", {\"circle-color\": \"red\"})\nlayer_demo.add_geojson_layer(\"layer2\", demo_data, \"circle\", {\"circle-color\": \"blue\"})\nlayer_demo.add_geojson_layer(\"layer3\", demo_data, \"circle\", {\"circle-color\": \"green\"})\n\nprint(f\"Layers before cleanup: {list(layer_demo.get_layers().keys())}\")\nlayer_demo\n</pre> # Create a simple map for layer management demo layer_demo = MapboxMap(center=[40.7128, -74.0060], zoom=10, height=\"400px\")  # NYC  # Add multiple layers demo_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"Point 1\"},         }     ], }  layer_demo.add_geojson_layer(\"layer1\", demo_data, \"circle\", {\"circle-color\": \"red\"}) layer_demo.add_geojson_layer(\"layer2\", demo_data, \"circle\", {\"circle-color\": \"blue\"}) layer_demo.add_geojson_layer(\"layer3\", demo_data, \"circle\", {\"circle-color\": \"green\"})  print(f\"Layers before cleanup: {list(layer_demo.get_layers().keys())}\") layer_demo <pre>Layers before cleanup: ['layer1', 'layer2', 'layer3']\n</pre> Out[14]: In\u00a0[15]: Copied! <pre># Clear some layers\nlayer_demo.remove_layer(\"layer2\")\nprint(f\"After removing layer2: {list(layer_demo.get_layers().keys())}\")\n\n# Clear all layers\nlayer_demo.clear_layers()\nprint(f\"After clearing all layers: {list(layer_demo.get_layers().keys())}\")\nprint(f\"Sources still exist: {list(layer_demo.get_sources().keys())}\")\n\n# Display the map without layers\nlayer_demo\n</pre> # Clear some layers layer_demo.remove_layer(\"layer2\") print(f\"After removing layer2: {list(layer_demo.get_layers().keys())}\")  # Clear all layers layer_demo.clear_layers() print(f\"After clearing all layers: {list(layer_demo.get_layers().keys())}\") print(f\"Sources still exist: {list(layer_demo.get_sources().keys())}\")  # Display the map without layers layer_demo <pre>After removing layer2: ['layer1', 'layer3']\nAfter clearing all layers: []\nSources still exist: ['layer1_source', 'layer2_source', 'layer3_source']\n</pre> Out[15]:"},{"location":"examples/mapbox_example/#anymap-mapbox-gl-js-examples","title":"AnyMap Mapbox GL JS Examples\u00b6","text":"<p>This notebook demonstrates the Mapbox GL JS backend for anymap, showcasing advanced mapping features including 3D terrain, 3D buildings, custom controls, and atmospheric fog effects.</p>"},{"location":"examples/mapbox_example/#basic-mapbox-map","title":"Basic Mapbox Map\u00b6","text":"<p>Let's start with a basic Mapbox map. The access token is automatically handled.</p>"},{"location":"examples/mapbox_example/#mapbox-styles","title":"Mapbox Styles\u00b6","text":"<p>Mapbox offers various built-in styles. Let's try the satellite style.</p>"},{"location":"examples/mapbox_example/#3d-terrain-and-buildings","title":"3D Terrain and Buildings\u00b6","text":"<p>One of Mapbox's powerful features is 3D terrain and building visualization.</p>"},{"location":"examples/mapbox_example/#adding-controls","title":"Adding Controls\u00b6","text":"<p>Mapbox provides various interactive controls.</p>"},{"location":"examples/mapbox_example/#urban-3d-buildings","title":"Urban 3D Buildings\u00b6","text":"<p>Let's create a map showcasing 3D buildings in a urban environment.</p>"},{"location":"examples/mapbox_example/#adding-data-layers","title":"Adding Data Layers\u00b6","text":"<p>Let's add some GeoJSON data to visualize points of interest.</p>"},{"location":"examples/mapbox_example/#multi-cell-rendering-test","title":"Multi-Cell Rendering Test\u00b6","text":"<p>Test that the same map instance renders correctly in multiple cells.</p>"},{"location":"examples/mapbox_example/#event-handling","title":"Event Handling\u00b6","text":"<p>Set up event handlers to capture user interactions.</p>"},{"location":"examples/mapbox_example/#comparison-with-maplibre","title":"Comparison with MapLibre\u00b6","text":"<p>Let's create a side-by-side comparison with MapLibre to show both backends work independently.</p>"},{"location":"examples/mapbox_example/#advanced-mapbox-features","title":"Advanced Mapbox Features\u00b6","text":"<p>Let's showcase some advanced Mapbox-specific features like custom terrain sources.</p>"},{"location":"examples/mapbox_example/#layer-management","title":"Layer Management\u00b6","text":"<p>Demonstrate layer management capabilities.</p>"},{"location":"examples/mapbox_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the key features of AnyMap's Mapbox GL JS backend:</p> <p>\u2705 Mapbox Integration: Full integration with Mapbox GL JS v3.13.0 \u2705 Access Token Management: Automatic token handling with fallbacks \u2705 3D Terrain &amp; Buildings: Support for 3D terrain exaggeration and building visualization \u2705 Atmospheric Effects: Fog and lighting effects for realistic mapping \u2705 Interactive Controls: Navigation, scale, fullscreen, and geolocation controls \u2705 Multi-cell Rendering: Persistent layer state across Jupyter cells \u2705 Event Handling: Click and move event capture \u2705 Layer Management: Full CRUD operations for map layers and sources \u2705 Style Flexibility: Support for built-in Mapbox styles and custom styles \u2705 Independence: Works alongside MapLibre backend without conflicts</p> <p>The Mapbox backend provides access to Mapbox's premium features while maintaining the same simple API as the MapLibre backend.</p>"},{"location":"examples/maplibre_example/","title":"Maplibre example","text":"In\u00a0[1]: Copied! <pre>from anymap import MapLibreMap\n</pre> from anymap import MapLibreMap In\u00a0[2]: Copied! <pre># Create the main test map\nm = MapLibreMap(\n    center=[-100, 40],\n    zoom=3.5,\n    height=\"600px\",\n    width=\"100%\",\n)\nm\n</pre> # Create the main test map m = MapLibreMap(     center=[-100, 40],     zoom=3.5,     height=\"600px\",     width=\"100%\", ) m Out[2]: In\u00a0[3]: Copied! <pre>m = MapLibreMap(\n    center=[-122.4194, 37.7749],\n    zoom=12,\n    height=\"600px\",\n    width=\"100%\",\n    projection=\"globe\",\n    add_sidebar=True,  # San Francisco\n)\nm.add_basemap(\"Esri.WorldImagery\")\nm\n</pre> m = MapLibreMap(     center=[-122.4194, 37.7749],     zoom=12,     height=\"600px\",     width=\"100%\",     projection=\"globe\",     add_sidebar=True,  # San Francisco ) m.add_basemap(\"Esri.WorldImagery\") m In\u00a0[4]: Copied! <pre>m.set_opacity(\"Esri.WorldImagery\", 0.5)\n</pre> m.set_opacity(\"Esri.WorldImagery\", 0.5) In\u00a0[5]: Copied! <pre>m.set_visibility(\"Esri.WorldImagery\", False)\n</pre> m.set_visibility(\"Esri.WorldImagery\", False) In\u00a0[6]: Copied! <pre>url = \"https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\"\n</pre> url = \"https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\" In\u00a0[7]: Copied! <pre>m.add_tile_layer(\"Satellite\", source_url=url, attribution=\"Google\")\n</pre> m.add_tile_layer(\"Satellite\", source_url=url, attribution=\"Google\") In\u00a0[8]: Copied! <pre># Display the same map instance again - should render without issues\nprint(\"Displaying the SAME map instance in a second cell...\")\nm\n</pre> # Display the same map instance again - should render without issues print(\"Displaying the SAME map instance in a second cell...\") m <pre>Displaying the SAME map instance in a second cell...\n</pre> In\u00a0[9]: Copied! <pre># Add a GeoJSON layer with points of interest in San Francisco\nsf_poi = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\"name\": \"San Francisco City Hall\", \"type\": \"government\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4183, 37.7793]},\n            \"properties\": {\"name\": \"Golden Gate Park\", \"type\": \"park\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.3959, 37.7937]},\n            \"properties\": {\"name\": \"Fisherman's Wharf\", \"type\": \"attraction\"},\n        },\n    ],\n}\n\n# Add the layer\nm.add_geojson_layer(\n    layer_id=\"sf_poi\",\n    geojson_data=sf_poi,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff6b6b\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#ffffff\",\n    },\n)\n\n# Add markers\nm.add_marker(-122.4194, 37.7749, popup=\"&lt;b&gt;City Hall&lt;/b&gt;&lt;br&gt;Government building\")\nm.add_marker(-122.4183, 37.7793, popup=\"&lt;b&gt;Golden Gate Park&lt;/b&gt;&lt;br&gt;Beautiful park\")\n\nprint(\"Added GeoJSON layer and markers. Current layers:\", list(m.get_layers().keys()))\n</pre> # Add a GeoJSON layer with points of interest in San Francisco sf_poi = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {\"name\": \"San Francisco City Hall\", \"type\": \"government\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4183, 37.7793]},             \"properties\": {\"name\": \"Golden Gate Park\", \"type\": \"park\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.3959, 37.7937]},             \"properties\": {\"name\": \"Fisherman's Wharf\", \"type\": \"attraction\"},         },     ], }  # Add the layer m.add_geojson_layer(     layer_id=\"sf_poi\",     geojson_data=sf_poi,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#ff6b6b\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#ffffff\",     }, )  # Add markers m.add_marker(-122.4194, 37.7749, popup=\"City HallGovernment building\") m.add_marker(-122.4183, 37.7793, popup=\"Golden Gate ParkBeautiful park\")  print(\"Added GeoJSON layer and markers. Current layers:\", list(m.get_layers().keys())) <pre>Added GeoJSON layer and markers. Current layers: ['Esri.WorldImagery', 'Satellite', 'sf_poi']\n</pre> In\u00a0[10]: Copied! <pre># Render the map again - layers should persist\nprint(\"Rendering map with layers in a new cell...\")\nprint(\"Layers should be visible:\", list(m.get_layers().keys()))\nprint(\"Sources should include:\", list(m.get_sources().keys()))\nm\n</pre> # Render the map again - layers should persist print(\"Rendering map with layers in a new cell...\") print(\"Layers should be visible:\", list(m.get_layers().keys())) print(\"Sources should include:\", list(m.get_sources().keys())) m <pre>Rendering map with layers in a new cell...\nLayers should be visible: ['Esri.WorldImagery', 'Satellite', 'sf_poi']\nSources should include: ['Esri.WorldImagery_source', 'Satellite_source', 'sf_poi_source']\n</pre> In\u00a0[11]: Copied! <pre>m\n</pre> m In\u00a0[12]: Copied! <pre># Modify map properties\nm.fly_to(-122.2712, 37.8044, zoom=15)  # Fly to Berkeley\nm.set_bearing(45)  # Rotate the map\nm.set_pitch(45)  # Tilt the map\n\nprint(\"Modified map view - flying to Berkeley with rotation and tilt\")\n</pre> # Modify map properties m.fly_to(-122.2712, 37.8044, zoom=15)  # Fly to Berkeley m.set_bearing(45)  # Rotate the map m.set_pitch(45)  # Tilt the map  print(\"Modified map view - flying to Berkeley with rotation and tilt\") <pre>Modified map view - flying to Berkeley with rotation and tilt\n</pre> In\u00a0[13]: Copied! <pre># Add more layers to test different layer types\nberkeley_area = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [-122.2850, 37.8000],\n                        [-122.2700, 37.8000],\n                        [-122.2700, 37.8100],\n                        [-122.2850, 37.8100],\n                        [-122.2850, 37.8000],\n                    ]\n                ],\n            },\n            \"properties\": {\"name\": \"Berkeley Area\"},\n        }\n    ],\n}\n\n# Add polygon layer\nm.add_geojson_layer(\n    layer_id=\"berkeley_area\",\n    geojson_data=berkeley_area,\n    layer_type=\"fill\",\n    paint={\"fill-color\": \"#4a90e2\", \"fill-opacity\": 0.3},\n)\n\nprint(\"Added Berkeley area polygon layer\")\n</pre> # Add more layers to test different layer types berkeley_area = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Polygon\",                 \"coordinates\": [                     [                         [-122.2850, 37.8000],                         [-122.2700, 37.8000],                         [-122.2700, 37.8100],                         [-122.2850, 37.8100],                         [-122.2850, 37.8000],                     ]                 ],             },             \"properties\": {\"name\": \"Berkeley Area\"},         }     ], }  # Add polygon layer m.add_geojson_layer(     layer_id=\"berkeley_area\",     geojson_data=berkeley_area,     layer_type=\"fill\",     paint={\"fill-color\": \"#4a90e2\", \"fill-opacity\": 0.3}, )  print(\"Added Berkeley area polygon layer\") <pre>Added Berkeley area polygon layer\n</pre> In\u00a0[14]: Copied! <pre>m\n</pre> m In\u00a0[15]: Copied! <pre># Display map again with all modifications\nprint(\"Displaying map with all modifications and layers:\")\nprint(\"Current layers:\", list(m.get_layers().keys()))\nm\n</pre> # Display map again with all modifications print(\"Displaying map with all modifications and layers:\") print(\"Current layers:\", list(m.get_layers().keys())) m <pre>Displaying map with all modifications and layers:\nCurrent layers: ['Esri.WorldImagery', 'Satellite', 'sf_poi', 'berkeley_area']\n</pre> In\u00a0[16]: Copied! <pre># Create a second independent map\nm2 = MapLibreMap(center=[-74.0060, 40.7128], zoom=12, height=\"600px\")  # New York City\n\n# Add different data to the second map\nnyc_poi = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"Times Square\", \"type\": \"attraction\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},\n            \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},\n        },\n    ],\n}\n\nm2.add_geojson_layer(\n    layer_id=\"nyc_poi\",\n    geojson_data=nyc_poi,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 10,\n        \"circle-color\": \"#50C878\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#ffffff\",\n    },\n)\n\nprint(\"Created second map (NYC) with different layers\")\nprint(\"Map 1 layers:\", list(m.get_layers().keys()))\nprint(\"Map 2 layers:\", list(m2.get_layers().keys()))\nm2\n</pre> # Create a second independent map m2 = MapLibreMap(center=[-74.0060, 40.7128], zoom=12, height=\"600px\")  # New York City  # Add different data to the second map nyc_poi = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"Times Square\", \"type\": \"attraction\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},             \"properties\": {\"name\": \"Central Park\", \"type\": \"park\"},         },     ], }  m2.add_geojson_layer(     layer_id=\"nyc_poi\",     geojson_data=nyc_poi,     layer_type=\"circle\",     paint={         \"circle-radius\": 10,         \"circle-color\": \"#50C878\",         \"circle-stroke-width\": 2,         \"circle-stroke-color\": \"#ffffff\",     }, )  print(\"Created second map (NYC) with different layers\") print(\"Map 1 layers:\", list(m.get_layers().keys())) print(\"Map 2 layers:\", list(m2.get_layers().keys())) m2 <pre>Created second map (NYC) with different layers\nMap 1 layers: ['Esri.WorldImagery', 'Satellite', 'sf_poi', 'berkeley_area']\nMap 2 layers: ['nyc_poi']\n</pre> Out[16]: In\u00a0[17]: Copied! <pre># Display both maps side by side to verify independence\nprint(\"Original map (San Francisco/Berkeley area):\")\nprint(\"Layers:\", list(m.get_layers().keys()))\nm\n</pre> # Display both maps side by side to verify independence print(\"Original map (San Francisco/Berkeley area):\") print(\"Layers:\", list(m.get_layers().keys())) m <pre>Original map (San Francisco/Berkeley area):\nLayers: ['Esri.WorldImagery', 'Satellite', 'sf_poi', 'berkeley_area']\n</pre> In\u00a0[18]: Copied! <pre># Second map again\nprint(\"Second map (New York City):\")\nprint(\"Layers:\", list(m2.get_layers().keys()))\nm2\n</pre> # Second map again print(\"Second map (New York City):\") print(\"Layers:\", list(m2.get_layers().keys())) m2 <pre>Second map (New York City):\nLayers: ['nyc_poi']\n</pre> Out[18]: In\u00a0[19]: Copied! <pre># Set up event handlers\nclick_events = []\nmove_events = []\n\n\ndef on_map_click(event):\n    lat, lng = event[\"lngLat\"]\n    click_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n    print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")\n\n\ndef on_map_move(event):\n    center = event.get(\"center\", [0, 0])\n    zoom = event.get(\"zoom\", 0)\n    move_events.append(f\"Moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")\n    print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")\n\n\n# Register event handlers\nm.on_map_event(\"click\", on_map_click)\nm.on_map_event(\"moveend\", on_map_move)\n\nprint(\"Event handlers registered. Click and move the map to test!\")\nprint(\"Events will be captured and displayed here.\")\n</pre> # Set up event handlers click_events = [] move_events = []   def on_map_click(event):     lat, lng = event[\"lngLat\"]     click_events.append(f\"Clicked at: {lat:.4f}, {lng:.4f}\")     print(f\"Map clicked at: {lat:.4f}, {lng:.4f}\")   def on_map_move(event):     center = event.get(\"center\", [0, 0])     zoom = event.get(\"zoom\", 0)     move_events.append(f\"Moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")     print(f\"Map moved to: {center[0]:.4f}, {center[1]:.4f} at zoom {zoom:.2f}\")   # Register event handlers m.on_map_event(\"click\", on_map_click) m.on_map_event(\"moveend\", on_map_move)  print(\"Event handlers registered. Click and move the map to test!\") print(\"Events will be captured and displayed here.\") <pre>Event handlers registered. Click and move the map to test!\nEvents will be captured and displayed here.\n</pre> In\u00a0[20]: Copied! <pre># Display the map with event handlers\nprint(\"Interactive map with event handlers - try clicking and panning!\")\nm\n</pre> # Display the map with event handlers print(\"Interactive map with event handlers - try clicking and panning!\") m <pre>Interactive map with event handlers - try clicking and panning!\n</pre> In\u00a0[21]: Copied! <pre># Check collected events\nprint(\"Recent click events:\")\nfor event in click_events[-5:]:  # Show last 5\n    print(f\"  {event}\")\n\nprint(\"\\nRecent move events:\")\nfor event in move_events[-5:]:  # Show last 5\n    print(f\"  {event}\")\n\nprint(f\"\\nTotal click events: {len(click_events)}\")\nprint(f\"Total move events: {len(move_events)}\")\n</pre> # Check collected events print(\"Recent click events:\") for event in click_events[-5:]:  # Show last 5     print(f\"  {event}\")  print(\"\\nRecent move events:\") for event in move_events[-5:]:  # Show last 5     print(f\"  {event}\")  print(f\"\\nTotal click events: {len(click_events)}\") print(f\"Total move events: {len(move_events)}\") <pre>Recent click events:\n\nRecent move events:\n\nTotal click events: 0\nTotal move events: 0\n</pre> In\u00a0[22]: Copied! <pre># Test layer management methods\nprint(\"Current layers before cleanup:\", list(m.get_layers().keys()))\nprint(\"Current sources before cleanup:\", list(m.get_sources().keys()))\n\n# Create a new map for testing layer management\nm3 = MapLibreMap(center=[-0.1278, 51.5074], zoom=12, height=\"600px\")  # London\n\n# Add multiple test layers\ntest_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},\n            \"properties\": {\"name\": \"Big Ben\"},\n        }\n    ],\n}\n\nm3.add_geojson_layer(\"test1\", test_data, \"circle\", {\"circle-color\": \"red\"})\nm3.add_geojson_layer(\"test2\", test_data, \"circle\", {\"circle-color\": \"blue\"})\nm3.add_geojson_layer(\"test3\", test_data, \"circle\", {\"circle-color\": \"green\"})\n\nprint(\"\\nLayers after adding test layers:\", list(m3.get_layers().keys()))\nm3\n</pre> # Test layer management methods print(\"Current layers before cleanup:\", list(m.get_layers().keys())) print(\"Current sources before cleanup:\", list(m.get_sources().keys()))  # Create a new map for testing layer management m3 = MapLibreMap(center=[-0.1278, 51.5074], zoom=12, height=\"600px\")  # London  # Add multiple test layers test_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-0.1278, 51.5074]},             \"properties\": {\"name\": \"Big Ben\"},         }     ], }  m3.add_geojson_layer(\"test1\", test_data, \"circle\", {\"circle-color\": \"red\"}) m3.add_geojson_layer(\"test2\", test_data, \"circle\", {\"circle-color\": \"blue\"}) m3.add_geojson_layer(\"test3\", test_data, \"circle\", {\"circle-color\": \"green\"})  print(\"\\nLayers after adding test layers:\", list(m3.get_layers().keys())) m3 <pre>Current layers before cleanup: ['Esri.WorldImagery', 'Satellite', 'sf_poi', 'berkeley_area']\nCurrent sources before cleanup: ['Esri.WorldImagery_source', 'Satellite_source', 'sf_poi_source', 'berkeley_area_source']\n\nLayers after adding test layers: ['test1', 'test2', 'test3']\n</pre> Out[22]: In\u00a0[23]: Copied! <pre># Test clearing layers\nprint(\"Before clearing - Layers:\", list(m3.get_layers().keys()))\nm3.clear_layers()\nprint(\"After clearing layers - Layers:\", list(m3.get_layers().keys()))\nprint(\"Sources still exist:\", list(m3.get_sources().keys()))\n\n# Display map after clearing layers\nm3\n</pre> # Test clearing layers print(\"Before clearing - Layers:\", list(m3.get_layers().keys())) m3.clear_layers() print(\"After clearing layers - Layers:\", list(m3.get_layers().keys())) print(\"Sources still exist:\", list(m3.get_sources().keys()))  # Display map after clearing layers m3 <pre>Before clearing - Layers: ['test1', 'test2', 'test3']\nAfter clearing layers - Layers: []\nSources still exist: ['test1_source', 'test2_source', 'test3_source']\n</pre> Out[23]: In\u00a0[24]: Copied! <pre># Final test - render all three maps in sequence\nprint(\"=== FINAL MULTI-CELL TEST ===\")\nprint(\"\\n1. Original map (San Francisco area):\")\nprint(\"   Layers:\", list(m.get_layers().keys()))\nprint(\"   Center:\", m.center, \"Zoom:\", m.zoom)\nm\n</pre> # Final test - render all three maps in sequence print(\"=== FINAL MULTI-CELL TEST ===\") print(\"\\n1. Original map (San Francisco area):\") print(\"   Layers:\", list(m.get_layers().keys())) print(\"   Center:\", m.center, \"Zoom:\", m.zoom) m <pre>=== FINAL MULTI-CELL TEST ===\n\n1. Original map (San Francisco area):\n   Layers: ['Esri.WorldImagery', 'Satellite', 'sf_poi', 'berkeley_area']\n   Center: [-122.4194, 37.7749] Zoom: 12.0\n</pre> In\u00a0[25]: Copied! <pre>print(\"2. Second map (New York City):\")\nprint(\"   Layers:\", list(m2.get_layers().keys()))\nprint(\"   Center:\", m2.center, \"Zoom:\", m2.zoom)\nm2\n</pre> print(\"2. Second map (New York City):\") print(\"   Layers:\", list(m2.get_layers().keys())) print(\"   Center:\", m2.center, \"Zoom:\", m2.zoom) m2 <pre>2. Second map (New York City):\n   Layers: ['nyc_poi']\n   Center: [-74.006, 40.7128] Zoom: 12.0\n</pre> Out[25]: In\u00a0[26]: Copied! <pre>print(\"3. Third map (London - after layer clearing):\")\nprint(\"   Layers:\", list(m3.get_layers().keys()))\nprint(\"   Center:\", m3.center, \"Zoom:\", m3.zoom)\nm3\n</pre> print(\"3. Third map (London - after layer clearing):\") print(\"   Layers:\", list(m3.get_layers().keys())) print(\"   Center:\", m3.center, \"Zoom:\", m3.zoom) m3 <pre>3. Third map (London - after layer clearing):\n   Layers: []\n   Center: [-0.1278, 51.5074] Zoom: 12.0\n</pre> Out[26]: In\u00a0[27]: Copied! <pre># Match the exact parameters from cog.html\nm = MapLibreMap(\n    center=[11.39831, 47.26244],  # [lng, lat] format\n    zoom=14,\n)\n\n# Add COG layer with exact same parameters as cog.html\nm.add_cog_layer(\n    layer_id=\"cogLayer\",\n    cog_url=\"https://maplibre.org/maplibre-gl-js/docs/assets/cog.tif\",\n)\n\n# Export to HTML\nm.to_html(\"COG.html\", title=\"Add a COG raster source\")\nm\n</pre> # Match the exact parameters from cog.html m = MapLibreMap(     center=[11.39831, 47.26244],  # [lng, lat] format     zoom=14, )  # Add COG layer with exact same parameters as cog.html m.add_cog_layer(     layer_id=\"cogLayer\",     cog_url=\"https://maplibre.org/maplibre-gl-js/docs/assets/cog.tif\", )  # Export to HTML m.to_html(\"COG.html\", title=\"Add a COG raster source\") m Out[27]:"},{"location":"examples/maplibre_example/#anymap-multi-cell-rendering-test","title":"AnyMap Multi-Cell Rendering Test\u00b6","text":"<p>This notebook thoroughly tests the anymap package's ability to render interactive maps across multiple cells without issues. It also tests layer persistence, bidirectional communication, and various MapLibre features.</p>"},{"location":"examples/maplibre_example/#test-1-basic-map-creation-and-multi-cell-rendering","title":"Test 1: Basic Map Creation and Multi-Cell Rendering\u00b6","text":"<p>Let's create a map and test that it renders correctly across multiple cells.</p>"},{"location":"examples/maplibre_example/#test-2-layer-persistence","title":"Test 2: Layer Persistence\u00b6","text":"<p>Now let's add some layers and verify they persist when the map is rendered in multiple cells.</p>"},{"location":"examples/maplibre_example/#test-3-dynamic-map-modifications","title":"Test 3: Dynamic Map Modifications\u00b6","text":"<p>Test that modifications to the map work correctly across cells.</p>"},{"location":"examples/maplibre_example/#test-4-multiple-independent-map-instances","title":"Test 4: Multiple Independent Map Instances\u00b6","text":"<p>Test creating multiple independent map instances that work independently.</p>"},{"location":"examples/maplibre_example/#test-5-event-handling-and-bidirectional-communication","title":"Test 5: Event Handling and Bidirectional Communication\u00b6","text":"<p>Test the event handling system and bidirectional communication.</p>"},{"location":"examples/maplibre_example/#test-6-layer-management-methods","title":"Test 6: Layer Management Methods\u00b6","text":"<p>Test the enhanced layer management functionality.</p>"},{"location":"examples/maplibre_example/#test-7-final-multi-cell-persistence-test","title":"Test 7: Final Multi-Cell Persistence Test\u00b6","text":"<p>Let's do a final comprehensive test to ensure everything works across cells.</p>"},{"location":"examples/maplibre_example/#test-8-add-cog","title":"Test 8: Add COG\u00b6","text":""},{"location":"examples/maplibre_example/#test-summary","title":"Test Summary\u00b6","text":"<p>If all the above tests worked correctly, you should observe:</p> <ol> <li>\u2705 Multi-cell rendering: The same map instance renders correctly in multiple cells</li> <li>\u2705 Layer persistence: Layers added to a map persist when the map is rendered in different cells</li> <li>\u2705 Independent instances: Multiple map instances work independently without interfering with each other</li> <li>\u2705 Dynamic modifications: Map property changes (zoom, center, bearing, pitch) work correctly</li> <li>\u2705 Event handling: Click and move events are captured and handled properly</li> <li>\u2705 Layer management: Adding, removing, and clearing layers works as expected</li> <li>\u2705 State synchronization: The JavaScript frontend and Python backend maintain synchronized state</li> </ol>"},{"location":"examples/maplibre_example/#compatibility-notes","title":"Compatibility Notes\u00b6","text":"<p>This implementation should work in:</p> <ul> <li>JupyterLab (Classic and modern)</li> <li>Jupyter Notebook (Classic)</li> <li>VS Code with Jupyter extension</li> <li>Google Colab</li> <li>Other Jupyter-compatible environments</li> </ul> <p>The anywidget framework ensures broad compatibility across different Jupyter environments.</p>"},{"location":"examples/openlayers_example/","title":"Openlayers example","text":"In\u00a0[1]: Copied! <pre>import anymap\nimport json\n</pre> import anymap import json In\u00a0[2]: Copied! <pre># Create a basic OpenLayers map\nol_map = anymap.OpenLayersMap(\n    center=[-0.09, 51.505],  # [longitude, latitude] - London coordinates\n    zoom=10,\n    width=\"100%\",\n    height=\"400px\",\n)\n\nol_map\n</pre> # Create a basic OpenLayers map ol_map = anymap.OpenLayersMap(     center=[-0.09, 51.505],  # [longitude, latitude] - London coordinates     zoom=10,     width=\"100%\",     height=\"400px\", )  ol_map Out[2]: In\u00a0[3]: Copied! <pre># OpenStreetMap (default)\nosm_map = anymap.OpenLayersMap(\n    center=[-74.0060, 40.7128],  # [longitude, latitude] - New York\n    zoom=10,\n    tile_layer=\"OSM\",\n)\n\nosm_map\n</pre> # OpenStreetMap (default) osm_map = anymap.OpenLayersMap(     center=[-74.0060, 40.7128],  # [longitude, latitude] - New York     zoom=10,     tile_layer=\"OSM\", )  osm_map Out[3]: In\u00a0[4]: Copied! <pre># CartoDB Positron (light theme)\npositron_map = anymap.OpenLayersMap(\n    center=[-74.0060, 40.7128], zoom=10, tile_layer=\"CartoDB.Positron\"\n)\n\npositron_map\n</pre> # CartoDB Positron (light theme) positron_map = anymap.OpenLayersMap(     center=[-74.0060, 40.7128], zoom=10, tile_layer=\"CartoDB.Positron\" )  positron_map Out[4]: In\u00a0[5]: Copied! <pre># CartoDB Dark Matter (dark theme)\ndark_map = anymap.OpenLayersMap(\n    center=[-74.0060, 40.7128], zoom=10, tile_layer=\"CartoDB.DarkMatter\"\n)\n\ndark_map\n</pre> # CartoDB Dark Matter (dark theme) dark_map = anymap.OpenLayersMap(     center=[-74.0060, 40.7128], zoom=10, tile_layer=\"CartoDB.DarkMatter\" )  dark_map Out[5]: In\u00a0[6]: Copied! <pre># Create a map with markers\nmarker_map = anymap.OpenLayersMap(\n    center=[-0.1278, 51.5074], zoom=12  # [longitude, latitude] - London\n)\n\n# Add markers for famous London landmarks\nmarker_map.add_marker(\n    [-0.1278, 51.5074],\n    popup=\"&lt;b&gt;London&lt;/b&gt;&lt;br&gt;Capital of the United Kingdom\",\n    tooltip=\"London City Center\",\n)\n\nmarker_map.add_marker(\n    [-0.1246, 51.5007], popup=\"&lt;b&gt;Big Ben&lt;/b&gt;&lt;br&gt;Famous clock tower\", tooltip=\"Big Ben\"\n)\n\nmarker_map.add_marker(\n    [-0.1195, 51.5033],\n    popup=\"&lt;b&gt;London Eye&lt;/b&gt;&lt;br&gt;Giant Ferris wheel\",\n    tooltip=\"London Eye\",\n)\n\nmarker_map\n</pre> # Create a map with markers marker_map = anymap.OpenLayersMap(     center=[-0.1278, 51.5074], zoom=12  # [longitude, latitude] - London )  # Add markers for famous London landmarks marker_map.add_marker(     [-0.1278, 51.5074],     popup=\"LondonCapital of the United Kingdom\",     tooltip=\"London City Center\", )  marker_map.add_marker(     [-0.1246, 51.5007], popup=\"Big BenFamous clock tower\", tooltip=\"Big Ben\" )  marker_map.add_marker(     [-0.1195, 51.5033],     popup=\"London EyeGiant Ferris wheel\",     tooltip=\"London Eye\", )  marker_map Out[6]: In\u00a0[7]: Copied! <pre># Create a map with shapes\nshapes_map = anymap.OpenLayersMap(\n    center=[-74.0060, 40.7128], zoom=11  # [longitude, latitude] - New York\n)\n\n# Add a circle around Central Park\nshapes_map.add_circle(\n    [-73.9654, 40.7829],  # [longitude, latitude] - Central Park\n    radius=1000,  # 1km radius\n    color=\"green\",\n    fillColor=\"lightgreen\",\n    fillOpacity=0.3,\n)\n\n# Add a polygon for Manhattan (simplified)\nmanhattan_coords = [\n    [\n        [-73.9712, 40.7831],\n        [-73.9441, 40.7489],\n        [-73.9969, 40.7061],\n        [-74.0113, 40.7194],\n        [-73.9712, 40.7831],\n    ]\n]\n\nshapes_map.add_polygon(\n    manhattan_coords, color=\"blue\", fillColor=\"lightblue\", fillOpacity=0.2\n)\n\n# Add a line string for Broadway\nbroadway_coords = [\n    [-73.9776, 40.7614],\n    [-73.9851, 40.7589],\n    [-73.9926, 40.7565],\n    [-74.0014, 40.7505],\n]\n\nshapes_map.add_linestring(broadway_coords, color=\"red\", strokeWidth=5)\n\nshapes_map\n</pre> # Create a map with shapes shapes_map = anymap.OpenLayersMap(     center=[-74.0060, 40.7128], zoom=11  # [longitude, latitude] - New York )  # Add a circle around Central Park shapes_map.add_circle(     [-73.9654, 40.7829],  # [longitude, latitude] - Central Park     radius=1000,  # 1km radius     color=\"green\",     fillColor=\"lightgreen\",     fillOpacity=0.3, )  # Add a polygon for Manhattan (simplified) manhattan_coords = [     [         [-73.9712, 40.7831],         [-73.9441, 40.7489],         [-73.9969, 40.7061],         [-74.0113, 40.7194],         [-73.9712, 40.7831],     ] ]  shapes_map.add_polygon(     manhattan_coords, color=\"blue\", fillColor=\"lightblue\", fillOpacity=0.2 )  # Add a line string for Broadway broadway_coords = [     [-73.9776, 40.7614],     [-73.9851, 40.7589],     [-73.9926, 40.7565],     [-74.0014, 40.7505], ]  shapes_map.add_linestring(broadway_coords, color=\"red\", strokeWidth=5)  shapes_map Out[7]: In\u00a0[8]: Copied! <pre># Sample GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},\n            \"properties\": {\"name\": \"New York City\", \"population\": 8175133},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-87.6298, 41.8781]},\n            \"properties\": {\"name\": \"Chicago\", \"population\": 2693976},\n        },\n    ],\n}\n\n# Create map with GeoJSON data\ngeojson_map = anymap.OpenLayersMap(center=[-80.0, 40.0], zoom=5)\n\ngeojson_map.add_geojson(\n    geojson_data,\n    style={\"fill\": {\"color\": \"purple\"}, \"stroke\": {\"color\": \"purple\", \"width\": 2}},\n)\n\ngeojson_map\n</pre> # Sample GeoJSON data geojson_data = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128]},             \"properties\": {\"name\": \"New York City\", \"population\": 8175133},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-87.6298, 41.8781]},             \"properties\": {\"name\": \"Chicago\", \"population\": 2693976},         },     ], }  # Create map with GeoJSON data geojson_map = anymap.OpenLayersMap(center=[-80.0, 40.0], zoom=5)  geojson_map.add_geojson(     geojson_data,     style={\"fill\": {\"color\": \"purple\"}, \"stroke\": {\"color\": \"purple\", \"width\": 2}}, )  geojson_map Out[8]: In\u00a0[9]: Copied! <pre># Create a map for demonstrations\ncontrol_map = anymap.OpenLayersMap(\n    center=[-122.4194, 37.7749], zoom=10  # [longitude, latitude] - San Francisco\n)\n\ncontrol_map\n</pre> # Create a map for demonstrations control_map = anymap.OpenLayersMap(     center=[-122.4194, 37.7749], zoom=10  # [longitude, latitude] - San Francisco )  control_map Out[9]: In\u00a0[10]: Copied! <pre># Fly to a different location\ncontrol_map.fly_to(-118.2437, 34.0522, 12)  # Los Angeles\n</pre> # Fly to a different location control_map.fly_to(-118.2437, 34.0522, 12)  # Los Angeles In\u00a0[11]: Copied! <pre># Set center and zoom\ncontrol_map.set_center(-80.1918, 25.7617)  # Miami\ncontrol_map.set_zoom(11)\n</pre> # Set center and zoom control_map.set_center(-80.1918, 25.7617)  # Miami control_map.set_zoom(11) In\u00a0[12]: Copied! <pre># Fit extent to a specific area\n# [minX, minY, maxX, maxY] in map projection coordinates\ncontrol_map.fit_extent([-80.3, 25.7, -80.1, 25.9])\n</pre> # Fit extent to a specific area # [minX, minY, maxX, maxY] in map projection coordinates control_map.fit_extent([-80.3, 25.7, -80.1, 25.9]) In\u00a0[13]: Copied! <pre># Create a map with vector layers\nvector_map = anymap.OpenLayersMap(\n    center=[2.3522, 48.8566], zoom=12  # [longitude, latitude] - Paris\n)\n\n# Define features\nfeatures = [\n    {\n        \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},\n        \"properties\": {\"name\": \"Paris\", \"type\": \"city\"},\n    },\n    {\n        \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.2945, 48.8584]},\n        \"properties\": {\"name\": \"Eiffel Tower\", \"type\": \"landmark\"},\n    },\n]\n\nvector_map.add_vector_layer(\n    features,\n    style={\n        \"image\": {\n            \"circle\": {\n                \"radius\": 8,\n                \"fill\": {\"color\": \"red\"},\n                \"stroke\": {\"color\": \"white\", \"width\": 2},\n            }\n        }\n    },\n)\n\nvector_map\n</pre> # Create a map with vector layers vector_map = anymap.OpenLayersMap(     center=[2.3522, 48.8566], zoom=12  # [longitude, latitude] - Paris )  # Define features features = [     {         \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.3522, 48.8566]},         \"properties\": {\"name\": \"Paris\", \"type\": \"city\"},     },     {         \"geometry\": {\"type\": \"Point\", \"coordinates\": [2.2945, 48.8584]},         \"properties\": {\"name\": \"Eiffel Tower\", \"type\": \"landmark\"},     }, ]  vector_map.add_vector_layer(     features,     style={         \"image\": {             \"circle\": {                 \"radius\": 8,                 \"fill\": {\"color\": \"red\"},                 \"stroke\": {\"color\": \"white\", \"width\": 2},             }         }     }, )  vector_map Out[13]: In\u00a0[14]: Copied! <pre># Create a map with multiple tile layers\nmulti_layer_map = anymap.OpenLayersMap(\n    center=[2.3522, 48.8566], zoom=12  # [longitude, latitude] - Paris\n)\n\n# Add a custom tile layer\nmulti_layer_map.add_tile_layer(\n    \"https://stamen-tiles-{a-c}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\",\n    attribution=\"Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\",\n    layer_id=\"watercolor\",\n)\n\nmulti_layer_map\n</pre> # Create a map with multiple tile layers multi_layer_map = anymap.OpenLayersMap(     center=[2.3522, 48.8566], zoom=12  # [longitude, latitude] - Paris )  # Add a custom tile layer multi_layer_map.add_tile_layer(     \"https://stamen-tiles-{a-c}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\",     attribution=\"Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\",     layer_id=\"watercolor\", )  multi_layer_map Out[14]: In\u00a0[15]: Copied! <pre># Create a map with a different projection\nprojection_map = anymap.OpenLayersMap(\n    center=[0, 0],  # [longitude, latitude]\n    zoom=2,\n    projection=\"EPSG:4326\",  # WGS84 geographic projection\n)\n\nprojection_map\n</pre> # Create a map with a different projection projection_map = anymap.OpenLayersMap(     center=[0, 0],  # [longitude, latitude]     zoom=2,     projection=\"EPSG:4326\",  # WGS84 geographic projection )  projection_map Out[15]: In\u00a0[16]: Copied! <pre># Create a map for export\nexport_map = anymap.OpenLayersMap(\n    center=[139.6503, 35.6762],  # [longitude, latitude] - Tokyo\n    zoom=10,\n    tile_layer=\"OSM\",\n)\n\n# Add some features\nexport_map.add_marker(\n    [139.6503, 35.6762], popup=\"&lt;b&gt;Tokyo&lt;/b&gt;&lt;br&gt;Capital of Japan\", tooltip=\"Tokyo\"\n)\n\nexport_map.add_circle(\n    [139.6503, 35.6762], radius=5000, color=\"red\", fillColor=\"pink\", fillOpacity=0.3\n)\n\n# Export to HTML\nhtml_content = export_map.to_html(\n    title=\"Tokyo Map - OpenLayers Example\", width=\"100%\", height=\"600px\"\n)\n\n# Save to file\nwith open(\"tokyo_openlayers_map.html\", \"w\") as f:\n    f.write(html_content)\n\nprint(\"Map exported to tokyo_openlayers_map.html\")\nexport_map\n</pre> # Create a map for export export_map = anymap.OpenLayersMap(     center=[139.6503, 35.6762],  # [longitude, latitude] - Tokyo     zoom=10,     tile_layer=\"OSM\", )  # Add some features export_map.add_marker(     [139.6503, 35.6762], popup=\"TokyoCapital of Japan\", tooltip=\"Tokyo\" )  export_map.add_circle(     [139.6503, 35.6762], radius=5000, color=\"red\", fillColor=\"pink\", fillOpacity=0.3 )  # Export to HTML html_content = export_map.to_html(     title=\"Tokyo Map - OpenLayers Example\", width=\"100%\", height=\"600px\" )  # Save to file with open(\"tokyo_openlayers_map.html\", \"w\") as f:     f.write(html_content)  print(\"Map exported to tokyo_openlayers_map.html\") export_map <pre>Map exported to tokyo_openlayers_map.html\n</pre> Out[16]: In\u00a0[17]: Copied! <pre># Create a map for layer management\nlayer_map = anymap.OpenLayersMap(\n    center=[13.4050, 52.5200], zoom=11  # [longitude, latitude] - Berlin\n)\n\n# Add several layers\nmarker_id = layer_map.add_marker(\n    [13.4050, 52.5200], popup=\"Berlin\", tooltip=\"German Capital\"\n)\n\ncircle_id = layer_map.add_circle(\n    [13.4050, 52.5200],\n    radius=3000,\n    color=\"blue\",\n    fillColor=\"lightblue\",\n    fillOpacity=0.2,\n)\n\nprint(f\"Added marker with ID: {marker_id}\")\nprint(f\"Added circle with ID: {circle_id}\")\n\nlayer_map\n</pre> # Create a map for layer management layer_map = anymap.OpenLayersMap(     center=[13.4050, 52.5200], zoom=11  # [longitude, latitude] - Berlin )  # Add several layers marker_id = layer_map.add_marker(     [13.4050, 52.5200], popup=\"Berlin\", tooltip=\"German Capital\" )  circle_id = layer_map.add_circle(     [13.4050, 52.5200],     radius=3000,     color=\"blue\",     fillColor=\"lightblue\",     fillOpacity=0.2, )  print(f\"Added marker with ID: {marker_id}\") print(f\"Added circle with ID: {circle_id}\")  layer_map <pre>Added marker with ID: marker_0\nAdded circle with ID: circle_1\n</pre> Out[17]: In\u00a0[18]: Copied! <pre># Get current layers\nlayers = layer_map.get_layers()\nprint(\"Current layers:\")\nfor layer_id, layer_config in layers.items():\n    print(f\"  {layer_id}: {layer_config['type']}\")\n</pre> # Get current layers layers = layer_map.get_layers() print(\"Current layers:\") for layer_id, layer_config in layers.items():     print(f\"  {layer_id}: {layer_config['type']}\") <pre>Current layers:\n  marker_0: marker\n  circle_1: circle\n</pre> In\u00a0[19]: Copied! <pre># Remove a layer\nlayer_map.remove_layer(circle_id)\nprint(f\"Removed circle layer: {circle_id}\")\n</pre> # Remove a layer layer_map.remove_layer(circle_id) print(f\"Removed circle layer: {circle_id}\") <pre>Removed circle layer: circle_1\n</pre> In\u00a0[20]: Copied! <pre># Clear all layers\nlayer_map.clear_layers()\nprint(\"All layers cleared\")\n</pre> # Clear all layers layer_map.clear_layers() print(\"All layers cleared\") <pre>All layers cleared\n</pre>"},{"location":"examples/openlayers_example/#openlayers-map-examples","title":"OpenLayers Map Examples\u00b6","text":"<p>This notebook demonstrates how to use the OpenLayersMap widget from the anymap package.</p>"},{"location":"examples/openlayers_example/#installation","title":"Installation\u00b6","text":"<p>First, make sure you have the anymap package installed:</p> <pre>pip install anymap\n</pre>"},{"location":"examples/openlayers_example/#basic-openlayers-map","title":"Basic OpenLayers Map\u00b6","text":"<p>Create a basic OpenLayers map with default settings. Note that OpenLayers uses [longitude, latitude] coordinate order.</p>"},{"location":"examples/openlayers_example/#different-tile-layers","title":"Different Tile Layers\u00b6","text":"<p>OpenLayers supports various tile layer providers:</p>"},{"location":"examples/openlayers_example/#adding-markers","title":"Adding Markers\u00b6","text":"<p>Add markers to your map with popups and tooltips:</p>"},{"location":"examples/openlayers_example/#adding-shapes","title":"Adding Shapes\u00b6","text":"<p>Add various shapes like circles, polygons, and line strings:</p>"},{"location":"examples/openlayers_example/#geojson-data","title":"GeoJSON Data\u00b6","text":"<p>Load and display GeoJSON data:</p>"},{"location":"examples/openlayers_example/#map-controls-and-interactions","title":"Map Controls and Interactions\u00b6","text":"<p>Demonstrate various map control methods:</p>"},{"location":"examples/openlayers_example/#vector-layers","title":"Vector Layers\u00b6","text":"<p>Create vector layers with custom features:</p>"},{"location":"examples/openlayers_example/#adding-multiple-tile-layers","title":"Adding Multiple Tile Layers\u00b6","text":"<p>You can add multiple tile layers to the same map:</p>"},{"location":"examples/openlayers_example/#projections","title":"Projections\u00b6","text":"<p>OpenLayers supports different projections:</p>"},{"location":"examples/openlayers_example/#exporting-to-html","title":"Exporting to HTML\u00b6","text":"<p>Export your map to a standalone HTML file:</p>"},{"location":"examples/openlayers_example/#layer-management","title":"Layer Management\u00b6","text":"<p>Demonstrate layer management capabilities:</p>"},{"location":"examples/openlayers_example/#openlayers-vs-other-libraries","title":"OpenLayers vs Other Libraries\u00b6","text":"<p>Key differences when using OpenLayers:</p> <ol> <li>Coordinate Order: OpenLayers uses [longitude, latitude] (x, y) order, unlike Leaflet which uses [latitude, longitude]</li> <li>Projections: Built-in support for multiple coordinate systems and projections</li> <li>Vector Layers: Powerful vector layer capabilities with custom styling</li> <li>Performance: Optimized for large datasets and complex geometries</li> <li>Flexibility: Highly modular and customizable architecture</li> </ol>"},{"location":"examples/openlayers_example/#conclusion","title":"Conclusion\u00b6","text":"<p>This notebook demonstrated the key features of the OpenLayersMap widget:</p> <ol> <li>Basic map creation with different tile layers</li> <li>Adding markers with popups and tooltips</li> <li>Drawing shapes (circles, polygons, line strings)</li> <li>Loading GeoJSON data</li> <li>Vector layers with custom features</li> <li>Map controls (fly to, set center/zoom, fit extent)</li> <li>Layer management (add, remove, clear)</li> <li>Projection support for different coordinate systems</li> <li>HTML export for sharing standalone maps</li> </ol> <p>The OpenLayersMap widget provides a powerful, flexible mapping solution that integrates seamlessly with Jupyter notebooks and supports OpenLayers' advanced geospatial capabilities.</p>"},{"location":"examples/pmtiles_example/","title":"Pmtiles example","text":"In\u00a0[1]: Copied! <pre># Import required modules\nfrom anymap import MapLibreMap\nimport json\n\nprint(\"AnyMap loaded successfully!\")\nprint(\"PMTiles support is built into the MapLibre implementation.\")\n</pre> # Import required modules from anymap import MapLibreMap import json  print(\"AnyMap loaded successfully!\") print(\"PMTiles support is built into the MapLibre implementation.\") <pre>AnyMap loaded successfully!\nPMTiles support is built into the MapLibre implementation.\n</pre> In\u00a0[2]: Copied! <pre># Create a map centered on Florence, Italy\nm = MapLibreMap(\n    center=[43.77, 11.25],  # Florence coordinates [lat, lng]\n    zoom=12,\n    height=\"600px\",\n    width=\"100%\",\n)\n\n# Add PMTiles data - this will use default styling\npmtiles_url = \"https://pmtiles.io/protomaps(vector)ODbL_firenze.pmtiles\"\nm.add_pmtiles(pmtiles_url)\n\nprint(f\"Added PMTiles data from: {pmtiles_url}\")\nprint(\"Default layers created: landuse, roads, buildings, water\")\nm\n</pre> # Create a map centered on Florence, Italy m = MapLibreMap(     center=[43.77, 11.25],  # Florence coordinates [lat, lng]     zoom=12,     height=\"600px\",     width=\"100%\", )  # Add PMTiles data - this will use default styling pmtiles_url = \"https://pmtiles.io/protomaps(vector)ODbL_firenze.pmtiles\" m.add_pmtiles(pmtiles_url)  print(f\"Added PMTiles data from: {pmtiles_url}\") print(\"Default layers created: landuse, roads, buildings, water\") m <pre>Added PMTiles data from: https://pmtiles.io/protomaps(vector)ODbL_firenze.pmtiles\nDefault layers created: landuse, roads, buildings, water\n</pre> Out[2]: In\u00a0[3]: Copied! <pre># Create a new map for custom styling\nm2 = MapLibreMap(\n    center=[43.77, 11.25],\n    zoom=13,\n    height=\"600px\",\n    style=\"positron\",  # Use a light base style\n)\n\n# Define custom layers with specific styling\ncustom_layers = [\n    {\n        \"id\": \"florence_buildings\",\n        \"source\": \"florence_pmtiles_source\",\n        \"source-layer\": \"landuse\",  # Using landuse layer from the PMTiles\n        \"type\": \"fill\",\n        \"paint\": {\"fill-color\": \"#8B4513\", \"fill-opacity\": 0.6},  # Brown color\n    },\n    {\n        \"id\": \"florence_roads\",\n        \"source\": \"florence_pmtiles_source\",\n        \"source-layer\": \"roads\",\n        \"type\": \"line\",\n        \"paint\": {\n            \"line-color\": \"#FF6B35\",  # Orange color\n            \"line-width\": [\"interpolate\", [\"linear\"], [\"zoom\"], 10, 1, 15, 3],\n        },\n    },\n    {\n        \"id\": \"florence_mask\",\n        \"source\": \"florence_pmtiles_source\",\n        \"source-layer\": \"mask\",\n        \"type\": \"fill\",\n        \"paint\": {\"fill-color\": \"rgba(255, 255, 255, 0.1)\"},\n    },\n]\n\n# Add PMTiles with custom styling\nm2.add_pmtiles(\n    pmtiles_url, layer_id=\"florence_pmtiles\", layers=custom_layers, opacity=0.8\n)\n\nprint(\"Added PMTiles with custom layer styling\")\nprint(\"Custom layers:\", [layer[\"id\"] for layer in custom_layers])\nm2\n</pre> # Create a new map for custom styling m2 = MapLibreMap(     center=[43.77, 11.25],     zoom=13,     height=\"600px\",     style=\"positron\",  # Use a light base style )  # Define custom layers with specific styling custom_layers = [     {         \"id\": \"florence_buildings\",         \"source\": \"florence_pmtiles_source\",         \"source-layer\": \"landuse\",  # Using landuse layer from the PMTiles         \"type\": \"fill\",         \"paint\": {\"fill-color\": \"#8B4513\", \"fill-opacity\": 0.6},  # Brown color     },     {         \"id\": \"florence_roads\",         \"source\": \"florence_pmtiles_source\",         \"source-layer\": \"roads\",         \"type\": \"line\",         \"paint\": {             \"line-color\": \"#FF6B35\",  # Orange color             \"line-width\": [\"interpolate\", [\"linear\"], [\"zoom\"], 10, 1, 15, 3],         },     },     {         \"id\": \"florence_mask\",         \"source\": \"florence_pmtiles_source\",         \"source-layer\": \"mask\",         \"type\": \"fill\",         \"paint\": {\"fill-color\": \"rgba(255, 255, 255, 0.1)\"},     }, ]  # Add PMTiles with custom styling m2.add_pmtiles(     pmtiles_url, layer_id=\"florence_pmtiles\", layers=custom_layers, opacity=0.8 )  print(\"Added PMTiles with custom layer styling\") print(\"Custom layers:\", [layer[\"id\"] for layer in custom_layers]) m2 <pre>Added PMTiles with custom layer styling\nCustom layers: ['florence_buildings', 'florence_roads', 'florence_mask']\n</pre> Out[3]: In\u00a0[4]: Copied! <pre># Create a map for multiple PMTiles demonstration\nm3 = MapLibreMap(center=[43.77, 11.25], zoom=11, height=\"600px\", style=\"dark-matter\")\n\n# Add the first PMTiles source with roads emphasized\nroads_layers = [\n    {\n        \"id\": \"main_roads\",\n        \"source\": \"pmtiles_roads_source\",\n        \"source-layer\": \"roads\",\n        \"type\": \"line\",\n        \"paint\": {\n            \"line-color\": \"#FFD700\",  # Gold color\n            \"line-width\": 2,\n            \"line-opacity\": 0.8,\n        },\n    }\n]\n\nm3.add_pmtiles(pmtiles_url, layer_id=\"pmtiles_roads\", layers=roads_layers)\n\n# Add the same PMTiles source again with different styling for buildings\nbuilding_layers = [\n    {\n        \"id\": \"landuse_areas\",\n        \"source\": \"pmtiles_buildings_source\",\n        \"source-layer\": \"landuse\",\n        \"type\": \"fill\",\n        \"paint\": {\"fill-color\": \"#32CD32\", \"fill-opacity\": 0.4},  # Lime green\n    }\n]\n\nm3.add_pmtiles(pmtiles_url, layer_id=\"pmtiles_buildings\", layers=building_layers)\n\nprint(\"Added multiple PMTiles layers with different styling\")\nprint(\"Gold roads and green landuse areas should be visible\")\nm3\n</pre> # Create a map for multiple PMTiles demonstration m3 = MapLibreMap(center=[43.77, 11.25], zoom=11, height=\"600px\", style=\"dark-matter\")  # Add the first PMTiles source with roads emphasized roads_layers = [     {         \"id\": \"main_roads\",         \"source\": \"pmtiles_roads_source\",         \"source-layer\": \"roads\",         \"type\": \"line\",         \"paint\": {             \"line-color\": \"#FFD700\",  # Gold color             \"line-width\": 2,             \"line-opacity\": 0.8,         },     } ]  m3.add_pmtiles(pmtiles_url, layer_id=\"pmtiles_roads\", layers=roads_layers)  # Add the same PMTiles source again with different styling for buildings building_layers = [     {         \"id\": \"landuse_areas\",         \"source\": \"pmtiles_buildings_source\",         \"source-layer\": \"landuse\",         \"type\": \"fill\",         \"paint\": {\"fill-color\": \"#32CD32\", \"fill-opacity\": 0.4},  # Lime green     } ]  m3.add_pmtiles(pmtiles_url, layer_id=\"pmtiles_buildings\", layers=building_layers)  print(\"Added multiple PMTiles layers with different styling\") print(\"Gold roads and green landuse areas should be visible\") m3 <pre>Added multiple PMTiles layers with different styling\nGold roads and green landuse areas should be visible\n</pre> Out[4]: In\u00a0[5]: Copied! <pre># Check current layers\nprint(\"Current layers in the map:\")\nfor layer_id in m3.layer_dict.keys():\n    layer_info = m3.layer_dict[layer_id]\n    print(\n        f\"  - {layer_id}: visible={layer_info['visible']}, opacity={layer_info['opacity']}\"\n    )\n</pre> # Check current layers print(\"Current layers in the map:\") for layer_id in m3.layer_dict.keys():     layer_info = m3.layer_dict[layer_id]     print(         f\"  - {layer_id}: visible={layer_info['visible']}, opacity={layer_info['opacity']}\"     ) <pre>Current layers in the map:\n  - Background: visible=True, opacity=1.0\n  - main_roads: visible=True, opacity=1.0\n  - landuse_areas: visible=True, opacity=1.0\n</pre> In\u00a0[6]: Copied! <pre># Adjust layer properties\nm3.set_opacity(\"main_roads\", 0.5)\nm3.set_visibility(\"landuse_areas\", False)\n\nprint(\"Modified layer properties:\")\nprint(\"- Reduced road opacity to 0.5\")\nprint(\"- Hidden landuse areas\")\nm3\n</pre> # Adjust layer properties m3.set_opacity(\"main_roads\", 0.5) m3.set_visibility(\"landuse_areas\", False)  print(\"Modified layer properties:\") print(\"- Reduced road opacity to 0.5\") print(\"- Hidden landuse areas\") m3 <pre>Modified layer properties:\n- Reduced road opacity to 0.5\n- Hidden landuse areas\n</pre> Out[6]: In\u00a0[7]: Copied! <pre># Show landuse areas again\nm3.set_visibility(\"landuse_areas\", True)\nprint(\"Landuse areas are now visible again\")\nm3\n</pre> # Show landuse areas again m3.set_visibility(\"landuse_areas\", True) print(\"Landuse areas are now visible again\") m3 <pre>Landuse areas are now visible again\n</pre> Out[7]: In\u00a0[8]: Copied! <pre># Create a final map for HTML export\nexport_map = MapLibreMap(\n    center=[43.77, 11.25], zoom=13, height=\"600px\", style=\"voyager\"\n)\n\n# Add PMTiles with default styling\nexport_map.add_pmtiles(pmtiles_url, layer_id=\"florence_export\")\n\n# Export to HTML\nexport_map.to_html(\"florence_pmtiles_map.html\", title=\"Florence PMTiles Demo\")\n\nprint(\"Map exported to 'florence_pmtiles_map.html'\")\nprint(\"The HTML file includes PMTiles support and can be opened in any browser\")\nexport_map\n</pre> # Create a final map for HTML export export_map = MapLibreMap(     center=[43.77, 11.25], zoom=13, height=\"600px\", style=\"voyager\" )  # Add PMTiles with default styling export_map.add_pmtiles(pmtiles_url, layer_id=\"florence_export\")  # Export to HTML export_map.to_html(\"florence_pmtiles_map.html\", title=\"Florence PMTiles Demo\")  print(\"Map exported to 'florence_pmtiles_map.html'\") print(\"The HTML file includes PMTiles support and can be opened in any browser\") export_map <pre>Map exported to 'florence_pmtiles_map.html'\nThe HTML file includes PMTiles support and can be opened in any browser\n</pre> Out[8]: In\u00a0[9]: Copied! <pre># Create an advanced styled map\nadvanced_map = MapLibreMap(\n    center=[43.77, 11.25], zoom=14, height=\"600px\", style=\"positron\"\n)\n\n# Advanced layer configuration with expressions and filters\nadvanced_layers = [\n    {\n        \"id\": \"florence_roads_by_type\",\n        \"source\": \"florence_advanced_source\",\n        \"source-layer\": \"roads\",\n        \"type\": \"line\",\n        \"paint\": {\n            \"line-color\": [\n                \"case\",\n                [\"has\", \"highway\"],\n                \"#FF0000\",  # Red for highways\n                \"#666666\",  # Gray for other roads\n            ],\n            \"line-width\": [\"interpolate\", [\"linear\"], [\"zoom\"], 10, 1, 16, 4],\n            \"line-opacity\": 0.8,\n        },\n    },\n    {\n        \"id\": \"florence_landuse_styled\",\n        \"source\": \"florence_advanced_source\",\n        \"source-layer\": \"landuse\",\n        \"type\": \"fill\",\n        \"paint\": {\n            \"fill-color\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                10,\n                \"rgba(139, 69, 19, 0.3)\",\n                15,\n                \"rgba(139, 69, 19, 0.6)\",\n            ],\n            \"fill-outline-color\": \"rgba(139, 69, 19, 0.8)\",\n        },\n    },\n]\n\nadvanced_map.add_pmtiles(\n    pmtiles_url, layer_id=\"florence_advanced\", layers=advanced_layers\n)\n\nprint(\"Created advanced PMTiles map with:\")\nprint(\"- Color-coded roads (red for highways, gray for others)\")\nprint(\"- Zoom-dependent styling\")\nprint(\"- Outlined landuse areas\")\nadvanced_map\n</pre> # Create an advanced styled map advanced_map = MapLibreMap(     center=[43.77, 11.25], zoom=14, height=\"600px\", style=\"positron\" )  # Advanced layer configuration with expressions and filters advanced_layers = [     {         \"id\": \"florence_roads_by_type\",         \"source\": \"florence_advanced_source\",         \"source-layer\": \"roads\",         \"type\": \"line\",         \"paint\": {             \"line-color\": [                 \"case\",                 [\"has\", \"highway\"],                 \"#FF0000\",  # Red for highways                 \"#666666\",  # Gray for other roads             ],             \"line-width\": [\"interpolate\", [\"linear\"], [\"zoom\"], 10, 1, 16, 4],             \"line-opacity\": 0.8,         },     },     {         \"id\": \"florence_landuse_styled\",         \"source\": \"florence_advanced_source\",         \"source-layer\": \"landuse\",         \"type\": \"fill\",         \"paint\": {             \"fill-color\": [                 \"interpolate\",                 [\"linear\"],                 [\"zoom\"],                 10,                 \"rgba(139, 69, 19, 0.3)\",                 15,                 \"rgba(139, 69, 19, 0.6)\",             ],             \"fill-outline-color\": \"rgba(139, 69, 19, 0.8)\",         },     }, ]  advanced_map.add_pmtiles(     pmtiles_url, layer_id=\"florence_advanced\", layers=advanced_layers )  print(\"Created advanced PMTiles map with:\") print(\"- Color-coded roads (red for highways, gray for others)\") print(\"- Zoom-dependent styling\") print(\"- Outlined landuse areas\") advanced_map <pre>Created advanced PMTiles map with:\n- Color-coded roads (red for highways, gray for others)\n- Zoom-dependent styling\n- Outlined landuse areas\n</pre> Out[9]:"},{"location":"examples/pmtiles_example/#pmtiles-support-in-anymap","title":"PMTiles Support in AnyMap\u00b6","text":"<p>This notebook demonstrates how to use PMTiles (Protomaps Tiles) with the MapLibre implementation in AnyMap. PMTiles is a single-file archive format for tiled data that enables efficient serving of vector tiles without a tile server.</p>"},{"location":"examples/pmtiles_example/#what-is-pmtiles","title":"What is PMTiles?\u00b6","text":"<p>PMTiles is a cloud-optimized format for storing map tiles in a single file. It allows you to:</p> <ul> <li>Serve vector tiles directly from cloud storage (S3, CDN, etc.)</li> <li>Eliminate the need for a tile server</li> <li>Reduce costs and complexity for map deployments</li> <li>Enable offline mapping applications</li> </ul> <p>Learn more at protomaps.com</p>"},{"location":"examples/pmtiles_example/#example-1-basic-pmtiles-usage","title":"Example 1: Basic PMTiles Usage\u00b6","text":"<p>Let's start with a simple example using a PMTiles file from the Protomaps demo. This contains vector data for Florence, Italy.</p>"},{"location":"examples/pmtiles_example/#example-2-custom-layer-styling","title":"Example 2: Custom Layer Styling\u00b6","text":"<p>PMTiles often contain multiple data layers. You can customize how these layers are styled by providing your own layer configurations.</p>"},{"location":"examples/pmtiles_example/#example-3-multiple-pmtiles-sources","title":"Example 3: Multiple PMTiles Sources\u00b6","text":"<p>You can add multiple PMTiles sources to the same map, each with different styling and data.</p>"},{"location":"examples/pmtiles_example/#example-4-layer-management-with-pmtiles","title":"Example 4: Layer Management with PMTiles\u00b6","text":"<p>PMTiles layers can be managed like any other layers in AnyMap - you can adjust opacity, visibility, and remove them.</p>"},{"location":"examples/pmtiles_example/#example-5-export-pmtiles-map-to-html","title":"Example 5: Export PMTiles Map to HTML\u00b6","text":"<p>Maps with PMTiles can be exported to standalone HTML files for sharing or deployment.</p>"},{"location":"examples/pmtiles_example/#example-6-advanced-pmtiles-configuration","title":"Example 6: Advanced PMTiles Configuration\u00b6","text":"<p>For more advanced use cases, you can create complex layer configurations that take advantage of PMTiles data structure.</p>"},{"location":"examples/pmtiles_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the PMTiles functionality in AnyMap:</p>"},{"location":"examples/pmtiles_example/#key-features-covered","title":"\u2705 Key Features Covered:\u00b6","text":"<ol> <li>Basic PMTiles Usage: Simple addition of PMTiles data with default styling</li> <li>Custom Layer Styling: Creating custom layer configurations for specific visual effects</li> <li>Multiple PMTiles Sources: Adding multiple PMTiles sources to the same map</li> <li>Layer Management: Controlling opacity, visibility, and other layer properties</li> <li>HTML Export: Exporting PMTiles maps to standalone HTML files</li> <li>Advanced Configuration: Using MapLibre expressions for complex styling</li> </ol>"},{"location":"examples/pmtiles_example/#method-signature","title":"\ud83d\udd27 Method Signature:\u00b6","text":"<pre>map.add_pmtiles(\n    pmtiles_url: str,                    # URL to the PMTiles file\n    layer_id: Optional[str] = None,      # Custom layer ID (auto-generated if None)\n    layers: Optional[List[Dict]] = None, # Custom layer configurations\n    opacity: Optional[float] = 1.0,      # Layer opacity (0.0 - 1.0)\n    visible: Optional[bool] = True,      # Initial visibility\n    before_id: Optional[str] = None      # Insert before this layer\n)\n</pre>"},{"location":"examples/pmtiles_example/#pmtiles-benefits","title":"\ud83c\udf10 PMTiles Benefits:\u00b6","text":"<ul> <li>No tile server required: Serve directly from cloud storage</li> <li>Cost effective: Reduce infrastructure costs</li> <li>Fast loading: Optimized for web delivery</li> <li>Offline capable: Works without internet connectivity</li> <li>Single file format: Easy to manage and deploy</li> </ul>"},{"location":"examples/pmtiles_example/#resources","title":"\ud83d\udcda Resources:\u00b6","text":"<ul> <li>PMTiles Specification</li> <li>Protomaps.com</li> <li>MapLibre GL JS Documentation</li> </ul> <p>PMTiles integration makes it easy to serve vector map data efficiently without complex server infrastructure!</p>"},{"location":"examples/potree_example/","title":"Potree example","text":"In\u00a0[1]: Copied! <pre>import os\nfrom anymap import PotreeMap\n\nprint(\"Potree backend loaded successfully!\")\n</pre> import os from anymap import PotreeMap  print(\"Potree backend loaded successfully!\") <pre>Potree backend loaded successfully!\n</pre> In\u00a0[2]: Copied! <pre># Create a basic Potree viewer\nviewer = PotreeMap(\n    width=\"100%\",\n    height=\"600px\",\n    background_color=\"#1a1a1a\",  # Dark background\n    point_size=1.5,\n    point_size_type=\"adaptive\",  # Adaptive point sizing\n    point_shape=\"square\",\n    camera_position=[0, 0, 50],\n    camera_target=[0, 0, 0],\n    fov=60,\n    edl_enabled=True,  # Eye Dome Lighting for better depth perception\n    show_grid=True,\n    grid_size=10,\n    grid_color=\"#444444\",\n)\n\nviewer\n</pre> # Create a basic Potree viewer viewer = PotreeMap(     width=\"100%\",     height=\"600px\",     background_color=\"#1a1a1a\",  # Dark background     point_size=1.5,     point_size_type=\"adaptive\",  # Adaptive point sizing     point_shape=\"square\",     camera_position=[0, 0, 50],     camera_target=[0, 0, 0],     fov=60,     edl_enabled=True,  # Eye Dome Lighting for better depth perception     show_grid=True,     grid_size=10,     grid_color=\"#444444\", )  viewer Out[2]: In\u00a0[3]: Copied! <pre># Example of loading a point cloud (requires actual converted data)\n# Replace with the URL to your Potree-converted point cloud metadata.json\n# viewer.load_point_cloud(\n#     \"https://example.com/pointclouds/your_pointcloud/metadata.json\",\n#     \"My Point Cloud\"\n# )\n\nprint(\"To load actual point cloud data, you need a Potree-converted dataset.\")\nprint(\"Point the load_point_cloud method to your metadata.json file.\")\n</pre> # Example of loading a point cloud (requires actual converted data) # Replace with the URL to your Potree-converted point cloud metadata.json # viewer.load_point_cloud( #     \"https://example.com/pointclouds/your_pointcloud/metadata.json\", #     \"My Point Cloud\" # )  print(\"To load actual point cloud data, you need a Potree-converted dataset.\") print(\"Point the load_point_cloud method to your metadata.json file.\") <pre>To load actual point cloud data, you need a Potree-converted dataset.\nPoint the load_point_cloud method to your metadata.json file.\n</pre> In\u00a0[4]: Copied! <pre># Adjust point size\nviewer.set_point_size(2.0)\nprint(\"Point size set to 2.0\")\n\n# Change point size type\nviewer.set_point_size_type(\"fixed\")  # Options: \"fixed\", \"adaptive\", \"attenuation\"\nprint(\"Point size type set to fixed\")\n\n# Change point shape\nviewer.set_point_shape(\"circle\")  # Options: \"square\", \"circle\"\nprint(\"Point shape set to circle\")\n</pre> # Adjust point size viewer.set_point_size(2.0) print(\"Point size set to 2.0\")  # Change point size type viewer.set_point_size_type(\"fixed\")  # Options: \"fixed\", \"adaptive\", \"attenuation\" print(\"Point size type set to fixed\")  # Change point shape viewer.set_point_shape(\"circle\")  # Options: \"square\", \"circle\" print(\"Point shape set to circle\") <pre>Point size set to 2.0\nPoint size type set to fixed\nPoint shape set to circle\n</pre> In\u00a0[5]: Copied! <pre># Set camera position and target\nviewer.set_camera_position(position=[20, 20, 30], target=[0, 0, 0])\nprint(\"Camera position updated\")\n\n# Adjust field of view\nviewer.set_fov(75)\nprint(\"Field of view set to 75 degrees\")\n\n# Set clipping distances\nviewer.set_clip_distances(near=0.1, far=1000)\nprint(\"Clipping distances updated\")\n</pre> # Set camera position and target viewer.set_camera_position(position=[20, 20, 30], target=[0, 0, 0]) print(\"Camera position updated\")  # Adjust field of view viewer.set_fov(75) print(\"Field of view set to 75 degrees\")  # Set clipping distances viewer.set_clip_distances(near=0.1, far=1000) print(\"Clipping distances updated\") <pre>Camera position updated\nField of view set to 75 degrees\nClipping distances updated\n</pre> In\u00a0[6]: Copied! <pre># Configure Eye Dome Lighting (EDL) for better depth perception\nviewer.enable_edl(True)\nviewer.set_edl_settings(radius=1.5, strength=1.2)\nprint(\"Eye Dome Lighting configured\")\n\n# Show coordinate grid\nviewer.show_coordinate_grid(show=True, size=20, color=\"#666666\")\nprint(\"Coordinate grid enabled\")\n\n# Change background color\nviewer.set_background_color(\"#2a2a2a\")\nprint(\"Background color changed\")\n</pre> # Configure Eye Dome Lighting (EDL) for better depth perception viewer.enable_edl(True) viewer.set_edl_settings(radius=1.5, strength=1.2) print(\"Eye Dome Lighting configured\")  # Show coordinate grid viewer.show_coordinate_grid(show=True, size=20, color=\"#666666\") print(\"Coordinate grid enabled\")  # Change background color viewer.set_background_color(\"#2a2a2a\") print(\"Background color changed\") <pre>Eye Dome Lighting configured\nCoordinate grid enabled\nBackground color changed\n</pre> In\u00a0[7]: Copied! <pre># Set rendering quality\nviewer.set_quality(\"high\")  # Options: \"low\", \"medium\", \"high\"\nprint(\"Rendering quality set to high\")\n\n# For large datasets, you might want to use \"medium\" or \"low\" for better performance\n</pre> # Set rendering quality viewer.set_quality(\"high\")  # Options: \"low\", \"medium\", \"high\" print(\"Rendering quality set to high\")  # For large datasets, you might want to use \"medium\" or \"low\" for better performance <pre>Rendering quality set to high\n</pre> In\u00a0[8]: Copied! <pre># Example of loading multiple point clouds\npoint_clouds = [\n    {\n        \"url\": \"https://example.com/pointclouds/scan1/metadata.json\",\n        \"name\": \"Building Scan\",\n    },\n    {\n        \"url\": \"https://example.com/pointclouds/scan2/metadata.json\",\n        \"name\": \"Terrain Scan\",\n    },\n]\n\n# viewer.load_multiple_point_clouds(point_clouds)\nprint(\"Multiple point clouds can be loaded simultaneously\")\n</pre> # Example of loading multiple point clouds point_clouds = [     {         \"url\": \"https://example.com/pointclouds/scan1/metadata.json\",         \"name\": \"Building Scan\",     },     {         \"url\": \"https://example.com/pointclouds/scan2/metadata.json\",         \"name\": \"Terrain Scan\",     }, ]  # viewer.load_multiple_point_clouds(point_clouds) print(\"Multiple point clouds can be loaded simultaneously\") <pre>Multiple point clouds can be loaded simultaneously\n</pre> In\u00a0[9]: Copied! <pre># Filter points by elevation\nviewer.filter_by_elevation(min_elevation=0, max_elevation=50)\nprint(\"Elevation filter applied (0-50 units)\")\n\n# Filter by classification (LAS classification codes)\n# Common classifications: 1=Unclassified, 2=Ground, 3=Low Vegetation, 4=Medium Vegetation, 5=High Vegetation, 6=Building\nclassifications = {\n    1: True,  # Show unclassified\n    2: True,  # Show ground\n    3: False,  # Hide low vegetation\n    4: False,  # Hide medium vegetation\n    5: False,  # Hide high vegetation\n    6: True,  # Show buildings\n}\nviewer.set_classification_visibility(classifications)\nprint(\"Classification filter applied\")\n\n# Clear all filters\n# viewer.clear_filters()\n# print(\"All filters cleared\")\n</pre> # Filter points by elevation viewer.filter_by_elevation(min_elevation=0, max_elevation=50) print(\"Elevation filter applied (0-50 units)\")  # Filter by classification (LAS classification codes) # Common classifications: 1=Unclassified, 2=Ground, 3=Low Vegetation, 4=Medium Vegetation, 5=High Vegetation, 6=Building classifications = {     1: True,  # Show unclassified     2: True,  # Show ground     3: False,  # Hide low vegetation     4: False,  # Hide medium vegetation     5: False,  # Hide high vegetation     6: True,  # Show buildings } viewer.set_classification_visibility(classifications) print(\"Classification filter applied\")  # Clear all filters # viewer.clear_filters() # print(\"All filters cleared\") <pre>Elevation filter applied (0-50 units)\nClassification filter applied\n</pre> In\u00a0[10]: Copied! <pre># Add distance measurement tool\nviewer.add_measurement(\"distance\")\nprint(\"Distance measurement tool added\")\n\n# Add area measurement tool\nviewer.add_measurement(\"area\")\nprint(\"Area measurement tool added\")\n\n# Add volume measurement tool\nviewer.add_measurement(\"volume\")\nprint(\"Volume measurement tool added\")\n\n# Clear all measurements\n# viewer.clear_measurements()\n# print(\"All measurements cleared\")\n</pre> # Add distance measurement tool viewer.add_measurement(\"distance\") print(\"Distance measurement tool added\")  # Add area measurement tool viewer.add_measurement(\"area\") print(\"Area measurement tool added\")  # Add volume measurement tool viewer.add_measurement(\"volume\") print(\"Volume measurement tool added\")  # Clear all measurements # viewer.clear_measurements() # print(\"All measurements cleared\") <pre>Distance measurement tool added\nArea measurement tool added\nVolume measurement tool added\n</pre> In\u00a0[11]: Copied! <pre># Fit point clouds to screen\nviewer.fit_to_screen()\nprint(\"View fitted to point cloud bounds\")\n\n# Take a screenshot\nviewer.take_screenshot()\nprint(\"Screenshot captured\")\n\n# Get current camera position\ncamera_pos = viewer.get_camera_position()\ncamera_target = viewer.get_camera_target()\nprint(f\"Camera position: {camera_pos}\")\nprint(f\"Camera target: {camera_target}\")\n</pre> # Fit point clouds to screen viewer.fit_to_screen() print(\"View fitted to point cloud bounds\")  # Take a screenshot viewer.take_screenshot() print(\"Screenshot captured\")  # Get current camera position camera_pos = viewer.get_camera_position() camera_target = viewer.get_camera_target() print(f\"Camera position: {camera_pos}\") print(f\"Camera target: {camera_target}\") <pre>View fitted to point cloud bounds\nScreenshot captured\nCamera position: [20, 20, 30]\nCamera target: [0, 0, 0]\n</pre> In\u00a0[12]: Copied! <pre># Display the same viewer instance again\n# This should maintain all the settings and state from above\nviewer\n</pre> # Display the same viewer instance again # This should maintain all the settings and state from above viewer Out[12]: In\u00a0[13]: Copied! <pre># Change settings while displayed in multiple cells\nviewer.set_background_color(\"#0a0a0a\")\nviewer.set_point_size(3.0)\nviewer.set_point_shape(\"square\")\n\nprint(\"Settings changed! Updates should appear on all viewer instances above.\")\n</pre> # Change settings while displayed in multiple cells viewer.set_background_color(\"#0a0a0a\") viewer.set_point_size(3.0) viewer.set_point_shape(\"square\")  print(\"Settings changed! Updates should appear on all viewer instances above.\") <pre>Settings changed! Updates should appear on all viewer instances above.\n</pre> In\u00a0[14]: Copied! <pre># Create a second, independent viewer with different settings\nviewer2 = PotreeMap(\n    width=\"100%\",\n    height=\"500px\",\n    background_color=\"#003366\",  # Blue background\n    point_size=1.0,\n    point_size_type=\"attenuation\",\n    point_shape=\"circle\",\n    camera_position=[10, 10, 20],\n    edl_enabled=False,\n    show_grid=False,\n)\n\n# Load different point cloud data (if available)\n# viewer2.load_point_cloud(\n#     \"https://example.com/pointclouds/another_scan/metadata.json\",\n#     \"Another Point Cloud\"\n# )\n\nviewer2\n</pre> # Create a second, independent viewer with different settings viewer2 = PotreeMap(     width=\"100%\",     height=\"500px\",     background_color=\"#003366\",  # Blue background     point_size=1.0,     point_size_type=\"attenuation\",     point_shape=\"circle\",     camera_position=[10, 10, 20],     edl_enabled=False,     show_grid=False, )  # Load different point cloud data (if available) # viewer2.load_point_cloud( #     \"https://example.com/pointclouds/another_scan/metadata.json\", #     \"Another Point Cloud\" # )  viewer2 Out[14]: In\u00a0[15]: Copied! <pre># Clear all point clouds from the first viewer\nviewer.clear_point_clouds()\nprint(\"Point clouds cleared from first viewer\")\n\n# Clear measurements\nviewer.clear_measurements()\nprint(\"Measurements cleared\")\n\n# Clear filters\nviewer.clear_filters()\nprint(\"Filters cleared\")\n</pre> # Clear all point clouds from the first viewer viewer.clear_point_clouds() print(\"Point clouds cleared from first viewer\")  # Clear measurements viewer.clear_measurements() print(\"Measurements cleared\")  # Clear filters viewer.clear_filters() print(\"Filters cleared\") <pre>Point clouds cleared from first viewer\nMeasurements cleared\nFilters cleared\n</pre>"},{"location":"examples/potree_example/#potree-point-cloud-viewer-example","title":"Potree Point Cloud Viewer Example\u00b6","text":"<p>This notebook demonstrates the capabilities of the anymap PotreeMap widget for creating interactive point cloud visualizations.</p>"},{"location":"examples/potree_example/#what-is-potree","title":"What is Potree?\u00b6","text":"<p>Potree is a free open-source WebGL based point cloud renderer for large point clouds. It's particularly useful for:</p> <ul> <li>LiDAR data visualization</li> <li>3D scanning results</li> <li>Large-scale point cloud datasets</li> <li>Archaeological documentation</li> <li>Building and infrastructure modeling</li> </ul>"},{"location":"examples/potree_example/#setup","title":"Setup\u00b6","text":"<p>First, import the PotreeMap widget from anymap:</p>"},{"location":"examples/potree_example/#basic-point-cloud-viewer","title":"Basic Point Cloud Viewer\u00b6","text":"<p>Create a basic Potree viewer. Note that you'll need a converted Potree point cloud dataset (with metadata.json) to load actual data:</p>"},{"location":"examples/potree_example/#loading-point-cloud-data","title":"Loading Point Cloud Data\u00b6","text":"<p>To load actual point cloud data, you need a Potree-converted dataset. You can convert LAS/LAZ files using PotreeConverter:</p> <pre># Example conversion command (not run in this notebook)\nPotreeConverter input.las -o output_directory --output-format LAZ\n</pre> <p>For demonstration purposes, here's how you would load a point cloud:</p>"},{"location":"examples/potree_example/#point-rendering-settings","title":"Point Rendering Settings\u00b6","text":"<p>Customize how points are rendered in the viewer:</p>"},{"location":"examples/potree_example/#camera-controls","title":"Camera Controls\u00b6","text":"<p>Control the camera position and viewing angle:</p>"},{"location":"examples/potree_example/#visual-enhancements","title":"Visual Enhancements\u00b6","text":"<p>Configure visual effects and enhancements:</p>"},{"location":"examples/potree_example/#quality-settings","title":"Quality Settings\u00b6","text":"<p>Adjust rendering quality for performance optimization:</p>"},{"location":"examples/potree_example/#multiple-point-clouds","title":"Multiple Point Clouds\u00b6","text":"<p>Load and manage multiple point cloud datasets:</p>"},{"location":"examples/potree_example/#point-cloud-filtering","title":"Point Cloud Filtering\u00b6","text":"<p>Filter points based on various criteria:</p>"},{"location":"examples/potree_example/#measurement-tools","title":"Measurement Tools\u00b6","text":"<p>Add measurement capabilities to the viewer:</p>"},{"location":"examples/potree_example/#utility-functions","title":"Utility Functions\u00b6","text":"<p>Demonstrate various utility functions:</p>"},{"location":"examples/potree_example/#multi-cell-rendering-test","title":"Multi-cell Rendering Test\u00b6","text":"<p>Test that the viewer works correctly when displayed in multiple cells:</p>"},{"location":"examples/potree_example/#creating-a-second-viewer-instance","title":"Creating a Second Viewer Instance\u00b6","text":"<p>Create a separate viewer to verify independence:</p>"},{"location":"examples/potree_example/#cleanup","title":"Cleanup\u00b6","text":"<p>Clear point clouds and reset viewers:</p>"},{"location":"examples/potree_example/#working-with-real-data","title":"Working with Real Data\u00b6","text":"<p>To work with real point cloud data in Potree:</p>"},{"location":"examples/potree_example/#1-convert-your-data","title":"1. Convert your data\u00b6","text":"<p>Use PotreeConverter to convert LAS/LAZ files:</p> <pre>PotreeConverter input.las -o output_directory --output-format LAZ\n</pre>"},{"location":"examples/potree_example/#2-host-the-data","title":"2. Host the data\u00b6","text":"<p>Upload the converted point cloud directory to a web server that supports CORS.</p>"},{"location":"examples/potree_example/#3-load-in-the-viewer","title":"3. Load in the viewer\u00b6","text":"<pre>viewer.load_point_cloud(\n    \"https://your-server.com/pointclouds/your_data/metadata.json\",\n    \"Your Point Cloud Name\"\n)\n</pre>"},{"location":"examples/potree_example/#sample-data-sources","title":"Sample Data Sources\u00b6","text":"<p>You can find sample Potree-compatible datasets at:</p> <ul> <li>Potree Examples</li> <li>OpenTopography</li> <li>3D BAG (Netherlands)</li> </ul>"},{"location":"examples/potree_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the key features of the anymap PotreeMap widget:</p> <ol> <li>Point Cloud Visualization: Interactive rendering of large point cloud datasets</li> <li>Rendering Controls: Point size, shape, and quality settings</li> <li>Camera Controls: Position, target, field of view, and clipping</li> <li>Visual Effects: Eye Dome Lighting, coordinate grid, background</li> <li>Data Management: Loading single and multiple point clouds</li> <li>Filtering: Elevation and classification-based filtering</li> <li>Measurements: Distance, area, and volume measurement tools</li> <li>Multi-cell Rendering: Persistent state across notebook cells</li> <li>Multiple Instances: Independent viewer widgets</li> </ol> <p>The PotreeMap widget provides a powerful platform for interactive point cloud visualization with the full capabilities of Potree.js in a Jupyter environment.</p>"},{"location":"examples/streetview_example/","title":"Streetview example","text":"In\u00a0[1]: Copied! <pre>from anymap import MapLibreMap\nimport os\n</pre> from anymap import MapLibreMap import os In\u00a0[2]: Copied! <pre># Create a map centered in New York City\nm = MapLibreMap(\n    center=[-74.0066, 40.7135],  # New York City coordinates\n    zoom=15,\n    height=\"600px\",\n    width=\"100%\",\n)\n\n# Add a basemap for better context\nm.add_basemap(\"OpenStreetMap.Mapnik\")\n\n# Add the Google Street View control\n# The API key will be automatically retrieved from the GOOGLE_MAPS_API_KEY environment variable\ntry:\n    m.add_google_streetview(position=\"top-left\")\n    print(\"\u2705 Street View control added successfully!\")\n    print(\"\ud83d\udccd How to use:\")\n    print(\"   1. Look for the Street View button on the map (person/peg man icon)\")\n    print(\"   2. Click and drag the pegman to show Street View coverage (blue areas)\")\n    print(\"   3. Drop the pegman on blue coverage areas to open Street View\")\n    print(\"   4. The plugin now properly initializes when the map loads\")\nexcept ValueError as e:\n    print(f\"\u274c Error: {e}\")\n    print(\"\ud83d\udca1 Please set your GOOGLE_MAPS_API_KEY environment variable\")\n\nm\n</pre> # Create a map centered in New York City m = MapLibreMap(     center=[-74.0066, 40.7135],  # New York City coordinates     zoom=15,     height=\"600px\",     width=\"100%\", )  # Add a basemap for better context m.add_basemap(\"OpenStreetMap.Mapnik\")  # Add the Google Street View control # The API key will be automatically retrieved from the GOOGLE_MAPS_API_KEY environment variable try:     m.add_google_streetview(position=\"top-left\")     print(\"\u2705 Street View control added successfully!\")     print(\"\ud83d\udccd How to use:\")     print(\"   1. Look for the Street View button on the map (person/peg man icon)\")     print(\"   2. Click and drag the pegman to show Street View coverage (blue areas)\")     print(\"   3. Drop the pegman on blue coverage areas to open Street View\")     print(\"   4. The plugin now properly initializes when the map loads\") except ValueError as e:     print(f\"\u274c Error: {e}\")     print(\"\ud83d\udca1 Please set your GOOGLE_MAPS_API_KEY environment variable\")  m <pre>\u274c Error: Google Maps API key is required. Please provide it as a parameter or set the GOOGLE_MAPS_API_KEY environment variable.\n\ud83d\udca1 Please set your GOOGLE_MAPS_API_KEY environment variable\n</pre> Out[2]:"},{"location":"examples/streetview_example/#google-street-view-example","title":"Google Street View Example\u00b6","text":"<p>This notebook demonstrates how to use the Google Street View feature in anymap's MapLibre implementation. The Street View control allows users to view street-level imagery at clicked locations on the map.</p>"},{"location":"examples/streetview_example/#setup","title":"Setup\u00b6","text":"<p>Before using the Google Street View functionality, you need to have a Google Maps API key. You can:</p> <ol> <li>Set it as an environment variable: <code>GOOGLE_MAPS_API_KEY</code></li> <li>Pass it directly to the <code>add_google_streetview()</code> method</li> <li>In Google Colab, add it to your userdata with key <code>GOOGLE_MAPS_API_KEY</code></li> </ol> <p>Note: Make sure your Google Maps API key has the Street View Static API enabled.</p>"},{"location":"examples/streetview_example/#basic-street-view-setup","title":"Basic Street View Setup\u00b6","text":"<p>Create a map centered in New York City and add the Google Street View control.</p>"},{"location":"examples/terrain_example/","title":"Terrain example","text":"In\u00a0[1]: Copied! <pre>from anymap import MapLibreMap\n</pre> from anymap import MapLibreMap In\u00a0[2]: Copied! <pre># Create a map centered on the Swiss Alps\nm = MapLibreMap(\n    center=[8.2275, 46.8182],  # Swiss Alps\n    zoom=12,\n    pitch=60,  # Tilt the map to show 3D effect\n    bearing=20,  # Rotate the map slightly\n    height=\"600px\",\n    width=\"100%\",\n)\n\n# Add a satellite basemap for better terrain visualization\nm.add_basemap(\"Esri.WorldImagery\")\n\n# Enable terrain with default settings\nm.set_terrain()\n\nm\n</pre> # Create a map centered on the Swiss Alps m = MapLibreMap(     center=[8.2275, 46.8182],  # Swiss Alps     zoom=12,     pitch=60,  # Tilt the map to show 3D effect     bearing=20,  # Rotate the map slightly     height=\"600px\",     width=\"100%\", )  # Add a satellite basemap for better terrain visualization m.add_basemap(\"Esri.WorldImagery\")  # Enable terrain with default settings m.set_terrain()  m Out[2]: In\u00a0[3]: Copied! <pre># Create a map of the Grand Canyon with enhanced terrain\nm2 = MapLibreMap(\n    center=[-112.1401, 36.0544],  # Grand Canyon\n    zoom=13,\n    pitch=70,\n    bearing=0,\n    height=\"600px\",\n    width=\"100%\",\n)\n\n# Add satellite imagery\nm2.add_basemap(\"Esri.WorldImagery\")\n\n# Enable terrain with increased exaggeration\nm2.set_terrain(exaggeration=1.5)\n\nm2\n</pre> # Create a map of the Grand Canyon with enhanced terrain m2 = MapLibreMap(     center=[-112.1401, 36.0544],  # Grand Canyon     zoom=13,     pitch=70,     bearing=0,     height=\"600px\",     width=\"100%\", )  # Add satellite imagery m2.add_basemap(\"Esri.WorldImagery\")  # Enable terrain with increased exaggeration m2.set_terrain(exaggeration=1.5)  m2 Out[3]: In\u00a0[4]: Copied! <pre># Create a map of Mount Fuji with custom terrain source\nm3 = MapLibreMap(\n    center=[138.7274, 35.3606],  # Mount Fuji\n    zoom=11,\n    pitch=50,\n    bearing=45,\n    height=\"600px\",\n    width=\"100%\",\n)\n\n# Add OpenStreetMap basemap\nm3.add_basemap(\"OpenStreetMap.Mapnik\")\n\n# Enable terrain with custom source and source ID\nm3.set_terrain(\n    source=\"https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png\",\n    exaggeration=1.2,\n    source_id=\"custom-terrain\",\n)\n\nm3\n</pre> # Create a map of Mount Fuji with custom terrain source m3 = MapLibreMap(     center=[138.7274, 35.3606],  # Mount Fuji     zoom=11,     pitch=50,     bearing=45,     height=\"600px\",     width=\"100%\", )  # Add OpenStreetMap basemap m3.add_basemap(\"OpenStreetMap.Mapnik\")  # Enable terrain with custom source and source ID m3.set_terrain(     source=\"https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png\",     exaggeration=1.2,     source_id=\"custom-terrain\", )  m3 Out[4]: In\u00a0[5]: Copied! <pre># Create a map of the Appalachian Mountains with subtle terrain\nm4 = MapLibreMap(\n    center=[-82.5515, 35.5951],  # Great Smoky Mountains\n    zoom=11,\n    pitch=45,\n    bearing=0,\n    height=\"600px\",\n    width=\"100%\",\n)\n\n# Add OpenStreetMap basemap\nm4.add_basemap(\"OpenStreetMap.Mapnik\")\n\n# Enable terrain with minimal exaggeration\nm4.set_terrain(exaggeration=0.5)\n\nm4\n</pre> # Create a map of the Appalachian Mountains with subtle terrain m4 = MapLibreMap(     center=[-82.5515, 35.5951],  # Great Smoky Mountains     zoom=11,     pitch=45,     bearing=0,     height=\"600px\",     width=\"100%\", )  # Add OpenStreetMap basemap m4.add_basemap(\"OpenStreetMap.Mapnik\")  # Enable terrain with minimal exaggeration m4.set_terrain(exaggeration=0.5)  m4 Out[5]: In\u00a0[6]: Copied! <pre># Check the terrain configuration\nprint(\"Terrain configuration:\")\nprint(f\"  Source: {m4._terrain['source'] if m4._terrain else 'None'}\")\nprint(f\"  Exaggeration: {m4._terrain['exaggeration'] if m4._terrain else 'None'}\")\n\n# Check the terrain source configuration\nprint(\"\\nTerrain source configuration:\")\nterrain_source = m4._sources.get(\"terrain-dem\")\nif terrain_source:\n    print(f\"  Type: {terrain_source['type']}\")\n    print(f\"  Encoding: {terrain_source['encoding']}\")\n    print(f\"  Tile Size: {terrain_source['tileSize']}\")\n    print(f\"  Tiles: {terrain_source['tiles']}\")\nelse:\n    print(\"  No terrain source found\")\n</pre> # Check the terrain configuration print(\"Terrain configuration:\") print(f\"  Source: {m4._terrain['source'] if m4._terrain else 'None'}\") print(f\"  Exaggeration: {m4._terrain['exaggeration'] if m4._terrain else 'None'}\")  # Check the terrain source configuration print(\"\\nTerrain source configuration:\") terrain_source = m4._sources.get(\"terrain-dem\") if terrain_source:     print(f\"  Type: {terrain_source['type']}\")     print(f\"  Encoding: {terrain_source['encoding']}\")     print(f\"  Tile Size: {terrain_source['tileSize']}\")     print(f\"  Tiles: {terrain_source['tiles']}\") else:     print(\"  No terrain source found\") <pre>Terrain configuration:\n  Source: terrain-dem\n  Exaggeration: 0.5\n\nTerrain source configuration:\n  Type: raster-dem\n  Encoding: terrarium\n  Tile Size: 256\n  Tiles: ['https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png']\n</pre> In\u00a0[7]: Copied! <pre># Export the Grand Canyon terrain map to HTML\nm2.to_html(\"terrain_grand_canyon.html\", title=\"Grand Canyon Terrain Visualization\")\nprint(\"Map exported to terrain_grand_canyon.html\")\n</pre> # Export the Grand Canyon terrain map to HTML m2.to_html(\"terrain_grand_canyon.html\", title=\"Grand Canyon Terrain Visualization\") print(\"Map exported to terrain_grand_canyon.html\") <pre>Map exported to terrain_grand_canyon.html\n</pre>"},{"location":"examples/terrain_example/#maplibre-terrain-visualization-example","title":"MapLibre Terrain Visualization Example\u00b6","text":"<p>This notebook demonstrates how to use the <code>set_terrain</code> method to add 3D terrain visualization to MapLibre GL JS maps. The terrain visualization uses elevation data from AWS terrain tiles to create a 3D effect.</p>"},{"location":"examples/terrain_example/#basic-terrain-example","title":"Basic Terrain Example\u00b6","text":"<p>Let's create a map with terrain visualization enabled using the default terrain source (AWS elevation tiles).</p>"},{"location":"examples/terrain_example/#terrain-with-custom-exaggeration","title":"Terrain with Custom Exaggeration\u00b6","text":"<p>You can adjust the terrain exaggeration to make the 3D effect more or less pronounced.</p>"},{"location":"examples/terrain_example/#terrain-with-custom-source","title":"Terrain with Custom Source\u00b6","text":"<p>You can also use a custom terrain source if you have your own elevation data tiles.</p>"},{"location":"examples/terrain_example/#terrain-with-minimal-exaggeration","title":"Terrain with Minimal Exaggeration\u00b6","text":"<p>For subtle terrain effects, you can use minimal exaggeration.</p>"},{"location":"examples/terrain_example/#terrain-settings-information","title":"Terrain Settings Information\u00b6","text":"<p>Let's examine the terrain configuration stored in the map.</p>"},{"location":"examples/terrain_example/#export-to-html","title":"Export to HTML\u00b6","text":"<p>You can export a terrain-enabled map to HTML for sharing.</p>"},{"location":"examples/terrain_example/#summary","title":"Summary\u00b6","text":"<p>The <code>set_terrain</code> method provides a simple way to add 3D terrain visualization to MapLibre GL JS maps:</p> <ul> <li>Default usage: <code>m.set_terrain()</code> uses AWS elevation tiles with 1.0 exaggeration</li> <li>Custom exaggeration: <code>m.set_terrain(exaggeration=1.5)</code> for more pronounced terrain</li> <li>Custom source: <code>m.set_terrain(source=\"your-terrain-url\")</code> for custom elevation data</li> <li>Custom source ID: <code>m.set_terrain(source_id=\"custom-id\")</code> for custom source identification</li> </ul> <p>Tips for best results:</p> <ul> <li>Use <code>pitch</code> values between 30-70 degrees to show the 3D effect</li> <li>Combine with satellite imagery basemaps for realistic terrain visualization</li> <li>Adjust <code>exaggeration</code> based on the terrain type (higher for dramatic landscapes, lower for subtle hills)</li> <li>Use appropriate zoom levels (typically 10-15) for terrain visualization</li> </ul>"},{"location":"examples/to_html/","title":"To html","text":"In\u00a0[1]: Copied! <pre>import anymap\nimport json\n</pre> import anymap import json In\u00a0[2]: Copied! <pre># Create a MapLibre map\nm = anymap.MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    style=\"https://demotiles.maplibre.org/style.json\",\n)\n\n# Add a GeoJSON layer with some sample data\nsample_geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},\n            \"properties\": {\n                \"name\": \"San Francisco\",\n                \"description\": \"The beautiful city by the bay\",\n            },\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4594, 37.7849]},\n            \"properties\": {\n                \"name\": \"Golden Gate Park\",\n                \"description\": \"Large urban park\",\n            },\n        },\n    ],\n}\n\n# Add the GeoJSON layer\nm.add_geojson_layer(\n    layer_id=\"sample_points\",\n    geojson_data=sample_geojson,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 10,\n        \"circle-color\": \"#ff6b6b\",\n        \"circle-stroke-color\": \"#ffffff\",\n        \"circle-stroke-width\": 2,\n    },\n)\n\n# Add a raster layer (OpenStreetMap tiles)\nm.add_tile_layer(\n    layer_id=\"osm_overlay\",\n    source_url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    paint={\"raster-opacity\": 0.3},\n)\n\n# Display the map\nm\n</pre> # Create a MapLibre map m = anymap.MapLibreMap(     center=[37.7749, -122.4194],  # San Francisco     zoom=12,     style=\"https://demotiles.maplibre.org/style.json\", )  # Add a GeoJSON layer with some sample data sample_geojson = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4194, 37.7749]},             \"properties\": {                 \"name\": \"San Francisco\",                 \"description\": \"The beautiful city by the bay\",             },         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-122.4594, 37.7849]},             \"properties\": {                 \"name\": \"Golden Gate Park\",                 \"description\": \"Large urban park\",             },         },     ], }  # Add the GeoJSON layer m.add_geojson_layer(     layer_id=\"sample_points\",     geojson_data=sample_geojson,     layer_type=\"circle\",     paint={         \"circle-radius\": 10,         \"circle-color\": \"#ff6b6b\",         \"circle-stroke-color\": \"#ffffff\",         \"circle-stroke-width\": 2,     }, )  # Add a raster layer (OpenStreetMap tiles) m.add_tile_layer(     layer_id=\"osm_overlay\",     source_url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",     paint={\"raster-opacity\": 0.3}, )  # Display the map m Out[2]: In\u00a0[3]: Copied! <pre># Export to HTML file\nhtml_content = m.to_html(\n    filename=\"maplibre_export.html\",\n    title=\"San Francisco Map - MapLibre Export\",\n    width=\"100%\",\n    height=\"700px\",\n)\n\nprint(\"\u2705 Map exported to 'maplibre_export.html'\")\nprint(f\"\ud83d\udcc4 HTML file size: {len(html_content)} characters\")\nprint(\"\ud83c\udf10 You can now open the HTML file in any web browser!\")\n</pre> # Export to HTML file html_content = m.to_html(     filename=\"maplibre_export.html\",     title=\"San Francisco Map - MapLibre Export\",     width=\"100%\",     height=\"700px\", )  print(\"\u2705 Map exported to 'maplibre_export.html'\") print(f\"\ud83d\udcc4 HTML file size: {len(html_content)} characters\") print(\"\ud83c\udf10 You can now open the HTML file in any web browser!\") <pre>\u2705 Map exported to 'maplibre_export.html'\n\ud83d\udcc4 HTML file size: 99629 characters\n\ud83c\udf10 You can now open the HTML file in any web browser!\n</pre> In\u00a0[4]: Copied! <pre># Show the first 1000 characters of the HTML\nprint(\"HTML Preview (first 1000 characters):\")\nprint(\"=\" * 50)\nprint(html_content[:1000] + \"...\")\nprint(\"=\" * 50)\n\n# Check what layers are included\nprint(\"\\n\ud83d\uddfa\ufe0f  Layers included in export:\")\nif \"sample_points\" in html_content:\n    print(\"  \u2713 Sample points layer\")\nif \"osm_overlay\" in html_content:\n    print(\"  \u2713 OpenStreetMap overlay layer\")\n\nprint(\"\\n\ud83d\udccd Map configuration:\")\nprint(f\"  \u2022 Center: {m.center}\")\nprint(f\"  \u2022 Zoom: {m.zoom}\")\nprint(f\"  \u2022 Style: {m.style}\")\n</pre> # Show the first 1000 characters of the HTML print(\"HTML Preview (first 1000 characters):\") print(\"=\" * 50) print(html_content[:1000] + \"...\") print(\"=\" * 50)  # Check what layers are included print(\"\\n\ud83d\uddfa\ufe0f  Layers included in export:\") if \"sample_points\" in html_content:     print(\"  \u2713 Sample points layer\") if \"osm_overlay\" in html_content:     print(\"  \u2713 OpenStreetMap overlay layer\")  print(\"\\n\ud83d\udccd Map configuration:\") print(f\"  \u2022 Center: {m.center}\") print(f\"  \u2022 Zoom: {m.zoom}\") print(f\"  \u2022 Style: {m.style}\") <pre>HTML Preview (first 1000 characters):\n==================================================\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;San Francisco Map - MapLibre Export&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n        &lt;link\n            href=\"https://unpkg.com/maplibre-gl@5.6.1/dist/maplibre-gl.css\"\n            rel=\"stylesheet\"\n        /&gt;\n        &lt;style&gt;\n            body {\n                margin: 0;\n                padding: 20px;\n                font-family: Arial, sans-serif;\n            }\n            #map {\n                width: 100%;\n                height: 700px;\n                border: 1px solid #ccc;\n            }\n\n            /* Force default cursor for all map interactions */\n            .maplibregl-canvas {\n                cursor: default !important;\n            }\n\n            .maplibregl-map {\n                cursor: default !important;\n            }\n\n            .maplibregl-ctrl-group button...\n==================================================\n\n\ud83d\uddfa\ufe0f  Layers included in export:\n  \u2713 Sample points layer\n  \u2713 OpenStreetMap overlay layer\n\n\ud83d\udccd Map configuration:\n  \u2022 Center: [37.7749, -122.4194]\n  \u2022 Zoom: 12.0\n  \u2022 Style: {'id': '43f36e14-e3f5-43c1-84c0-50a9c80dc5c7', 'name': 'MapLibre', 'zoom': 0.8619833357855968, 'pitch': 0, 'center': [17.65431710431244, 32.954120326746775], 'glyphs': 'https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf', 'layers': [{'id': 'background', 'type': 'background', 'paint': {'background-color': '#D8F2FF'}, 'filter': ['all'], 'layout': {'visibility': 'visible'}, 'maxzoom': 24}, {'id': 'coastline', 'type': 'line', 'paint': {'line-blur': 0.5, 'line-color': '#198EC8', 'line-width': {'stops': [[0, 2], [6, 6], [14, 9], [22, 18]]}}, 'filter': ['all'], 'layout': {'line-cap': 'round', 'line-join': 'round', 'visibility': 'visible'}, 'source': 'maplibre', 'maxzoom': 24, 'minzoom': 0, 'source-layer': 'countries'}, {'id': 'countries-fill', 'type': 'fill', 'paint': {'fill-color': ['match', ['get', 'ADM0_A3'], ['ARM', 'ATG', 'AUS', 'BTN', 'CAN', 'COG', 'CZE', 'GHA', 'GIN', 'HTI', 'ISL', 'JOR', 'KHM', 'KOR', 'LVA', 'MLT', 'MNE', 'MOZ', 'PER', 'SAH', 'SGP', 'SLV', 'SOM', 'TJK', 'TUV', 'UKR', 'WSM'], '#D6C7FF', ['AZE', 'BGD', 'CHL', 'CMR', 'CSI', 'DEU', 'DJI', 'GUY', 'HUN', 'IOA', 'JAM', 'LBN', 'LBY', 'LSO', 'MDG', 'MKD', 'MNG', 'MRT', 'NIU', 'NZL', 'PCN', 'PYF', 'SAU', 'SHN', 'STP', 'TTO', 'UGA', 'UZB', 'ZMB'], '#EBCA8A', ['AGO', 'ASM', 'ATF', 'BDI', 'BFA', 'BGR', 'BLZ', 'BRA', 'CHN', 'CRI', 'ESP', 'HKG', 'HRV', 'IDN', 'IRN', 'ISR', 'KNA', 'LBR', 'LCA', 'MAC', 'MUS', 'NOR', 'PLW', 'POL', 'PRI', 'SDN', 'TUN', 'UMI', 'USA', 'USG', 'VIR', 'VUT'], '#C1E599', ['ARE', 'ARG', 'BHS', 'CIV', 'CLP', 'DMA', 'ETH', 'GAB', 'GRD', 'HMD', 'IND', 'IOT', 'IRL', 'IRQ', 'ITA', 'KOS', 'LUX', 'MEX', 'NAM', 'NER', 'PHL', 'PRT', 'RUS', 'SEN', 'SUR', 'TZA', 'VAT'], '#E7E58F', ['AUT', 'BEL', 'BHR', 'BMU', 'BRB', 'CYN', 'DZA', 'EST', 'FLK', 'GMB', 'GUM', 'HND', 'JEY', 'KGZ', 'LIE', 'MAF', 'MDA', 'NGA', 'NRU', 'SLB', 'SOL', 'SRB', 'SWZ', 'THA', 'TUR', 'VEN', 'VGB'], '#98DDA1', ['AIA', 'BIH', 'BLM', 'BRN', 'CAF', 'CHE', 'COM', 'CPV', 'CUB', 'ECU', 'ESB', 'FSM', 'GAZ', 'GBR', 'GEO', 'KEN', 'LTU', 'MAR', 'MCO', 'MDV', 'NFK', 'NPL', 'PNG', 'PRY', 'QAT', 'SLE', 'SPM', 'SYC', 'TCA', 'TKM', 'TLS', 'VNM', 'WEB', 'WSB', 'YEM', 'ZWE'], '#83D5F4', ['ABW', 'ALB', 'AND', 'ATC', 'BOL', 'COD', 'CUW', 'CYM', 'CYP', 'EGY', 'FJI', 'GGY', 'IMN', 'KAB', 'KAZ', 'KWT', 'LAO', 'MLI', 'MNP', 'MSR', 'MYS', 'NIC', 'NLD', 'PAK', 'PAN', 'PRK', 'ROU', 'SGS', 'SVN', 'SWE', 'TGO', 'TWN', 'VCT', 'ZAF'], '#B1BBF9', ['ATA', 'GRL'], '#FFFFFF', '#EAB38F']}, 'filter': ['all'], 'layout': {'visibility': 'visible'}, 'source': 'maplibre', 'maxzoom': 24, 'source-layer': 'countries'}, {'id': 'countries-boundary', 'type': 'line', 'paint': {'line-color': 'rgba(255, 255, 255, 1)', 'line-width': {'stops': [[1, 1], [6, 2], [14, 6], [22, 12]]}, 'line-opacity': {'stops': [[3, 0.5], [6, 1]]}}, 'layout': {'line-cap': 'round', 'line-join': 'round', 'visibility': 'visible'}, 'source': 'maplibre', 'maxzoom': 24, 'source-layer': 'countries'}, {'id': 'geolines', 'type': 'line', 'paint': {'line-color': '#1077B0', 'line-opacity': 1, 'line-dasharray': [3, 3]}, 'filter': ['all', ['!=', 'name', 'International Date Line']], 'layout': {'visibility': 'visible'}, 'source': 'maplibre', 'maxzoom': 24, 'source-layer': 'geolines'}, {'id': 'geolines-label', 'type': 'symbol', 'paint': {'text-color': '#1077B0', 'text-halo-blur': 1, 'text-halo-color': 'rgba(255, 255, 255, 1)', 'text-halo-width': 1}, 'filter': ['all', ['!=', 'name', 'International Date Line']], 'layout': {'text-font': ['Open Sans Semibold'], 'text-size': {'stops': [[2, 12], [6, 16]]}, 'text-field': '{name}', 'visibility': 'visible', 'symbol-placement': 'line'}, 'source': 'maplibre', 'maxzoom': 24, 'minzoom': 1, 'source-layer': 'geolines'}, {'id': 'countries-label', 'type': 'symbol', 'paint': {'text-color': 'rgba(8, 37, 77, 1)', 'text-halo-blur': {'stops': [[2, 0.2], [6, 0]]}, 'text-halo-color': 'rgba(255, 255, 255, 1)', 'text-halo-width': {'stops': [[2, 1], [6, 1.6]]}}, 'filter': ['all'], 'layout': {'text-font': ['Open Sans Semibold'], 'text-size': {'stops': [[2, 10], [4, 12], [6, 16]]}, 'text-field': {'stops': [[2, '{ABBREV}'], [4, '{NAME}']]}, 'visibility': 'visible', 'text-max-width': 10, 'text-transform': {'stops': [[0, 'uppercase'], [2, 'none']]}}, 'source': 'maplibre', 'maxzoom': 24, 'minzoom': 2, 'source-layer': 'centroids'}, {'id': 'crimea-fill', 'type': 'fill', 'source': 'crimea', 'paint': {'fill-color': '#D6C7FF'}}], 'bearing': 0, 'sources': {'maplibre': {'url': 'https://demotiles.maplibre.org/tiles/tiles.json', 'type': 'vector'}, 'crimea': {'type': 'geojson', 'data': {'type': 'Feature', 'geometry': {'type': 'Polygon', 'coordinates': [[[34.00905273547181, 46.55925987559425], [33.64325260204026, 46.34533545368038], [33.628682598560204, 46.12569762665683], [33.64292861730951, 46.10476396128129], [33.648473474905984, 46.09033047763651], [33.63876482059936, 46.077976784785335], [33.62782672238245, 46.06747935719011], [33.62911357645072, 46.05708111413949], [33.642686868727424, 46.02192963417187], [33.6429723910654, 46.01521185644708], [33.636224138774026, 46.006705833212465], [33.63052626465907, 45.99692992186792], [33.63193836679693, 45.988472992911284], [33.64276684834442, 45.984575360297384], [33.646928693041986, 45.97981936210982], [33.638745893564305, 45.96829769147004], [33.61958133326394, 45.951176418494185], [33.63181380398527, 45.9445404758078], [33.638921676216, 45.94737012930554], [33.64561542516918, 45.95403251372139], [33.65666403976448, 45.95687114427736], [33.6825817382811, 45.95878100879199], [33.738791807037614, 45.94836945227263], [33.758180142697, 45.94072970008301], [33.77735917288169, 45.92923970233858], [33.75927796793485, 45.92241179584471], [33.72529865009221, 45.91587363154565], [33.70875012326826, 45.91008760988058], [33.69378857293381, 45.91480850795665], [33.69092650243843, 45.89657370898402], [33.693592356906805, 45.87271465766318], [33.69226765972388, 45.86041392418218], [33.6704813511748, 45.8584273836251], [33.65936345808916, 45.85944682601249], [33.653870582376726, 45.86425922279372], [33.65107345584843, 45.87089907254003], [33.63067378180233, 45.88040685247182], [33.61945300059696, 45.88147266102649], [33.60987421595539, 45.88048951126686], [33.59906957603934, 45.877610457390375], [33.57828877687868, 45.86810261756233], [33.55357394560386, 45.84700625141778], [33.530220674480375, 45.84221983655459], [33.5192297395441, 45.84121682367507], [33.50832088442496, 45.84313067048083], [33.48901101848409, 45.85268298292175], [33.482152996405716, 45.854578171799005], [33.46719955896293, 45.849912739405056], [33.42447496599681, 45.83075886348303], [33.40940172404095, 45.82691953557702], [33.37918350072067, 45.802867525073566], [33.37362145339398, 45.79619281922518], [33.33805543634864, 45.78577808972071], [33.26498872665803, 45.75410774187094], [33.22887541283427, 45.75131270772724], [33.19548267281132, 45.7644887297206], [33.1789202379222, 45.78010311364778], [33.1688456078636, 45.78470227904205], [33.161012432811674, 45.77921593899549], [33.15951585299757, 45.76864464913777], [33.165962301438725, 45.762685940125465], [33.1750888126426, 45.759218220695715], [33.181464829753, 45.75490447884948], [33.17613930782352, 45.7437961960276], [33.16369168844906, 45.735912015025065], [32.93692665480876, 45.662114646778264], [32.86839112407645, 45.63044340698664], [32.83803944575723, 45.60834075026611], [32.82702772424804, 45.59576101516498], [32.82433467080986, 45.58705137380335], [32.82563941622885, 45.579605763895614], [32.82993674258438, 45.56978311819469], [32.82851940940563, 45.56227808675749], [32.813310142795274, 45.55930933158257], [32.80213583657516, 45.560145780074464], [32.78258622159436, 45.565158335073846], [32.77333922465823, 45.56689313356526], [32.758306734735356, 45.565030173463356], [32.750177256846115, 45.55943726334968], [32.74340732630185, 45.55261895849793], [32.73524549539499, 45.54598788110354], [32.72031700779701, 45.53735927760957], [32.70536040418847, 45.53169142131733], [32.68589438933773, 45.52663379187257], [32.66370583186284, 45.52563107058867], [32.64312077736798, 45.52188979044979], [32.525284074162556, 45.45838108691365], [32.49490411219156, 45.43524910229854], [32.48107654411925, 45.408986638827514], [32.48514589713025, 45.39458067125969], [32.51256939517424, 45.34060655033625], [32.535915460470335, 45.33777248012882], [32.57027153843481, 45.32510892683359], [32.590830644991826, 45.32038723212662], [32.66380378113439, 45.320421746458976], [32.67760722618917, 45.32609231279554], [32.71316246802607, 45.353283572618125], [32.72817188836078, 45.36074681043402], [32.750518060251466, 45.36371725645313], [32.89973931692998, 45.35412322462227], [32.941197846443885, 45.34245505845169], [32.97701667405008, 45.32596743563991], [33.04296090827762, 45.2853982930032], [33.05274355585479, 45.28154273654923], [33.06850284417635, 45.27703461892352], [33.07825272648239, 45.272210805127315], [33.089426322403455, 45.25656353201492], [33.09897492343546, 45.247820101667884], [33.12384611720435, 45.238235755071685], [33.15767197859745, 45.20755227709648], [33.172959979330074, 45.19681657531794], [33.21837666514142, 45.187878368659824], [33.24017433636709, 45.180191106261134], [33.248571989896675, 45.16588271012458], [33.259649216030766, 45.155918961282026], [33.28309785485047, 45.16064860772312], [33.31767999550894, 45.17535522412791], [33.35458473323109, 45.18598673360148], [33.39725661527919, 45.18973663076909], [33.41344561756824, 45.18490731877088], [33.468468576977216, 45.149132412229676], [33.537128652906205, 45.11719769268973], [33.56161328289443, 45.094099022711475], [33.57837628774928, 45.053145935448015], [33.58247744978442, 45.027377243150454], [33.5851414316958, 45.01816461606674], [33.6031021265521, 44.993103583251695], [33.605922209331794, 44.986905272229734], [33.60843524291815, 44.97039962759274], [33.61943161357851, 44.93184946652454], [33.619484500808824, 44.90819321920554], [33.61549738593425, 44.88894092276257], [33.608561183117274, 44.871288478948514], [33.59889474705494, 44.859790298912856], [33.55904244709464, 44.850057575124595], [33.54667558363471, 44.83724531175508], [33.53701832136994, 44.81871953508235], [33.5303157846202, 44.798338017069625], [33.5249116915937, 44.78918633101301], [33.51669091675143, 44.784809980590666], [33.524785531609865, 44.77183212449111], [33.5302902535075, 44.75724515985675], [33.53710734694323, 44.73034290771247], [33.54650992495621, 44.70989226909535], [33.5481286806762, 44.699106546699085], [33.543995566510915, 44.68230506537358], [33.53580273994743, 44.6726082589706], [33.52337411931097, 44.661863083605255], [33.515320778874354, 44.6491266698327], [33.516377841582795, 44.63464990118433], [33.52466971637648, 44.62863961572572], [33.557474298027785, 44.62473000923737], [33.5710648827386, 44.620853511273225], [33.55105839203679, 44.61506440493406], [33.499905706797676, 44.61452599304897], [33.48451102966331, 44.60992438254493], [33.47658499621011, 44.60714391514574], [33.46705078205747, 44.60616254193252], [33.44476599234898, 44.607062134677875], [33.4353466482458, 44.60509936890821], [33.413591053005575, 44.593500212748125], [33.40543527945235, 44.59055535193136], [33.37510958624222, 44.58564691897425], [33.37074452434078, 44.58851022190515], [33.372237834990756, 44.576810695127364], [33.37913003799301, 44.56412673079859], [33.48759131590526, 44.51024086451031], [33.50011215135888, 44.50041002882833], [33.517917009115365, 44.49074142372788], [33.53836387802215, 44.49164280212756], [33.56041892763031, 44.4966411022441], [33.57822378538677, 44.497542389459795], [33.59062975079095, 44.48975808594983], [33.619577003408466, 44.46229988129974], [33.62635433636015, 44.45336293328907], [33.63175322871038, 44.434828756313124], [33.645537634715026, 44.42498521035591], [33.721007257593925, 44.39946630464436], [33.74168386660085, 44.39560878121904], [33.80727466517129, 44.39454176175843], [33.81841706002561, 44.39552670349164], [33.83909366903248, 44.40143600575672], [33.85149963444792, 44.40143600575945], [33.91467816197718, 44.38387049706651], [33.938111652185, 44.38083293528811], [33.957065210440874, 44.38272116790142], [34.06614966692763, 44.42019923628979], [34.088893936836286, 44.42200415824283], [34.10279321289039, 44.42487551014821], [34.135933345669, 44.44163597968952], [34.14696087047267, 44.44959070749778], [34.16058918507403, 44.466287285335795], [34.170123399227776, 44.48186111741296], [34.182759104731986, 44.49267838558103], [34.22923417224524, 44.49949719774551], [34.24301857824986, 44.50744404277697], [34.263903954150294, 44.53186886058606], [34.26631622520165, 44.53555362837611], [34.26631622520165, 44.54153064468656], [34.27033667695244, 44.545378535987936], [34.2757355693048, 44.54644280144541], [34.285384653508004, 44.54562413743594], [34.299973149863405, 44.54554227040174], [34.32260254971496, 44.543577427039224], [34.3308731933177, 44.54546040325087], [34.340292537420794, 44.55798473830754], [34.38042135640006, 44.631830317636684], [34.41495238900856, 44.673669777529994], [34.424193090575585, 44.68239452736094], [34.42959198292681, 44.68884644523774], [34.469399167794535, 44.730194532749294], [34.47376422969597, 44.73011292571252], [34.47376422969597, 44.72635887754967], [34.475142670296464, 44.723502373339585], [34.499724861011515, 44.74292382044041], [34.532800295801195, 44.752620844929055], [34.61217550038418, 44.76534519537847], [34.65065696715081, 44.777088262503725], [34.72084256772871, 44.811080759265764], [34.756796893391225, 44.82094054159748], [34.82646979041766, 44.81208604604609], [34.84289620758207, 44.816893835303176], [34.856910353686715, 44.82373813182468], [34.889648317948144, 44.817871641692506], [34.90733830566026, 44.820886440346584], [34.922960632465504, 44.83050015059965], [34.92950822531711, 44.83652826953224], [34.94179932067178, 44.84019370922482], [34.95282684547897, 44.841415470643284], [34.98567967978991, 44.840275160795755], [35.0053224583441, 44.83538786296728], [35.017958163849414, 44.82219008824552], [35.02703289780189, 44.80890779582285], [35.037933245998005, 44.79869792240089], [35.08073333784134, 44.793525442788905], [35.1080207326404, 44.824553365795765], [35.130368105574235, 44.86879838545747], [35.15485200090768, 44.90071251697748], [35.17111229780758, 44.90746386008772], [35.21522068940149, 44.91421441031795], [35.233163085981715, 44.925728224907715], [35.25636688416236, 44.95896657181197], [35.27300098099195, 44.96690119386028], [35.29748487632534, 44.95605693543271], [35.30496087491386, 44.96121482614441], [35.315240372954605, 44.965711070514175], [35.31935217217088, 44.96941359539801], [35.36757236298112, 44.94362319076086], [35.36103086422793, 44.97364475976596], [35.362152264014156, 44.98593980935419], [35.374674561627444, 44.997835734117416], [35.389439658813274, 45.00180049366759], [35.42270785247763, 45.00087540764923], [35.43504325012745, 45.00470780964241], [35.43504325012745, 45.011446929213974], [35.40631957913584, 45.02015821022701], [35.40089948016896, 45.025046135473445], [35.39790908073891, 45.03482073400548], [35.40052568024015, 45.042216617888045], [35.40631957913584, 45.051328088783805], [35.40744097892215, 45.06294640963205], [35.41734667704213, 45.0708666385693], [35.469304867139925, 45.10068964922732], [35.5070260597534, 45.113341616151644], [35.54758335202416, 45.12019982412133], [35.59019654390909, 45.11993606213795], [35.63411803553862, 45.11439677872579], [35.70669729572677, 45.09480210570922], [35.771782422456766, 45.06572995732262], [35.78430472007, 45.057941041321754], [35.81250040352472, 45.031852200991295], [35.81941570220667, 45.021152336906454], [35.82763930064016, 44.99895365027004], [35.848198296721705, 44.99208088455586], [35.916977483614176, 45.00172895661731], [35.99360646900681, 44.997896355361604], [36.00893226608571, 45.00926125333629], [36.02539976723364, 45.03288661039673], [36.047827762958946, 45.048074065419456], [36.078666257082034, 45.03883000769565], [36.079137312377895, 45.046610970582435], [36.135020401727616, 45.02125162210126], [36.2241716847341, 45.00751061631556], [36.24398308095806, 45.011474706353084], [36.24828178013877, 45.01649549321965], [36.25332807917695, 45.03247980324494], [36.25743987839326, 45.03842324279259], [36.267158676549116, 45.043573724415154], [36.2783726744118, 45.04555455542638], [36.36740852558336, 45.04833265291825], [36.44029951169139, 45.06787222615526], [36.45375630913995, 45.07631970334319], [36.455251508854985, 45.09202341204062], [36.44142091149291, 45.10709638287736], [36.41432041665814, 45.12872568311289], [36.40852651776157, 45.149160473330085], [36.409997342308856, 45.171615955386955], [36.418312796420764, 45.23001671705953], [36.42672329481775, 45.25186253492981], [36.43756477765089, 45.27227491599612], [36.4497132753354, 45.28542626329343], [36.45905827355429, 45.28753019598713], [36.4814862692796, 45.28845064200263], [36.4909554290368, 45.29213135137758], [36.49637552800283, 45.300940007322055], [36.49394582846682, 45.305015191082816], [36.48871262946426, 45.30935296803605], [36.48460083024801, 45.315924724862185], [36.489647129296515, 45.336413860372005], [36.502169426909745, 45.34731734941451], [36.52104632331191, 45.35033842661815], [36.544281237819945, 45.34731734942025], [36.57455903204905, 45.33601971904315], [36.585399229982954, 45.333917585593355], [36.59810088537549, 45.334837278577254], [36.630808379142394, 45.34048649352954], [36.637536777859964, 45.3511265071989], [36.63099527910589, 45.3741073632589], [36.61359545390113, 45.40895280985421], [36.59845655678569, 45.421547717459106], [36.58331765967199, 45.42731944465129], [36.566309762912795, 45.42548305000767], [36.54836736633254, 45.41210180010589], [36.53285466928139, 45.4090840212946], [36.51565987255873, 45.41957994832251], [36.49117597722616, 45.44279525429408], [36.47043008117939, 45.4458112314303], [36.411182792482634, 45.43610707766504], [36.391371396258705, 45.43991025572652], [36.35959840231365, 45.45407156049933], [36.33960010612526, 45.45695583486963], [36.33025510790637, 45.454464879327446], [36.32053630976225, 45.44856480887407], [36.31156511147125, 45.4438443081136], [36.29885591389362, 45.442795254299995], [36.3072664122906, 45.46115087970253], [36.30016421364425, 45.47320989503609], [36.283717016779036, 45.476355300848866], [36.267082919949445, 45.46704963343626], [36.25213092279836, 45.46115087970253], [36.13681364478941, 45.46219959214511], [36.11700224855986, 45.45721803432335], [36.097003952371466, 45.441483909606006], [36.06952965760803, 45.43046741078453], [36.0655449627526, 45.42553028973455], [36.05134056545904, 45.39535242162091], [36.022557970944945, 45.368441166003805], [35.986486277818386, 45.362926059418186], [35.94723728529826, 45.372380198658874], [35.87220216002379, 45.404075760536614], [35.85388596351393, 45.413916621802144], [35.84715756479628, 45.426379251448395], [35.8524047739447, 45.44386497541683], [35.85950697259193, 45.45933624762881], [35.857824872912545, 45.469953901705], [35.83278027768503, 45.47087138287168], [35.8167068807486, 45.46392436820739], [35.80362388324218, 45.44963442058864], [35.79469305616038, 45.42980210462429], [35.791889556694684, 45.41209230278156], [35.772265060435046, 45.39214572935421], [35.767405661361295, 45.38873311015669], [35.75189296431793, 45.386632934388984], [35.7481549650407, 45.379938103368545], [35.746846665290036, 45.369960021421576], [35.74423006578874, 45.36076812520648], [35.71619507113218, 45.34040932557082], [35.69451467527287, 45.32989869277279], [35.51720627467216, 45.29506847418358], [35.48038698168983, 45.2979608697527], [35.33194061536096, 45.371562726652314], [35.04491375777232, 45.669545248704424], [35.00230056589345, 45.7290693869553], [34.70631294999043, 46.024929846739866], [34.35868883309806, 46.106725558140795], [34.00905273547181, 46.55925987559425]]]}}}}, 'version': 8, 'metadata': {'maptiler:copyright': 'This style was generated on MapTiler Cloud. Usage is governed by the license terms in https://github.com/maplibre/demotiles/blob/gh-pages/LICENSE', 'openmaptiles:version': '3.x'}}\n</pre> In\u00a0[5]: Copied! <pre># Create a Mapbox map (you'll need to set your access token)\n# You can set the token via environment variable MAPBOX_ACCESS_TOKEN\n# or pass it directly as access_token parameter\n\nm_mapbox = anymap.MapboxMap(\n    center=[40.7128, -74.0060],  # New York\n    zoom=13,\n    style=\"mapbox://styles/mapbox/streets-v12\",\n    # access_token=\"your_mapbox_token_here\"  # Uncomment and add your token\n)\n\n# Add some NYC landmarks\nnyc_landmarks = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},\n            \"properties\": {\"name\": \"Statue of Liberty\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},\n            \"properties\": {\"name\": \"Empire State Building\"},\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9781, 40.7549]},\n            \"properties\": {\"name\": \"Times Square\"},\n        },\n    ],\n}\n\nm_mapbox.add_geojson_layer(\n    layer_id=\"nyc_landmarks\",\n    geojson_data=nyc_landmarks,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#4264fb\",\n        \"circle-stroke-color\": \"#ffffff\",\n        \"circle-stroke-width\": 2,\n    },\n)\n\n# Display the map\nm_mapbox\n</pre> # Create a Mapbox map (you'll need to set your access token) # You can set the token via environment variable MAPBOX_ACCESS_TOKEN # or pass it directly as access_token parameter  m_mapbox = anymap.MapboxMap(     center=[40.7128, -74.0060],  # New York     zoom=13,     style=\"mapbox://styles/mapbox/streets-v12\",     # access_token=\"your_mapbox_token_here\"  # Uncomment and add your token )  # Add some NYC landmarks nyc_landmarks = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-74.0445, 40.6892]},             \"properties\": {\"name\": \"Statue of Liberty\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9857, 40.7484]},             \"properties\": {\"name\": \"Empire State Building\"},         },         {             \"type\": \"Feature\",             \"geometry\": {\"type\": \"Point\", \"coordinates\": [-73.9781, 40.7549]},             \"properties\": {\"name\": \"Times Square\"},         },     ], }  m_mapbox.add_geojson_layer(     layer_id=\"nyc_landmarks\",     geojson_data=nyc_landmarks,     layer_type=\"circle\",     paint={         \"circle-radius\": 8,         \"circle-color\": \"#4264fb\",         \"circle-stroke-color\": \"#ffffff\",         \"circle-stroke-width\": 2,     }, )  # Display the map m_mapbox <pre>/home/runner/work/anymap/anymap/anymap/mapbox.py:111: UserWarning: No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\n  warnings.warn(\n</pre> Out[5]: In\u00a0[6]: Copied! <pre># Export Mapbox map to HTML\nmapbox_html = m_mapbox.to_html(\n    filename=\"mapbox_export.html\",\n    title=\"New York Landmarks - Mapbox Export\",\n    width=\"100%\",\n    height=\"600px\",\n)\n\nprint(\"\u2705 Mapbox map exported to 'mapbox_export.html'\")\nprint(f\"\ud83d\udcc4 HTML file size: {len(mapbox_html)} characters\")\n\n# Check if access token warning is present\nif \"access-token-warning\" in mapbox_html:\n    print(\"\u26a0\ufe0f  Warning: No Mapbox access token detected in export\")\n    print(\"   The exported map will need a valid Mapbox token to work properly\")\nelse:\n    print(\"\u2705 Access token included in export\")\n</pre> # Export Mapbox map to HTML mapbox_html = m_mapbox.to_html(     filename=\"mapbox_export.html\",     title=\"New York Landmarks - Mapbox Export\",     width=\"100%\",     height=\"600px\", )  print(\"\u2705 Mapbox map exported to 'mapbox_export.html'\") print(f\"\ud83d\udcc4 HTML file size: {len(mapbox_html)} characters\")  # Check if access token warning is present if \"access-token-warning\" in mapbox_html:     print(\"\u26a0\ufe0f  Warning: No Mapbox access token detected in export\")     print(\"   The exported map will need a valid Mapbox token to work properly\") else:     print(\"\u2705 Access token included in export\") <pre>\u2705 Mapbox map exported to 'mapbox_export.html'\n\ud83d\udcc4 HTML file size: 4920 characters\n\u26a0\ufe0f  Warning: No Mapbox access token detected in export\n   The exported map will need a valid Mapbox token to work properly\n</pre> In\u00a0[7]: Copied! <pre># Create a more complex map with multiple layer types\ncomplex_map = anymap.MapLibreMap(\n    center=[51.505, -0.09],  # London\n    zoom=10,\n    bearing=45,  # Rotate the map\n    pitch=30,  # Add some tilt\n)\n\n# Add a polygon layer (rough outline of central London)\nlondon_boundary = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [-0.2, 51.45],\n                        [0.1, 51.45],\n                        [0.1, 51.55],\n                        [-0.2, 51.55],\n                        [-0.2, 51.45],\n                    ]\n                ],\n            },\n            \"properties\": {\"name\": \"Central London Area\"},\n        }\n    ],\n}\n\ncomplex_map.add_geojson_layer(\n    layer_id=\"london_area\",\n    geojson_data=london_boundary,\n    layer_type=\"fill\",\n    paint={\"fill-color\": \"#088\", \"fill-opacity\": 0.3},\n)\n\n# Export with custom styling\ncustom_html = complex_map.to_html(\n    filename=\"london_custom_export.html\",\n    title=\"London Map with Custom Styling\",\n    width=\"1200px\",\n    height=\"800px\",\n)\n\nprint(\"\u2705 Complex map exported to 'london_custom_export.html'\")\nprint(f\"\ud83d\udcd0 Map properties preserved:\")\nprint(f\"   \u2022 Bearing: {complex_map.bearing}\u00b0\")\nprint(f\"   \u2022 Pitch: {complex_map.pitch}\u00b0\")\nprint(f\"   \u2022 Layers: {list(complex_map.get_layers().keys())}\")\nprint(f\"   \u2022 Sources: {list(complex_map.get_sources().keys())}\")\n</pre> # Create a more complex map with multiple layer types complex_map = anymap.MapLibreMap(     center=[51.505, -0.09],  # London     zoom=10,     bearing=45,  # Rotate the map     pitch=30,  # Add some tilt )  # Add a polygon layer (rough outline of central London) london_boundary = {     \"type\": \"FeatureCollection\",     \"features\": [         {             \"type\": \"Feature\",             \"geometry\": {                 \"type\": \"Polygon\",                 \"coordinates\": [                     [                         [-0.2, 51.45],                         [0.1, 51.45],                         [0.1, 51.55],                         [-0.2, 51.55],                         [-0.2, 51.45],                     ]                 ],             },             \"properties\": {\"name\": \"Central London Area\"},         }     ], }  complex_map.add_geojson_layer(     layer_id=\"london_area\",     geojson_data=london_boundary,     layer_type=\"fill\",     paint={\"fill-color\": \"#088\", \"fill-opacity\": 0.3}, )  # Export with custom styling custom_html = complex_map.to_html(     filename=\"london_custom_export.html\",     title=\"London Map with Custom Styling\",     width=\"1200px\",     height=\"800px\", )  print(\"\u2705 Complex map exported to 'london_custom_export.html'\") print(f\"\ud83d\udcd0 Map properties preserved:\") print(f\"   \u2022 Bearing: {complex_map.bearing}\u00b0\") print(f\"   \u2022 Pitch: {complex_map.pitch}\u00b0\") print(f\"   \u2022 Layers: {list(complex_map.get_layers().keys())}\") print(f\"   \u2022 Sources: {list(complex_map.get_sources().keys())}\") <pre>\u2705 Complex map exported to 'london_custom_export.html'\n\ud83d\udcd0 Map properties preserved:\n   \u2022 Bearing: 45.0\u00b0\n   \u2022 Pitch: 30.0\u00b0\n   \u2022 Layers: ['london_area']\n   \u2022 Sources: ['london_area_source']\n</pre> In\u00a0[8]: Copied! <pre># Generate HTML without saving to file\nhtml_string = m.to_html(title=\"String Export Example\")\n\nprint(f\"\ud83d\udcdd Generated HTML string of {len(html_string)} characters\")\nprint(\"\\n\ud83d\udd0d HTML validation checks:\")\nprint(f\"  \u2713 Contains DOCTYPE: {'&lt;!DOCTYPE html&gt;' in html_string}\")\nprint(f\"  \u2713 Contains MapLibre: {'maplibre-gl' in html_string}\")\nprint(f\"  \u2713 Contains map container: {'id=\"map\"' in html_string}\")\nprint(f\"  \u2713 Contains map state: {'mapState' in html_string}\")\nprint(f\"  \u2713 Contains layers: {'sample_points' in html_string}\")\n\n# You could save this string manually if needed\n# with open(\"manual_export.html\", \"w\") as f:\n#     f.write(html_string)\n</pre> # Generate HTML without saving to file html_string = m.to_html(title=\"String Export Example\")  print(f\"\ud83d\udcdd Generated HTML string of {len(html_string)} characters\") print(\"\\n\ud83d\udd0d HTML validation checks:\") print(f\"  \u2713 Contains DOCTYPE: {' ' in html_string}\") print(f\"  \u2713 Contains MapLibre: {'maplibre-gl' in html_string}\") print(f\"  \u2713 Contains map container: {'id=\"map\"' in html_string}\") print(f\"  \u2713 Contains map state: {'mapState' in html_string}\") print(f\"  \u2713 Contains layers: {'sample_points' in html_string}\")  # You could save this string manually if needed # with open(\"manual_export.html\", \"w\") as f: #     f.write(html_string) <pre>\ud83d\udcdd Generated HTML string of 99601 characters\n\n\ud83d\udd0d HTML validation checks:\n  \u2713 Contains DOCTYPE: True\n  \u2713 Contains MapLibre: True\n  \u2713 Contains map container: True\n  \u2713 Contains map state: True\n  \u2713 Contains layers: True\n</pre>"},{"location":"examples/to_html/#html-export-example","title":"HTML Export Example\u00b6","text":"<p>This notebook demonstrates how to export anymap maps to standalone HTML files using the <code>to_html()</code> method.</p> <p>The exported HTML files are self-contained and can be opened in any web browser while maintaining all map layers and interactivity.</p>"},{"location":"examples/to_html/#maplibre-export-example","title":"MapLibre Export Example\u00b6","text":"<p>Create a MapLibre map with various layer types and export it to HTML.</p>"},{"location":"examples/to_html/#export-maplibre-map-to-html","title":"Export MapLibre Map to HTML\u00b6","text":"<p>Now let's export this map to a standalone HTML file:</p>"},{"location":"examples/to_html/#preview-the-html-content","title":"Preview the HTML Content\u00b6","text":"<p>Let's take a look at the generated HTML structure:</p>"},{"location":"examples/to_html/#mapbox-export-example","title":"Mapbox Export Example\u00b6","text":"<p>Now let's create a Mapbox map and export it to HTML. Note that you'll need a Mapbox access token for this to work properly.</p>"},{"location":"examples/to_html/#advanced-export-options","title":"Advanced Export Options\u00b6","text":"<p>The <code>to_html()</code> method supports various customization options:</p>"},{"location":"examples/to_html/#return-html-as-string-no-file","title":"Return HTML as String (No File)\u00b6","text":"<p>You can also get the HTML content as a string without saving to a file:</p>"},{"location":"examples/to_html/#summary","title":"Summary\u00b6","text":"<p>The <code>to_html()</code> method provides a convenient way to export anymap maps to standalone HTML files:</p>"},{"location":"examples/to_html/#features","title":"\u2728 Features:\u00b6","text":"<ul> <li>Self-contained: No dependencies on Jupyter or Python runtime</li> <li>Layer persistence: All layers and sources are preserved</li> <li>Interactive: Full map interactivity (pan, zoom, layer visibility)</li> <li>Customizable: Control title, dimensions, and styling</li> <li>Cross-platform: Works in any modern web browser</li> </ul>"},{"location":"examples/to_html/#use-cases","title":"\ud83c\udfaf Use Cases:\u00b6","text":"<ul> <li>Share maps with non-technical users</li> <li>Embed maps in websites or presentations</li> <li>Create standalone map applications</li> <li>Archive map states for later viewing</li> <li>Generate reports with interactive maps</li> </ul>"},{"location":"examples/to_html/#generated-files","title":"\ud83d\udcc2 Generated Files:\u00b6","text":"<p>After running this notebook, you should have these exported HTML files:</p> <ul> <li><code>maplibre_export.html</code> - San Francisco map with points and raster overlay</li> <li><code>mapbox_export.html</code> - New York landmarks map</li> <li><code>london_custom_export.html</code> - London map with custom styling and polygon layer</li> </ul> <p>Open any of these files in your web browser to see the interactive maps!</p>"}]}