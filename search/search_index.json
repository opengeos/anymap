{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AnyMap","text":"<p>A Python package for creating interactive maps with anywidget and JavaScript mapping libraries</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://anymap.gishub.org</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\uddfa\ufe0f Interactive Maps: Create beautiful, interactive maps in Jupyter notebooks</li> <li>\ud83d\udd04 Bidirectional Communication: Full Python \u2194 JavaScript communication</li> <li>\ud83d\udcf1 Multi-cell Support: Render maps in multiple notebook cells without conflicts</li> <li>\ud83c\udfaf MapLibre Integration: Built-in support for MapLibre GL JS</li> <li>\ud83d\udee0\ufe0f Extensible: Easy to add support for other mapping libraries</li> <li>\ud83d\ude80 Familiar API: Similar to ipyleaflet for easy migration</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install anymap\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a basic map\nm = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"600px\"\n)\nm\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#creating-maps","title":"Creating Maps","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a map with custom settings\nm = MapLibreMap(\n    center=[40.7128, -74.0060],  # New York City\n    zoom=13,\n    height=\"500px\",\n    bearing=45,  # Map rotation\n    pitch=60     # 3D tilt\n)\n</code></pre>"},{"location":"#adding-markers","title":"Adding Markers","text":"<pre><code># Add a marker with popup\nm.add_marker(\n    lat=40.7128,\n    lng=-74.0060,\n    popup=\"&lt;h3&gt;New York City&lt;/h3&gt;&lt;p&gt;The Big Apple&lt;/p&gt;\"\n)\n</code></pre>"},{"location":"#working-with-geojson","title":"Working with GeoJSON","text":"<pre><code># Add GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-74.0060, 40.7128]\n            },\n            \"properties\": {\"name\": \"NYC\"}\n        }\n    ]\n}\n\nm.add_geojson_layer(\n    layer_id=\"cities\",\n    geojson_data=geojson_data,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff0000\"\n    }\n)\n</code></pre>"},{"location":"#event-handling","title":"Event Handling","text":"<pre><code>def handle_click(event):\n    lat, lng = event['lngLat']\n    print(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n\nm.on_map_event('click', handle_click)\n</code></pre>"},{"location":"#dynamic-updates","title":"Dynamic Updates","text":"<pre><code># Change map properties\nm.set_center(51.5074, -0.1278)  # London\nm.set_zoom(14)\n\n# Animate to a location\nm.fly_to(48.8566, 2.3522, zoom=15)  # Paris\n</code></pre>"},{"location":"#multi-cell-rendering","title":"Multi-Cell Rendering","text":"<p>AnyMap is designed to work seamlessly across multiple notebook cells:</p> <pre><code># Cell 1\nm = MapLibreMap(center=[0, 0], zoom=2)\nm\n\n# Cell 2 - Same map instance\nm.add_marker(0, 0, popup=\"Origin\")\n\n# Cell 3 - Display again\nm\n</code></pre>"},{"location":"#advanced-features","title":"Advanced Features","text":""},{"location":"#layer-management","title":"Layer Management","text":"<pre><code># Add and remove layers\nm.add_source(\"my-source\", {\n    \"type\": \"geojson\",\n    \"data\": geojson_data\n})\n\nm.add_layer(\"my-layer\", {\n    \"id\": \"my-layer\",\n    \"type\": \"circle\",\n    \"source\": \"my-source\",\n    \"paint\": {\"circle-radius\": 5}\n})\n\n# Remove layers\nm.remove_layer(\"my-layer\")\nm.remove_source(\"my-source\")\n</code></pre>"},{"location":"#custom-javascript-methods","title":"Custom JavaScript Methods","text":"<pre><code># Call any MapLibre GL JS method\nm.call_js_method('easeTo', {\n    'center': [lng, lat],\n    'zoom': 14,\n    'duration': 2000\n})\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Check out the example notebooks in the <code>examples/</code> directory:</p> <ul> <li><code>basic_usage.ipynb</code> - Basic map creation and interaction</li> <li><code>advanced_features.ipynb</code> - Advanced layer management and styling</li> <li><code>multi_cell_test.ipynb</code> - Multi-cell rendering tests</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To set up for development:</p> <pre><code>git clone https://github.com/opengeos/anymap.git\ncd anymap\npip install -e .\n</code></pre> <p>Run tests:</p> <pre><code>python -m unittest tests.test_anymap -v\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>\u2705 MapLibre GL JS backend</li> <li>\ud83d\udd32 Mapbox GL JS backend</li> <li>\ud83d\udd32 Leaflet backend</li> <li>\ud83d\udd32 Cesium backend</li> <li>\ud83d\udd32 Potree backend</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"anymap/","title":"anymap module","text":"<p>Main module for anymap interactive mapping widgets.</p>"},{"location":"anymap/#anymap.anymap.CesiumMap","title":"<code> CesiumMap            (MapWidget)         </code>","text":"<p>Cesium ion implementation of the map widget for 3D globe visualization.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class CesiumMap(MapWidget):\n    \"\"\"Cesium ion implementation of the map widget for 3D globe visualization.\"\"\"\n\n    # Cesium-specific traits\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n    camera_height = traitlets.Float(10000000.0).tag(sync=True)  # 10M meters default\n    heading = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(-90.0).tag(sync=True)  # Looking down\n    roll = traitlets.Float(0.0).tag(sync=True)\n\n    # Cesium viewer options\n    base_layer_picker = traitlets.Bool(True).tag(sync=True)\n    fullscreen_button = traitlets.Bool(True).tag(sync=True)\n    vr_button = traitlets.Bool(False).tag(sync=True)\n    geocoder = traitlets.Bool(True).tag(sync=True)\n    home_button = traitlets.Bool(True).tag(sync=True)\n    info_box = traitlets.Bool(True).tag(sync=True)\n    scene_mode_picker = traitlets.Bool(True).tag(sync=True)\n    selection_indicator = traitlets.Bool(True).tag(sync=True)\n    timeline = traitlets.Bool(False).tag(sync=True)\n    navigation_help_button = traitlets.Bool(False).tag(\n        sync=True\n    )  # Disabled by default to prevent arrows\n    animation = traitlets.Bool(False).tag(sync=True)\n    should_animate = traitlets.Bool(False).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"cesium_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"cesium_widget.css\"\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        camera_height: float = 10000000.0,\n        heading: float = 0.0,\n        pitch: float = -90.0,\n        roll: float = 0.0,\n        access_token: str = \"\",\n        base_layer_picker: bool = True,\n        fullscreen_button: bool = True,\n        vr_button: bool = False,\n        geocoder: bool = True,\n        home_button: bool = True,\n        info_box: bool = True,\n        scene_mode_picker: bool = True,\n        selection_indicator: bool = True,\n        timeline: bool = False,\n        navigation_help_button: bool = False,\n        animation: bool = False,\n        should_animate: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize Cesium map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level (used for camera height calculation)\n            width: Widget width\n            height: Widget height\n            camera_height: Camera height above ground in meters\n            heading: Camera heading in degrees (0 = north, 90 = east)\n            pitch: Camera pitch in degrees (-90 = looking down, 0 = horizon)\n            roll: Camera roll in degrees\n            access_token: Cesium ion access token (required for Cesium services).\n                         Get a free token at https://cesium.com/ion/signup\n                         Can also be set via CESIUM_TOKEN environment variable.\n            base_layer_picker: Show base layer picker widget\n            fullscreen_button: Show fullscreen button\n            vr_button: Show VR button\n            geocoder: Show geocoder search widget\n            home_button: Show home button\n            info_box: Show info box when clicking entities\n            scene_mode_picker: Show 3D/2D/Columbus view picker\n            selection_indicator: Show selection indicator\n            timeline: Show timeline widget\n            navigation_help_button: Show navigation help button\n            animation: Show animation widget\n            should_animate: Enable automatic animation\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            camera_height=camera_height,\n            heading=heading,\n            pitch=pitch,\n            roll=roll,\n            access_token=access_token,\n            base_layer_picker=base_layer_picker,\n            fullscreen_button=fullscreen_button,\n            vr_button=vr_button,\n            geocoder=geocoder,\n            home_button=home_button,\n            info_box=info_box,\n            scene_mode_picker=scene_mode_picker,\n            selection_indicator=selection_indicator,\n            timeline=timeline,\n            navigation_help_button=navigation_help_button,\n            animation=animation,\n            should_animate=should_animate,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Cesium access token from environment.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"CESIUM_TOKEN\") or os.environ.get(\"CESIUM_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Cesium access token found. Please set CESIUM_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://cesium.com/ion/signup\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Cesium ion access token.\"\"\"\n        self.access_token = token\n\n    def fly_to(\n        self,\n        latitude: float,\n        longitude: float,\n        height: Optional[float] = None,\n        heading: Optional[float] = None,\n        pitch: Optional[float] = None,\n        roll: Optional[float] = None,\n        duration: float = 3.0,\n    ) -&gt; None:\n        \"\"\"Fly the camera to a specific location.\"\"\"\n        options = {\"latitude\": latitude, \"longitude\": longitude, \"duration\": duration}\n        if height is not None:\n            options[\"height\"] = height\n        if heading is not None:\n            options[\"heading\"] = heading\n        if pitch is not None:\n            options[\"pitch\"] = pitch\n        if roll is not None:\n            options[\"roll\"] = roll\n\n        self.call_js_method(\"flyTo\", options)\n\n    def set_camera_position(\n        self,\n        latitude: float,\n        longitude: float,\n        height: float,\n        heading: float = 0.0,\n        pitch: float = -90.0,\n        roll: float = 0.0,\n    ) -&gt; None:\n        \"\"\"Set camera position immediately.\"\"\"\n        self.center = [latitude, longitude]\n        self.camera_height = height\n        self.heading = heading\n        self.pitch = pitch\n        self.roll = roll\n\n    def add_entity(self, entity_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add an entity to the globe.\"\"\"\n        self.call_js_method(\"addEntity\", entity_config)\n\n    def remove_entity(self, entity_id: str) -&gt; None:\n        \"\"\"Remove an entity from the globe.\"\"\"\n        self.call_js_method(\"removeEntity\", entity_id)\n\n    def add_point(\n        self,\n        latitude: float,\n        longitude: float,\n        height: float = 0.0,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        color: str = \"#ffff00\",\n        pixel_size: int = 10,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a point to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"point_{len(self._layers)}\"\n\n        entity_config = {\n            \"id\": entity_id,\n            \"position\": {\n                \"longitude\": longitude,\n                \"latitude\": latitude,\n                \"height\": height,\n            },\n            \"point\": {\n                \"pixelSize\": pixel_size,\n                \"color\": color,\n                \"outlineColor\": \"#000000\",\n                \"outlineWidth\": 2,\n                \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_billboard(\n        self,\n        latitude: float,\n        longitude: float,\n        image_url: str,\n        height: float = 0.0,\n        scale: float = 1.0,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a billboard (image marker) to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"billboard_{len(self._layers)}\"\n\n        entity_config = {\n            \"id\": entity_id,\n            \"position\": {\n                \"longitude\": longitude,\n                \"latitude\": latitude,\n                \"height\": height,\n            },\n            \"billboard\": {\n                \"image\": image_url,\n                \"scale\": scale,\n                \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_polyline(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"#ff0000\",\n        width: int = 2,\n        clamp_to_ground: bool = True,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a polyline to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"polyline_{len(self._layers)}\"\n\n        # Convert coordinates to Cesium format\n        positions = []\n        for coord in coordinates:\n            if len(coord) &gt;= 2:\n                positions.extend(\n                    [coord[1], coord[0], coord[2] if len(coord) &gt; 2 else 0]\n                )\n\n        entity_config = {\n            \"id\": entity_id,\n            \"polyline\": {\n                \"positions\": positions,\n                \"width\": width,\n                \"material\": color,\n                \"clampToGround\": clamp_to_ground,\n            },\n        }\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_polygon(\n        self,\n        coordinates: List[List[float]],\n        color: str = \"#0000ff\",\n        outline_color: str = \"#000000\",\n        height: float = 0.0,\n        extrude_height: Optional[float] = None,\n        name: Optional[str] = None,\n        description: Optional[str] = None,\n        entity_id: Optional[str] = None,\n    ) -&gt; str:\n        \"\"\"Add a polygon to the globe.\"\"\"\n        if entity_id is None:\n            entity_id = f\"polygon_{len(self._layers)}\"\n\n        # Convert coordinates to Cesium format\n        positions = []\n        for coord in coordinates:\n            if len(coord) &gt;= 2:\n                positions.extend([coord[1], coord[0]])\n\n        entity_config = {\n            \"id\": entity_id,\n            \"polygon\": {\n                \"hierarchy\": positions,\n                \"material\": color,\n                \"outline\": True,\n                \"outlineColor\": outline_color,\n                \"height\": height,\n            },\n        }\n\n        if extrude_height is not None:\n            entity_config[\"polygon\"][\"extrudedHeight\"] = extrude_height\n\n        if name:\n            entity_config[\"name\"] = name\n        if description:\n            entity_config[\"description\"] = description\n\n        self.add_entity(entity_config)\n        return entity_id\n\n    def add_data_source(\n        self,\n        source_type: str,\n        data: Union[str, Dict[str, Any]],\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a data source (GeoJSON, KML, CZML) to the globe.\"\"\"\n        config = {\"data\": data, \"options\": options or {}}\n        self.call_js_method(\"addDataSource\", source_type, config)\n\n    def add_geojson(\n        self, geojson_data: Dict[str, Any], options: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Add GeoJSON data to the globe.\"\"\"\n        self.add_data_source(\"geojson\", geojson_data, options)\n\n    def add_kml(self, kml_url: str, options: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Add KML data to the globe.\"\"\"\n        self.add_data_source(\"kml\", kml_url, options)\n\n    def add_czml(\n        self, czml_data: List[Dict[str, Any]], options: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Add CZML data to the globe.\"\"\"\n        self.add_data_source(\"czml\", czml_data, options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set terrain provider for the globe.\"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_cesium_world_terrain(\n        self, request_water_mask: bool = False, request_vertex_normals: bool = False\n    ) -&gt; None:\n        \"\"\"Set Cesium World Terrain as the terrain provider.\"\"\"\n        terrain_config = {\n            \"type\": \"cesium-world-terrain\",\n            \"requestWaterMask\": request_water_mask,\n            \"requestVertexNormals\": request_vertex_normals,\n        }\n        self.set_terrain(terrain_config)\n\n    def set_imagery(self, imagery_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Set imagery provider for the globe.\"\"\"\n        self.call_js_method(\"setImagery\", imagery_config)\n\n    def set_scene_mode_3d(self) -&gt; None:\n        \"\"\"Set scene to 3D mode.\"\"\"\n        self.call_js_method(\"setScene3D\")\n\n    def set_scene_mode_2d(self) -&gt; None:\n        \"\"\"Set scene to 2D mode.\"\"\"\n        self.call_js_method(\"setScene2D\")\n\n    def set_scene_mode_columbus(self) -&gt; None:\n        \"\"\"Set scene to Columbus view (2.5D).\"\"\"\n        self.call_js_method(\"setSceneColumbusView\")\n\n    def enable_lighting(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable globe lighting effects.\"\"\"\n        self.call_js_method(\"enableLighting\", enabled)\n\n    def enable_fog(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable atmospheric fog.\"\"\"\n        self.call_js_method(\"enableFog\", enabled)\n\n    def zoom_to_entity(self, entity_id: str) -&gt; None:\n        \"\"\"Zoom the camera to focus on a specific entity.\"\"\"\n        self.call_js_method(\"zoomToEntity\", entity_id)\n\n    def home(self) -&gt; None:\n        \"\"\"Reset camera to home position.\"\"\"\n        self.call_js_method(\"home\")\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_entities(self) -&gt; None:\n        \"\"\"Clear all entities from the globe.\"\"\"\n        # This would require tracking entities, for now use clear_layers\n        self.clear_layers()\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, width='100%', height='600px', camera_height=10000000.0, heading=0.0, pitch=-90.0, roll=0.0, access_token='', base_layer_picker=True, fullscreen_button=True, vr_button=False, geocoder=True, home_button=True, info_box=True, scene_mode_picker=True, selection_indicator=True, timeline=False, navigation_help_button=False, animation=False, should_animate=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize Cesium map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level (used for camera height calculation)</p> <code>2.0</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>camera_height</code> <code>float</code> <p>Camera height above ground in meters</p> <code>10000000.0</code> <code>heading</code> <code>float</code> <p>Camera heading in degrees (0 = north, 90 = east)</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Camera pitch in degrees (-90 = looking down, 0 = horizon)</p> <code>-90.0</code> <code>roll</code> <code>float</code> <p>Camera roll in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Cesium ion access token (required for Cesium services).          Get a free token at https://cesium.com/ion/signup          Can also be set via CESIUM_TOKEN environment variable.</p> <code>''</code> <code>base_layer_picker</code> <code>bool</code> <p>Show base layer picker widget</p> <code>True</code> <code>fullscreen_button</code> <code>bool</code> <p>Show fullscreen button</p> <code>True</code> <code>vr_button</code> <code>bool</code> <p>Show VR button</p> <code>False</code> <code>geocoder</code> <code>bool</code> <p>Show geocoder search widget</p> <code>True</code> <code>home_button</code> <code>bool</code> <p>Show home button</p> <code>True</code> <code>info_box</code> <code>bool</code> <p>Show info box when clicking entities</p> <code>True</code> <code>scene_mode_picker</code> <code>bool</code> <p>Show 3D/2D/Columbus view picker</p> <code>True</code> <code>selection_indicator</code> <code>bool</code> <p>Show selection indicator</p> <code>True</code> <code>timeline</code> <code>bool</code> <p>Show timeline widget</p> <code>False</code> <code>navigation_help_button</code> <code>bool</code> <p>Show navigation help button</p> <code>False</code> <code>animation</code> <code>bool</code> <p>Show animation widget</p> <code>False</code> <code>should_animate</code> <code>bool</code> <p>Enable automatic animation</p> <code>False</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    camera_height: float = 10000000.0,\n    heading: float = 0.0,\n    pitch: float = -90.0,\n    roll: float = 0.0,\n    access_token: str = \"\",\n    base_layer_picker: bool = True,\n    fullscreen_button: bool = True,\n    vr_button: bool = False,\n    geocoder: bool = True,\n    home_button: bool = True,\n    info_box: bool = True,\n    scene_mode_picker: bool = True,\n    selection_indicator: bool = True,\n    timeline: bool = False,\n    navigation_help_button: bool = False,\n    animation: bool = False,\n    should_animate: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize Cesium map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level (used for camera height calculation)\n        width: Widget width\n        height: Widget height\n        camera_height: Camera height above ground in meters\n        heading: Camera heading in degrees (0 = north, 90 = east)\n        pitch: Camera pitch in degrees (-90 = looking down, 0 = horizon)\n        roll: Camera roll in degrees\n        access_token: Cesium ion access token (required for Cesium services).\n                     Get a free token at https://cesium.com/ion/signup\n                     Can also be set via CESIUM_TOKEN environment variable.\n        base_layer_picker: Show base layer picker widget\n        fullscreen_button: Show fullscreen button\n        vr_button: Show VR button\n        geocoder: Show geocoder search widget\n        home_button: Show home button\n        info_box: Show info box when clicking entities\n        scene_mode_picker: Show 3D/2D/Columbus view picker\n        selection_indicator: Show selection indicator\n        timeline: Show timeline widget\n        navigation_help_button: Show navigation help button\n        animation: Show animation widget\n        should_animate: Enable automatic animation\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        camera_height=camera_height,\n        heading=heading,\n        pitch=pitch,\n        roll=roll,\n        access_token=access_token,\n        base_layer_picker=base_layer_picker,\n        fullscreen_button=fullscreen_button,\n        vr_button=vr_button,\n        geocoder=geocoder,\n        home_button=home_button,\n        info_box=info_box,\n        scene_mode_picker=scene_mode_picker,\n        selection_indicator=selection_indicator,\n        timeline=timeline,\n        navigation_help_button=navigation_help_button,\n        animation=animation,\n        should_animate=should_animate,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_billboard","title":"<code>add_billboard(self, latitude, longitude, image_url, height=0.0, scale=1.0, name=None, description=None, entity_id=None)</code>","text":"<p>Add a billboard (image marker) to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_billboard(\n    self,\n    latitude: float,\n    longitude: float,\n    image_url: str,\n    height: float = 0.0,\n    scale: float = 1.0,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a billboard (image marker) to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"billboard_{len(self._layers)}\"\n\n    entity_config = {\n        \"id\": entity_id,\n        \"position\": {\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"height\": height,\n        },\n        \"billboard\": {\n            \"image\": image_url,\n            \"scale\": scale,\n            \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_czml","title":"<code>add_czml(self, czml_data, options=None)</code>","text":"<p>Add CZML data to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_czml(\n    self, czml_data: List[Dict[str, Any]], options: Optional[Dict[str, Any]] = None\n) -&gt; None:\n    \"\"\"Add CZML data to the globe.\"\"\"\n    self.add_data_source(\"czml\", czml_data, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_data_source","title":"<code>add_data_source(self, source_type, data, options=None)</code>","text":"<p>Add a data source (GeoJSON, KML, CZML) to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_data_source(\n    self,\n    source_type: str,\n    data: Union[str, Dict[str, Any]],\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a data source (GeoJSON, KML, CZML) to the globe.\"\"\"\n    config = {\"data\": data, \"options\": options or {}}\n    self.call_js_method(\"addDataSource\", source_type, config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_entity","title":"<code>add_entity(self, entity_config)</code>","text":"<p>Add an entity to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_entity(self, entity_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add an entity to the globe.\"\"\"\n    self.call_js_method(\"addEntity\", entity_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_geojson","title":"<code>add_geojson(self, geojson_data, options=None)</code>","text":"<p>Add GeoJSON data to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson(\n    self, geojson_data: Dict[str, Any], options: Optional[Dict[str, Any]] = None\n) -&gt; None:\n    \"\"\"Add GeoJSON data to the globe.\"\"\"\n    self.add_data_source(\"geojson\", geojson_data, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_kml","title":"<code>add_kml(self, kml_url, options=None)</code>","text":"<p>Add KML data to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_kml(self, kml_url: str, options: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Add KML data to the globe.\"\"\"\n    self.add_data_source(\"kml\", kml_url, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_point","title":"<code>add_point(self, latitude, longitude, height=0.0, name=None, description=None, color='#ffff00', pixel_size=10, entity_id=None)</code>","text":"<p>Add a point to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_point(\n    self,\n    latitude: float,\n    longitude: float,\n    height: float = 0.0,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    color: str = \"#ffff00\",\n    pixel_size: int = 10,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a point to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"point_{len(self._layers)}\"\n\n    entity_config = {\n        \"id\": entity_id,\n        \"position\": {\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"height\": height,\n        },\n        \"point\": {\n            \"pixelSize\": pixel_size,\n            \"color\": color,\n            \"outlineColor\": \"#000000\",\n            \"outlineWidth\": 2,\n            \"heightReference\": \"CLAMP_TO_GROUND\" if height == 0 else \"NONE\",\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_polygon","title":"<code>add_polygon(self, coordinates, color='#0000ff', outline_color='#000000', height=0.0, extrude_height=None, name=None, description=None, entity_id=None)</code>","text":"<p>Add a polygon to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_polygon(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"#0000ff\",\n    outline_color: str = \"#000000\",\n    height: float = 0.0,\n    extrude_height: Optional[float] = None,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a polygon to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"polygon_{len(self._layers)}\"\n\n    # Convert coordinates to Cesium format\n    positions = []\n    for coord in coordinates:\n        if len(coord) &gt;= 2:\n            positions.extend([coord[1], coord[0]])\n\n    entity_config = {\n        \"id\": entity_id,\n        \"polygon\": {\n            \"hierarchy\": positions,\n            \"material\": color,\n            \"outline\": True,\n            \"outlineColor\": outline_color,\n            \"height\": height,\n        },\n    }\n\n    if extrude_height is not None:\n        entity_config[\"polygon\"][\"extrudedHeight\"] = extrude_height\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.add_polyline","title":"<code>add_polyline(self, coordinates, color='#ff0000', width=2, clamp_to_ground=True, name=None, description=None, entity_id=None)</code>","text":"<p>Add a polyline to the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_polyline(\n    self,\n    coordinates: List[List[float]],\n    color: str = \"#ff0000\",\n    width: int = 2,\n    clamp_to_ground: bool = True,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    entity_id: Optional[str] = None,\n) -&gt; str:\n    \"\"\"Add a polyline to the globe.\"\"\"\n    if entity_id is None:\n        entity_id = f\"polyline_{len(self._layers)}\"\n\n    # Convert coordinates to Cesium format\n    positions = []\n    for coord in coordinates:\n        if len(coord) &gt;= 2:\n            positions.extend(\n                [coord[1], coord[0], coord[2] if len(coord) &gt; 2 else 0]\n            )\n\n    entity_config = {\n        \"id\": entity_id,\n        \"polyline\": {\n            \"positions\": positions,\n            \"width\": width,\n            \"material\": color,\n            \"clampToGround\": clamp_to_ground,\n        },\n    }\n\n    if name:\n        entity_config[\"name\"] = name\n    if description:\n        entity_config[\"description\"] = description\n\n    self.add_entity(entity_config)\n    return entity_id\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_entities","title":"<code>clear_entities(self)</code>","text":"<p>Clear all entities from the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_entities(self) -&gt; None:\n    \"\"\"Clear all entities from the globe.\"\"\"\n    # This would require tracking entities, for now use clear_layers\n    self.clear_layers()\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.enable_fog","title":"<code>enable_fog(self, enabled=True)</code>","text":"<p>Enable or disable atmospheric fog.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_fog(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable atmospheric fog.\"\"\"\n    self.call_js_method(\"enableFog\", enabled)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.enable_lighting","title":"<code>enable_lighting(self, enabled=True)</code>","text":"<p>Enable or disable globe lighting effects.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_lighting(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable globe lighting effects.\"\"\"\n    self.call_js_method(\"enableLighting\", enabled)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.fly_to","title":"<code>fly_to(self, latitude, longitude, height=None, heading=None, pitch=None, roll=None, duration=3.0)</code>","text":"<p>Fly the camera to a specific location.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fly_to(\n    self,\n    latitude: float,\n    longitude: float,\n    height: Optional[float] = None,\n    heading: Optional[float] = None,\n    pitch: Optional[float] = None,\n    roll: Optional[float] = None,\n    duration: float = 3.0,\n) -&gt; None:\n    \"\"\"Fly the camera to a specific location.\"\"\"\n    options = {\"latitude\": latitude, \"longitude\": longitude, \"duration\": duration}\n    if height is not None:\n        options[\"height\"] = height\n    if heading is not None:\n        options[\"heading\"] = heading\n    if pitch is not None:\n        options[\"pitch\"] = pitch\n    if roll is not None:\n        options[\"roll\"] = roll\n\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.home","title":"<code>home(self)</code>","text":"<p>Reset camera to home position.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def home(self) -&gt; None:\n    \"\"\"Reset camera to home position.\"\"\"\n    self.call_js_method(\"home\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.remove_entity","title":"<code>remove_entity(self, entity_id)</code>","text":"<p>Remove an entity from the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_entity(self, entity_id: str) -&gt; None:\n    \"\"\"Remove an entity from the globe.\"\"\"\n    self.call_js_method(\"removeEntity\", entity_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Cesium ion access token.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Cesium ion access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_camera_position","title":"<code>set_camera_position(self, latitude, longitude, height, heading=0.0, pitch=-90.0, roll=0.0)</code>","text":"<p>Set camera position immediately.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_camera_position(\n    self,\n    latitude: float,\n    longitude: float,\n    height: float,\n    heading: float = 0.0,\n    pitch: float = -90.0,\n    roll: float = 0.0,\n) -&gt; None:\n    \"\"\"Set camera position immediately.\"\"\"\n    self.center = [latitude, longitude]\n    self.camera_height = height\n    self.heading = heading\n    self.pitch = pitch\n    self.roll = roll\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_cesium_world_terrain","title":"<code>set_cesium_world_terrain(self, request_water_mask=False, request_vertex_normals=False)</code>","text":"<p>Set Cesium World Terrain as the terrain provider.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_cesium_world_terrain(\n    self, request_water_mask: bool = False, request_vertex_normals: bool = False\n) -&gt; None:\n    \"\"\"Set Cesium World Terrain as the terrain provider.\"\"\"\n    terrain_config = {\n        \"type\": \"cesium-world-terrain\",\n        \"requestWaterMask\": request_water_mask,\n        \"requestVertexNormals\": request_vertex_normals,\n    }\n    self.set_terrain(terrain_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_imagery","title":"<code>set_imagery(self, imagery_config)</code>","text":"<p>Set imagery provider for the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_imagery(self, imagery_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Set imagery provider for the globe.\"\"\"\n    self.call_js_method(\"setImagery\", imagery_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_scene_mode_2d","title":"<code>set_scene_mode_2d(self)</code>","text":"<p>Set scene to 2D mode.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_scene_mode_2d(self) -&gt; None:\n    \"\"\"Set scene to 2D mode.\"\"\"\n    self.call_js_method(\"setScene2D\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_scene_mode_3d","title":"<code>set_scene_mode_3d(self)</code>","text":"<p>Set scene to 3D mode.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_scene_mode_3d(self) -&gt; None:\n    \"\"\"Set scene to 3D mode.\"\"\"\n    self.call_js_method(\"setScene3D\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_scene_mode_columbus","title":"<code>set_scene_mode_columbus(self)</code>","text":"<p>Set scene to Columbus view (2.5D).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_scene_mode_columbus(self) -&gt; None:\n    \"\"\"Set scene to Columbus view (2.5D).\"\"\"\n    self.call_js_method(\"setSceneColumbusView\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set terrain provider for the globe.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set terrain provider for the globe.\"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.CesiumMap.zoom_to_entity","title":"<code>zoom_to_entity(self, entity_id)</code>","text":"<p>Zoom the camera to focus on a specific entity.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def zoom_to_entity(self, entity_id: str) -&gt; None:\n    \"\"\"Zoom the camera to focus on a specific entity.\"\"\"\n    self.call_js_method(\"zoomToEntity\", entity_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap","title":"<code> DeckGLMap            (MapWidget)         </code>","text":"<p>DeckGL implementation of the map widget for high-performance data visualization.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class DeckGLMap(MapWidget):\n    \"\"\"DeckGL implementation of the map widget for high-performance data visualization.\"\"\"\n\n    # DeckGL-specific traits\n    controller = traitlets.Bool(True).tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    max_zoom = traitlets.Float(20.0).tag(sync=True)\n    min_zoom = traitlets.Float(0.0).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"deck_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"deck_widget.css\"\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        controller: bool = True,\n        max_zoom: float = 20.0,\n        min_zoom: float = 0.0,\n        **kwargs,\n    ):\n        \"\"\"Initialize DeckGL map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            controller: Enable map controls (pan, zoom, rotate)\n            max_zoom: Maximum zoom level\n            min_zoom: Minimum zoom level\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            bearing=bearing,\n            pitch=pitch,\n            controller=controller,\n            max_zoom=max_zoom,\n            min_zoom=min_zoom,\n            **kwargs,\n        )\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def set_view_state(\n        self,\n        longitude: Optional[float] = None,\n        latitude: Optional[float] = None,\n        zoom: Optional[float] = None,\n        bearing: Optional[float] = None,\n        pitch: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Set the view state of the map.\"\"\"\n        view_state = {}\n        if longitude is not None:\n            view_state[\"longitude\"] = longitude\n        if latitude is not None:\n            view_state[\"latitude\"] = latitude\n        if zoom is not None:\n            view_state[\"zoom\"] = zoom\n        if bearing is not None:\n            view_state[\"bearing\"] = bearing\n        if pitch is not None:\n            view_state[\"pitch\"] = pitch\n\n        self.call_js_method(\"setViewState\", view_state)\n\n    def add_scatterplot_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_radius: Union[str, int, float] = 100,\n        get_color: Union[str, List[int]] = [255, 0, 0, 255],\n        radius_scale: float = 1.0,\n        radius_min_pixels: int = 1,\n        radius_max_pixels: int = 100,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a scatterplot layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"ScatterplotLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getRadius\": get_radius,\n            \"getFillColor\": get_color,\n            \"radiusScale\": radius_scale,\n            \"radiusMinPixels\": radius_min_pixels,\n            \"radiusMaxPixels\": radius_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_line_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_source_position: str = \"sourcePosition\",\n        get_target_position: str = \"targetPosition\",\n        get_color: Union[str, List[int]] = [0, 255, 0, 255],\n        get_width: Union[str, int, float] = 1,\n        width_scale: float = 1.0,\n        width_min_pixels: int = 1,\n        width_max_pixels: int = 10,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a line layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"LineLayer\",\n            \"data\": data,\n            \"getSourcePosition\": get_source_position,\n            \"getTargetPosition\": get_target_position,\n            \"getColor\": get_color,\n            \"getWidth\": get_width,\n            \"widthScale\": width_scale,\n            \"widthMinPixels\": width_min_pixels,\n            \"widthMaxPixels\": width_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_arc_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_source_position: str = \"sourcePosition\",\n        get_target_position: str = \"targetPosition\",\n        get_source_color: Union[str, List[int]] = [255, 0, 0, 255],\n        get_target_color: Union[str, List[int]] = [0, 255, 0, 255],\n        get_width: Union[str, int, float] = 1,\n        width_scale: float = 1.0,\n        width_min_pixels: int = 1,\n        width_max_pixels: int = 10,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add an arc layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"ArcLayer\",\n            \"data\": data,\n            \"getSourcePosition\": get_source_position,\n            \"getTargetPosition\": get_target_position,\n            \"getSourceColor\": get_source_color,\n            \"getTargetColor\": get_target_color,\n            \"getWidth\": get_width,\n            \"widthScale\": width_scale,\n            \"widthMinPixels\": width_min_pixels,\n            \"widthMaxPixels\": width_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_path_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_path: str = \"path\",\n        get_color: Union[str, List[int]] = [255, 0, 0, 255],\n        get_width: Union[str, int, float] = 1,\n        width_scale: float = 1.0,\n        width_min_pixels: int = 1,\n        width_max_pixels: int = 10,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a path layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"PathLayer\",\n            \"data\": data,\n            \"getPath\": get_path,\n            \"getColor\": get_color,\n            \"getWidth\": get_width,\n            \"widthScale\": width_scale,\n            \"widthMinPixels\": width_min_pixels,\n            \"widthMaxPixels\": width_max_pixels,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_polygon_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_polygon: str = \"polygon\",\n        get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n        get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n        get_line_width: Union[str, int, float] = 1,\n        filled: bool = True,\n        stroked: bool = True,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a polygon layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"PolygonLayer\",\n            \"data\": data,\n            \"getPolygon\": get_polygon,\n            \"getFillColor\": get_fill_color,\n            \"getLineColor\": get_line_color,\n            \"getLineWidth\": get_line_width,\n            \"filled\": filled,\n            \"stroked\": stroked,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        data: Dict[str, Any],\n        get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n        get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n        get_line_width: Union[str, int, float] = 1,\n        get_radius: Union[str, int, float] = 100,\n        filled: bool = True,\n        stroked: bool = True,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"GeoJsonLayer\",\n            \"data\": data,\n            \"getFillColor\": get_fill_color,\n            \"getLineColor\": get_line_color,\n            \"getLineWidth\": get_line_width,\n            \"getRadius\": get_radius,\n            \"filled\": filled,\n            \"stroked\": stroked,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_hexagon_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_weight: Union[str, int, float] = 1,\n        radius: int = 1000,\n        elevation_scale: float = 4,\n        elevation_range: List[int] = [0, 1000],\n        coverage: float = 1.0,\n        color_range: Optional[List[List[int]]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a hexagon layer to the map.\"\"\"\n        if color_range is None:\n            color_range = [\n                [1, 152, 189],\n                [73, 227, 206],\n                [216, 254, 181],\n                [254, 237, 177],\n                [254, 173, 84],\n                [209, 55, 78],\n            ]\n\n        layer_config = {\n            \"type\": \"HexagonLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getWeight\": get_weight,\n            \"radius\": radius,\n            \"elevationScale\": elevation_scale,\n            \"elevationRange\": elevation_range,\n            \"coverage\": coverage,\n            \"colorRange\": color_range,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_grid_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_weight: Union[str, int, float] = 1,\n        cell_size: int = 200,\n        elevation_scale: float = 4,\n        elevation_range: List[int] = [0, 1000],\n        coverage: float = 1.0,\n        color_range: Optional[List[List[int]]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a grid layer to the map.\"\"\"\n        if color_range is None:\n            color_range = [\n                [1, 152, 189],\n                [73, 227, 206],\n                [216, 254, 181],\n                [254, 237, 177],\n                [254, 173, 84],\n                [209, 55, 78],\n            ]\n\n        layer_config = {\n            \"type\": \"GridLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getWeight\": get_weight,\n            \"cellSize\": cell_size,\n            \"elevationScale\": elevation_scale,\n            \"elevationRange\": elevation_range,\n            \"coverage\": coverage,\n            \"colorRange\": color_range,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_heatmap_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_weight: Union[str, int, float] = 1,\n        radius_pixels: int = 60,\n        intensity: float = 1.0,\n        threshold: float = 0.05,\n        color_range: Optional[List[List[int]]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a heatmap layer to the map.\"\"\"\n        if color_range is None:\n            color_range = [\n                [255, 255, 178],\n                [254, 204, 92],\n                [253, 141, 60],\n                [240, 59, 32],\n                [189, 0, 38],\n            ]\n\n        layer_config = {\n            \"type\": \"HeatmapLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getWeight\": get_weight,\n            \"radiusPixels\": radius_pixels,\n            \"intensity\": intensity,\n            \"threshold\": threshold,\n            \"colorRange\": color_range,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_column_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_elevation: Union[str, int, float] = 0,\n        get_fill_color: Union[str, List[int]] = [255, 0, 0, 255],\n        get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n        radius: int = 1000,\n        elevation_scale: float = 1.0,\n        filled: bool = True,\n        stroked: bool = False,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a column layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"ColumnLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getElevation\": get_elevation,\n            \"getFillColor\": get_fill_color,\n            \"getLineColor\": get_line_color,\n            \"radius\": radius,\n            \"elevationScale\": elevation_scale,\n            \"filled\": filled,\n            \"stroked\": stroked,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_text_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_text: str = \"text\",\n        get_color: Union[str, List[int]] = [0, 0, 0, 255],\n        get_size: Union[str, int, float] = 32,\n        get_angle: Union[str, int, float] = 0,\n        font_family: str = \"Monaco, monospace\",\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add a text layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"TextLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getText\": get_text,\n            \"getColor\": get_color,\n            \"getSize\": get_size,\n            \"getAngle\": get_angle,\n            \"fontFamily\": font_family,\n            **kwargs,\n        }\n        self.add_layer(layer_id, layer_config)\n\n    def add_icon_layer(\n        self,\n        layer_id: str,\n        data: List[Dict[str, Any]],\n        get_position: str = \"position\",\n        get_icon: str = \"icon\",\n        get_color: Union[str, List[int]] = [255, 255, 255, 255],\n        get_size: Union[str, int, float] = 1,\n        size_scale: float = 1.0,\n        icon_atlas: Optional[str] = None,\n        icon_mapping: Optional[Dict[str, Any]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Add an icon layer to the map.\"\"\"\n        layer_config = {\n            \"type\": \"IconLayer\",\n            \"data\": data,\n            \"getPosition\": get_position,\n            \"getIcon\": get_icon,\n            \"getColor\": get_color,\n            \"getSize\": get_size,\n            \"sizeScale\": size_scale,\n            **kwargs,\n        }\n\n        if icon_atlas:\n            layer_config[\"iconAtlas\"] = icon_atlas\n        if icon_mapping:\n            layer_config[\"iconMapping\"] = icon_mapping\n\n        self.add_layer(layer_id, layer_config)\n\n    def update_layer(self, layer_id: str, **props) -&gt; None:\n        \"\"\"Update properties of an existing layer.\"\"\"\n        self.call_js_method(\"updateLayer\", layer_id, props)\n\n    def fit_bounds(\n        self,\n        bounds: List[List[float]],\n        padding: Union[int, Dict[str, int]] = 20,\n        max_zoom: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Fit the map to given bounds.\n\n        Args:\n            bounds: Bounds in format [[minLng, minLat], [maxLng, maxLat]]\n            padding: Padding around bounds in pixels\n            max_zoom: Maximum zoom level when fitting\n        \"\"\"\n        options = {\"padding\": padding}\n        if max_zoom is not None:\n            options[\"maxZoom\"] = max_zoom\n\n        self.call_js_method(\"fitBounds\", bounds, options)\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers from the map.\"\"\"\n        self.clear_layers()\n\n    def enable_controller(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable map controls.\"\"\"\n        self.controller = enabled\n\n    def set_zoom_range(self, min_zoom: float, max_zoom: float) -&gt; None:\n        \"\"\"Set the zoom range for the map.\"\"\"\n        self.min_zoom = min_zoom\n        self.max_zoom = max_zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, width='100%', height='600px', bearing=0.0, pitch=0.0, controller=True, max_zoom=20.0, min_zoom=0.0, **kwargs)</code>  <code>special</code>","text":"<p>Initialize DeckGL map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>controller</code> <code>bool</code> <p>Enable map controls (pan, zoom, rotate)</p> <code>True</code> <code>max_zoom</code> <code>float</code> <p>Maximum zoom level</p> <code>20.0</code> <code>min_zoom</code> <code>float</code> <p>Minimum zoom level</p> <code>0.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    controller: bool = True,\n    max_zoom: float = 20.0,\n    min_zoom: float = 0.0,\n    **kwargs,\n):\n    \"\"\"Initialize DeckGL map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        controller: Enable map controls (pan, zoom, rotate)\n        max_zoom: Maximum zoom level\n        min_zoom: Minimum zoom level\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        bearing=bearing,\n        pitch=pitch,\n        controller=controller,\n        max_zoom=max_zoom,\n        min_zoom=min_zoom,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_arc_layer","title":"<code>add_arc_layer(self, layer_id, data, get_source_position='sourcePosition', get_target_position='targetPosition', get_source_color=[255, 0, 0, 255], get_target_color=[0, 255, 0, 255], get_width=1, width_scale=1.0, width_min_pixels=1, width_max_pixels=10, **kwargs)</code>","text":"<p>Add an arc layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_arc_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_source_position: str = \"sourcePosition\",\n    get_target_position: str = \"targetPosition\",\n    get_source_color: Union[str, List[int]] = [255, 0, 0, 255],\n    get_target_color: Union[str, List[int]] = [0, 255, 0, 255],\n    get_width: Union[str, int, float] = 1,\n    width_scale: float = 1.0,\n    width_min_pixels: int = 1,\n    width_max_pixels: int = 10,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add an arc layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"ArcLayer\",\n        \"data\": data,\n        \"getSourcePosition\": get_source_position,\n        \"getTargetPosition\": get_target_position,\n        \"getSourceColor\": get_source_color,\n        \"getTargetColor\": get_target_color,\n        \"getWidth\": get_width,\n        \"widthScale\": width_scale,\n        \"widthMinPixels\": width_min_pixels,\n        \"widthMaxPixels\": width_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_column_layer","title":"<code>add_column_layer(self, layer_id, data, get_position='position', get_elevation=0, get_fill_color=[255, 0, 0, 255], get_line_color=[0, 0, 0, 255], radius=1000, elevation_scale=1.0, filled=True, stroked=False, **kwargs)</code>","text":"<p>Add a column layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_column_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_elevation: Union[str, int, float] = 0,\n    get_fill_color: Union[str, List[int]] = [255, 0, 0, 255],\n    get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n    radius: int = 1000,\n    elevation_scale: float = 1.0,\n    filled: bool = True,\n    stroked: bool = False,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a column layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"ColumnLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getElevation\": get_elevation,\n        \"getFillColor\": get_fill_color,\n        \"getLineColor\": get_line_color,\n        \"radius\": radius,\n        \"elevationScale\": elevation_scale,\n        \"filled\": filled,\n        \"stroked\": stroked,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, data, get_fill_color=[255, 0, 0, 128], get_line_color=[0, 0, 0, 255], get_line_width=1, get_radius=100, filled=True, stroked=True, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    data: Dict[str, Any],\n    get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n    get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n    get_line_width: Union[str, int, float] = 1,\n    get_radius: Union[str, int, float] = 100,\n    filled: bool = True,\n    stroked: bool = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"GeoJsonLayer\",\n        \"data\": data,\n        \"getFillColor\": get_fill_color,\n        \"getLineColor\": get_line_color,\n        \"getLineWidth\": get_line_width,\n        \"getRadius\": get_radius,\n        \"filled\": filled,\n        \"stroked\": stroked,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_grid_layer","title":"<code>add_grid_layer(self, layer_id, data, get_position='position', get_weight=1, cell_size=200, elevation_scale=4, elevation_range=[0, 1000], coverage=1.0, color_range=None, **kwargs)</code>","text":"<p>Add a grid layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_grid_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_weight: Union[str, int, float] = 1,\n    cell_size: int = 200,\n    elevation_scale: float = 4,\n    elevation_range: List[int] = [0, 1000],\n    coverage: float = 1.0,\n    color_range: Optional[List[List[int]]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a grid layer to the map.\"\"\"\n    if color_range is None:\n        color_range = [\n            [1, 152, 189],\n            [73, 227, 206],\n            [216, 254, 181],\n            [254, 237, 177],\n            [254, 173, 84],\n            [209, 55, 78],\n        ]\n\n    layer_config = {\n        \"type\": \"GridLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getWeight\": get_weight,\n        \"cellSize\": cell_size,\n        \"elevationScale\": elevation_scale,\n        \"elevationRange\": elevation_range,\n        \"coverage\": coverage,\n        \"colorRange\": color_range,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_heatmap_layer","title":"<code>add_heatmap_layer(self, layer_id, data, get_position='position', get_weight=1, radius_pixels=60, intensity=1.0, threshold=0.05, color_range=None, **kwargs)</code>","text":"<p>Add a heatmap layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_heatmap_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_weight: Union[str, int, float] = 1,\n    radius_pixels: int = 60,\n    intensity: float = 1.0,\n    threshold: float = 0.05,\n    color_range: Optional[List[List[int]]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a heatmap layer to the map.\"\"\"\n    if color_range is None:\n        color_range = [\n            [255, 255, 178],\n            [254, 204, 92],\n            [253, 141, 60],\n            [240, 59, 32],\n            [189, 0, 38],\n        ]\n\n    layer_config = {\n        \"type\": \"HeatmapLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getWeight\": get_weight,\n        \"radiusPixels\": radius_pixels,\n        \"intensity\": intensity,\n        \"threshold\": threshold,\n        \"colorRange\": color_range,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_hexagon_layer","title":"<code>add_hexagon_layer(self, layer_id, data, get_position='position', get_weight=1, radius=1000, elevation_scale=4, elevation_range=[0, 1000], coverage=1.0, color_range=None, **kwargs)</code>","text":"<p>Add a hexagon layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_hexagon_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_weight: Union[str, int, float] = 1,\n    radius: int = 1000,\n    elevation_scale: float = 4,\n    elevation_range: List[int] = [0, 1000],\n    coverage: float = 1.0,\n    color_range: Optional[List[List[int]]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a hexagon layer to the map.\"\"\"\n    if color_range is None:\n        color_range = [\n            [1, 152, 189],\n            [73, 227, 206],\n            [216, 254, 181],\n            [254, 237, 177],\n            [254, 173, 84],\n            [209, 55, 78],\n        ]\n\n    layer_config = {\n        \"type\": \"HexagonLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getWeight\": get_weight,\n        \"radius\": radius,\n        \"elevationScale\": elevation_scale,\n        \"elevationRange\": elevation_range,\n        \"coverage\": coverage,\n        \"colorRange\": color_range,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_icon_layer","title":"<code>add_icon_layer(self, layer_id, data, get_position='position', get_icon='icon', get_color=[255, 255, 255, 255], get_size=1, size_scale=1.0, icon_atlas=None, icon_mapping=None, **kwargs)</code>","text":"<p>Add an icon layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_icon_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_icon: str = \"icon\",\n    get_color: Union[str, List[int]] = [255, 255, 255, 255],\n    get_size: Union[str, int, float] = 1,\n    size_scale: float = 1.0,\n    icon_atlas: Optional[str] = None,\n    icon_mapping: Optional[Dict[str, Any]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add an icon layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"IconLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getIcon\": get_icon,\n        \"getColor\": get_color,\n        \"getSize\": get_size,\n        \"sizeScale\": size_scale,\n        **kwargs,\n    }\n\n    if icon_atlas:\n        layer_config[\"iconAtlas\"] = icon_atlas\n    if icon_mapping:\n        layer_config[\"iconMapping\"] = icon_mapping\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_line_layer","title":"<code>add_line_layer(self, layer_id, data, get_source_position='sourcePosition', get_target_position='targetPosition', get_color=[0, 255, 0, 255], get_width=1, width_scale=1.0, width_min_pixels=1, width_max_pixels=10, **kwargs)</code>","text":"<p>Add a line layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_line_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_source_position: str = \"sourcePosition\",\n    get_target_position: str = \"targetPosition\",\n    get_color: Union[str, List[int]] = [0, 255, 0, 255],\n    get_width: Union[str, int, float] = 1,\n    width_scale: float = 1.0,\n    width_min_pixels: int = 1,\n    width_max_pixels: int = 10,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a line layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"LineLayer\",\n        \"data\": data,\n        \"getSourcePosition\": get_source_position,\n        \"getTargetPosition\": get_target_position,\n        \"getColor\": get_color,\n        \"getWidth\": get_width,\n        \"widthScale\": width_scale,\n        \"widthMinPixels\": width_min_pixels,\n        \"widthMaxPixels\": width_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_path_layer","title":"<code>add_path_layer(self, layer_id, data, get_path='path', get_color=[255, 0, 0, 255], get_width=1, width_scale=1.0, width_min_pixels=1, width_max_pixels=10, **kwargs)</code>","text":"<p>Add a path layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_path_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_path: str = \"path\",\n    get_color: Union[str, List[int]] = [255, 0, 0, 255],\n    get_width: Union[str, int, float] = 1,\n    width_scale: float = 1.0,\n    width_min_pixels: int = 1,\n    width_max_pixels: int = 10,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a path layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"PathLayer\",\n        \"data\": data,\n        \"getPath\": get_path,\n        \"getColor\": get_color,\n        \"getWidth\": get_width,\n        \"widthScale\": width_scale,\n        \"widthMinPixels\": width_min_pixels,\n        \"widthMaxPixels\": width_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_polygon_layer","title":"<code>add_polygon_layer(self, layer_id, data, get_polygon='polygon', get_fill_color=[255, 0, 0, 128], get_line_color=[0, 0, 0, 255], get_line_width=1, filled=True, stroked=True, **kwargs)</code>","text":"<p>Add a polygon layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_polygon_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_polygon: str = \"polygon\",\n    get_fill_color: Union[str, List[int]] = [255, 0, 0, 128],\n    get_line_color: Union[str, List[int]] = [0, 0, 0, 255],\n    get_line_width: Union[str, int, float] = 1,\n    filled: bool = True,\n    stroked: bool = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a polygon layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"PolygonLayer\",\n        \"data\": data,\n        \"getPolygon\": get_polygon,\n        \"getFillColor\": get_fill_color,\n        \"getLineColor\": get_line_color,\n        \"getLineWidth\": get_line_width,\n        \"filled\": filled,\n        \"stroked\": stroked,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_scatterplot_layer","title":"<code>add_scatterplot_layer(self, layer_id, data, get_position='position', get_radius=100, get_color=[255, 0, 0, 255], radius_scale=1.0, radius_min_pixels=1, radius_max_pixels=100, **kwargs)</code>","text":"<p>Add a scatterplot layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_scatterplot_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_radius: Union[str, int, float] = 100,\n    get_color: Union[str, List[int]] = [255, 0, 0, 255],\n    radius_scale: float = 1.0,\n    radius_min_pixels: int = 1,\n    radius_max_pixels: int = 100,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a scatterplot layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"ScatterplotLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getRadius\": get_radius,\n        \"getFillColor\": get_color,\n        \"radiusScale\": radius_scale,\n        \"radiusMinPixels\": radius_min_pixels,\n        \"radiusMaxPixels\": radius_max_pixels,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.add_text_layer","title":"<code>add_text_layer(self, layer_id, data, get_position='position', get_text='text', get_color=[0, 0, 0, 255], get_size=32, get_angle=0, font_family='Monaco, monospace', **kwargs)</code>","text":"<p>Add a text layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_text_layer(\n    self,\n    layer_id: str,\n    data: List[Dict[str, Any]],\n    get_position: str = \"position\",\n    get_text: str = \"text\",\n    get_color: Union[str, List[int]] = [0, 0, 0, 255],\n    get_size: Union[str, int, float] = 32,\n    get_angle: Union[str, int, float] = 0,\n    font_family: str = \"Monaco, monospace\",\n    **kwargs,\n) -&gt; None:\n    \"\"\"Add a text layer to the map.\"\"\"\n    layer_config = {\n        \"type\": \"TextLayer\",\n        \"data\": data,\n        \"getPosition\": get_position,\n        \"getText\": get_text,\n        \"getColor\": get_color,\n        \"getSize\": get_size,\n        \"getAngle\": get_angle,\n        \"fontFamily\": font_family,\n        **kwargs,\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers from the map.\"\"\"\n    self.clear_layers()\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.enable_controller","title":"<code>enable_controller(self, enabled=True)</code>","text":"<p>Enable or disable map controls.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_controller(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable map controls.\"\"\"\n    self.controller = enabled\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=20, max_zoom=None)</code>","text":"<p>Fit the map to given bounds.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>List[List[float]]</code> <p>Bounds in format [[minLng, minLat], [maxLng, maxLat]]</p> required <code>padding</code> <code>Union[int, Dict[str, int]]</code> <p>Padding around bounds in pixels</p> <code>20</code> <code>max_zoom</code> <code>Optional[float]</code> <p>Maximum zoom level when fitting</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(\n    self,\n    bounds: List[List[float]],\n    padding: Union[int, Dict[str, int]] = 20,\n    max_zoom: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Fit the map to given bounds.\n\n    Args:\n        bounds: Bounds in format [[minLng, minLat], [maxLng, maxLat]]\n        padding: Padding around bounds in pixels\n        max_zoom: Maximum zoom level when fitting\n    \"\"\"\n    options = {\"padding\": padding}\n    if max_zoom is not None:\n        options[\"maxZoom\"] = max_zoom\n\n    self.call_js_method(\"fitBounds\", bounds, options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_view_state","title":"<code>set_view_state(self, longitude=None, latitude=None, zoom=None, bearing=None, pitch=None)</code>","text":"<p>Set the view state of the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_view_state(\n    self,\n    longitude: Optional[float] = None,\n    latitude: Optional[float] = None,\n    zoom: Optional[float] = None,\n    bearing: Optional[float] = None,\n    pitch: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Set the view state of the map.\"\"\"\n    view_state = {}\n    if longitude is not None:\n        view_state[\"longitude\"] = longitude\n    if latitude is not None:\n        view_state[\"latitude\"] = latitude\n    if zoom is not None:\n        view_state[\"zoom\"] = zoom\n    if bearing is not None:\n        view_state[\"bearing\"] = bearing\n    if pitch is not None:\n        view_state[\"pitch\"] = pitch\n\n    self.call_js_method(\"setViewState\", view_state)\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.set_zoom_range","title":"<code>set_zoom_range(self, min_zoom, max_zoom)</code>","text":"<p>Set the zoom range for the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_zoom_range(self, min_zoom: float, max_zoom: float) -&gt; None:\n    \"\"\"Set the zoom range for the map.\"\"\"\n    self.min_zoom = min_zoom\n    self.max_zoom = max_zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.DeckGLMap.update_layer","title":"<code>update_layer(self, layer_id, **props)</code>","text":"<p>Update properties of an existing layer.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def update_layer(self, layer_id: str, **props) -&gt; None:\n    \"\"\"Update properties of an existing layer.\"\"\"\n    self.call_js_method(\"updateLayer\", layer_id, props)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap","title":"<code> MapLibreMap            (MapWidget)         </code>","text":"<p>MapLibre GL JS implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapLibreMap(MapWidget):\n    \"\"\"MapLibre GL JS implementation of the map widget.\"\"\"\n\n    # MapLibre-specific traits\n    map_style = traitlets.Unicode(\"https://demotiles.maplibre.org/style.json\").tag(\n        sync=True\n    )\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"maplibre_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"maplibre_widget.css\"\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        map_style: str = \"https://demotiles.maplibre.org/style.json\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        **kwargs,\n    ):\n        \"\"\"Initialize MapLibre map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            map_style: MapLibre style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            map_style=map_style,\n            bearing=bearing,\n            pitch=pitch,\n            **kwargs,\n        )\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.map_style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def add_raster_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, map_style='https://demotiles.maplibre.org/style.json', width='100%', height='600px', bearing=0.0, pitch=0.0, **kwargs)</code>  <code>special</code>","text":"<p>Initialize MapLibre map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>map_style</code> <code>str</code> <p>MapLibre style URL or style object</p> <code>'https://demotiles.maplibre.org/style.json'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    map_style: str = \"https://demotiles.maplibre.org/style.json\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    **kwargs,\n):\n    \"\"\"Initialize MapLibre map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        map_style: MapLibre style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        map_style=map_style,\n        bearing=bearing,\n        pitch=pitch,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_raster_layer","title":"<code>add_raster_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_raster_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.map_style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget","title":"<code> MapWidget            (AnyWidget)         </code>","text":"<p>Base class for interactive map widgets using anywidget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapWidget(anywidget.AnyWidget):\n    \"\"\"Base class for interactive map widgets using anywidget.\"\"\"\n\n    # Widget traits for communication with JavaScript\n    center = traitlets.List([0.0, 0.0]).tag(sync=True)\n    zoom = traitlets.Float(2.0).tag(sync=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True)\n    style = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Communication traits\n    _js_calls = traitlets.List([]).tag(sync=True)\n    _js_events = traitlets.List([]).tag(sync=True)\n\n    # Internal state\n    _layers = traitlets.Dict({}).tag(sync=True)\n    _sources = traitlets.Dict({}).tag(sync=True)\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the map widget.\"\"\"\n        super().__init__(**kwargs)\n        self._event_handlers = {}\n        self._js_method_counter = 0\n\n    def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n        \"\"\"Call a JavaScript method on the map instance.\"\"\"\n        call_data = {\n            \"id\": self._js_method_counter,\n            \"method\": method_name,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n        self._js_method_counter += 1\n\n        # Trigger sync by creating new list\n        current_calls = list(self._js_calls)\n        current_calls.append(call_data)\n        self._js_calls = current_calls\n\n    def on_map_event(self, event_type: str, callback):\n        \"\"\"Register a callback for map events.\"\"\"\n        if event_type not in self._event_handlers:\n            self._event_handlers[event_type] = []\n        self._event_handlers[event_type].append(callback)\n\n    @traitlets.observe(\"_js_events\")\n    def _handle_js_events(self, change):\n        \"\"\"Handle events from JavaScript.\"\"\"\n        events = change[\"new\"]\n        for event in events:\n            event_type = event.get(\"type\")\n            if event_type in self._event_handlers:\n                for handler in self._event_handlers[event_type]:\n                    handler(event)\n\n    def set_center(self, lat: float, lng: float) -&gt; None:\n        \"\"\"Set the map center.\"\"\"\n        self.center = [lat, lng]\n\n    def set_zoom(self, zoom: float) -&gt; None:\n        \"\"\"Set the map zoom level.\"\"\"\n        self.zoom = zoom\n\n    def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n        \"\"\"Fly to a specific location.\"\"\"\n        options = {\"center\": [lat, lng]}\n        if zoom is not None:\n            options[\"zoom\"] = zoom\n        self.call_js_method(\"flyTo\", options)\n\n    def add_layer(self, layer_id: str, layer_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a layer to the map.\"\"\"\n        # Store layer in local state for persistence\n        current_layers = dict(self._layers)\n        current_layers[layer_id] = layer_config\n        self._layers = current_layers\n\n        self.call_js_method(\"addLayer\", layer_config, layer_id)\n\n    def remove_layer(self, layer_id: str) -&gt; None:\n        \"\"\"Remove a layer from the map.\"\"\"\n        # Remove from local state\n        current_layers = dict(self._layers)\n        if layer_id in current_layers:\n            del current_layers[layer_id]\n            self._layers = current_layers\n\n        self.call_js_method(\"removeLayer\", layer_id)\n\n    def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a data source to the map.\"\"\"\n        # Store source in local state for persistence\n        current_sources = dict(self._sources)\n        current_sources[source_id] = source_config\n        self._sources = current_sources\n\n        self.call_js_method(\"addSource\", source_id, source_config)\n\n    def remove_source(self, source_id: str) -&gt; None:\n        \"\"\"Remove a data source from the map.\"\"\"\n        # Remove from local state\n        current_sources = dict(self._sources)\n        if source_id in current_sources:\n            del current_sources[source_id]\n            self._sources = current_sources\n\n        self.call_js_method(\"removeSource\", source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the map widget.\"\"\"\n    super().__init__(**kwargs)\n    self._event_handlers = {}\n    self._js_method_counter = 0\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.add_layer","title":"<code>add_layer(self, layer_id, layer_config)</code>","text":"<p>Add a layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_layer(self, layer_id: str, layer_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a layer to the map.\"\"\"\n    # Store layer in local state for persistence\n    current_layers = dict(self._layers)\n    current_layers[layer_id] = layer_config\n    self._layers = current_layers\n\n    self.call_js_method(\"addLayer\", layer_config, layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.add_source","title":"<code>add_source(self, source_id, source_config)</code>","text":"<p>Add a data source to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a data source to the map.\"\"\"\n    # Store source in local state for persistence\n    current_sources = dict(self._sources)\n    current_sources[source_id] = source_config\n    self._sources = current_sources\n\n    self.call_js_method(\"addSource\", source_id, source_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.call_js_method","title":"<code>call_js_method(self, method_name, *args, **kwargs)</code>","text":"<p>Call a JavaScript method on the map instance.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n    \"\"\"Call a JavaScript method on the map instance.\"\"\"\n    call_data = {\n        \"id\": self._js_method_counter,\n        \"method\": method_name,\n        \"args\": args,\n        \"kwargs\": kwargs,\n    }\n    self._js_method_counter += 1\n\n    # Trigger sync by creating new list\n    current_calls = list(self._js_calls)\n    current_calls.append(call_data)\n    self._js_calls = current_calls\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.fly_to","title":"<code>fly_to(self, lat, lng, zoom=None)</code>","text":"<p>Fly to a specific location.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n    \"\"\"Fly to a specific location.\"\"\"\n    options = {\"center\": [lat, lng]}\n    if zoom is not None:\n        options[\"zoom\"] = zoom\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.on_map_event","title":"<code>on_map_event(self, event_type, callback)</code>","text":"<p>Register a callback for map events.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def on_map_event(self, event_type: str, callback):\n    \"\"\"Register a callback for map events.\"\"\"\n    if event_type not in self._event_handlers:\n        self._event_handlers[event_type] = []\n    self._event_handlers[event_type].append(callback)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.remove_layer","title":"<code>remove_layer(self, layer_id)</code>","text":"<p>Remove a layer from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_layer(self, layer_id: str) -&gt; None:\n    \"\"\"Remove a layer from the map.\"\"\"\n    # Remove from local state\n    current_layers = dict(self._layers)\n    if layer_id in current_layers:\n        del current_layers[layer_id]\n        self._layers = current_layers\n\n    self.call_js_method(\"removeLayer\", layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.remove_source","title":"<code>remove_source(self, source_id)</code>","text":"<p>Remove a data source from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_source(self, source_id: str) -&gt; None:\n    \"\"\"Remove a data source from the map.\"\"\"\n    # Remove from local state\n    current_sources = dict(self._sources)\n    if source_id in current_sources:\n        del current_sources[source_id]\n        self._sources = current_sources\n\n    self.call_js_method(\"removeSource\", source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.set_center","title":"<code>set_center(self, lat, lng)</code>","text":"<p>Set the map center.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_center(self, lat: float, lng: float) -&gt; None:\n    \"\"\"Set the map center.\"\"\"\n    self.center = [lat, lng]\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.set_zoom","title":"<code>set_zoom(self, zoom)</code>","text":"<p>Set the map zoom level.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_zoom(self, zoom: float) -&gt; None:\n    \"\"\"Set the map zoom level.\"\"\"\n    self.zoom = zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap","title":"<code> MapboxMap            (MapWidget)         </code>","text":"<p>Mapbox GL JS implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapboxMap(MapWidget):\n    \"\"\"Mapbox GL JS implementation of the map widget.\"\"\"\n\n    # Mapbox-specific traits\n    map_style = traitlets.Unicode(\"mapbox://styles/mapbox/streets-v12\").tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"mapbox_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"mapbox_widget.css\"\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        map_style: str = \"mapbox://styles/mapbox/streets-v12\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        access_token: str = \"\",\n        **kwargs,\n    ):\n        \"\"\"Initialize Mapbox map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            map_style: Mapbox style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            access_token: Mapbox access token (required for Mapbox services).\n                         Get a free token at https://account.mapbox.com/access-tokens/\n                         Can also be set via MAPBOX_TOKEN environment variable.\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            map_style=map_style,\n            bearing=bearing,\n            pitch=pitch,\n            access_token=access_token,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Mapbox access token from environment or return demo token.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"MAPBOX_TOKEN\") or os.environ.get(\"MAPBOX_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Mapbox access token.\"\"\"\n        self.access_token = token\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.map_style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def add_raster_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_control(\n        self,\n        control_type: str,\n        position: str = \"top-right\",\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a control to the map.\n\n        Args:\n            control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            options: Additional options for the control\n        \"\"\"\n        control_options = options or {}\n        control_options[\"position\"] = position\n        self.call_js_method(\"addControl\", control_type, control_options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set 3D terrain on the map.\n\n        Args:\n            terrain_config: Terrain configuration dict, or None to remove terrain\n        \"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set atmospheric fog on the map.\n\n        Args:\n            fog_config: Fog configuration dict, or None to remove fog\n        \"\"\"\n        self.call_js_method(\"setFog\", fog_config)\n\n    def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n        \"\"\"Add 3D buildings layer to the map.\"\"\"\n        # Add the layer for 3D buildings\n        layer_config = {\n            \"id\": layer_id,\n            \"source\": \"composite\",\n            \"source-layer\": \"building\",\n            \"filter\": [\"==\", \"extrude\", \"true\"],\n            \"type\": \"fill-extrusion\",\n            \"minzoom\": 15,\n            \"paint\": {\n                \"fill-extrusion-color\": \"#aaa\",\n                \"fill-extrusion-height\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"height\"],\n                ],\n                \"fill-extrusion-base\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"min_height\"],\n                ],\n                \"fill-extrusion-opacity\": 0.6,\n            },\n        }\n        self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, map_style='mapbox://styles/mapbox/streets-v12', width='100%', height='600px', bearing=0.0, pitch=0.0, access_token='', **kwargs)</code>  <code>special</code>","text":"<p>Initialize Mapbox map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>map_style</code> <code>str</code> <p>Mapbox style URL or style object</p> <code>'mapbox://styles/mapbox/streets-v12'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Mapbox access token (required for Mapbox services).          Get a free token at https://account.mapbox.com/access-tokens/          Can also be set via MAPBOX_TOKEN environment variable.</p> <code>''</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    map_style: str = \"mapbox://styles/mapbox/streets-v12\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    access_token: str = \"\",\n    **kwargs,\n):\n    \"\"\"Initialize Mapbox map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        map_style: Mapbox style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        access_token: Mapbox access token (required for Mapbox services).\n                     Get a free token at https://account.mapbox.com/access-tokens/\n                     Can also be set via MAPBOX_TOKEN environment variable.\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        map_style=map_style,\n        bearing=bearing,\n        pitch=pitch,\n        access_token=access_token,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_3d_buildings","title":"<code>add_3d_buildings(self, layer_id='3d-buildings')</code>","text":"<p>Add 3D buildings layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n    \"\"\"Add 3D buildings layer to the map.\"\"\"\n    # Add the layer for 3D buildings\n    layer_config = {\n        \"id\": layer_id,\n        \"source\": \"composite\",\n        \"source-layer\": \"building\",\n        \"filter\": [\"==\", \"extrude\", \"true\"],\n        \"type\": \"fill-extrusion\",\n        \"minzoom\": 15,\n        \"paint\": {\n            \"fill-extrusion-color\": \"#aaa\",\n            \"fill-extrusion-height\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"height\"],\n            ],\n            \"fill-extrusion-base\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"min_height\"],\n            ],\n            \"fill-extrusion-opacity\": 0.6,\n        },\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_control","title":"<code>add_control(self, control_type, position='top-right', options=None)</code>","text":"<p>Add a control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')</p> required <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the control</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def add_control(\n    self,\n    control_type: str,\n    position: str = \"top-right\",\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a control to the map.\n\n    Args:\n        control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        options: Additional options for the control\n    \"\"\"\n    control_options = options or {}\n    control_options[\"position\"] = position\n    self.call_js_method(\"addControl\", control_type, control_options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_raster_layer","title":"<code>add_raster_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_raster_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Mapbox access token.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Mapbox access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_fog","title":"<code>set_fog(self, fog_config=None)</code>","text":"<p>Set atmospheric fog on the map.</p> <p>Parameters:</p> Name Type Description Default <code>fog_config</code> <code>Optional[Dict[str, Any]]</code> <p>Fog configuration dict, or None to remove fog</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set atmospheric fog on the map.\n\n    Args:\n        fog_config: Fog configuration dict, or None to remove fog\n    \"\"\"\n    self.call_js_method(\"setFog\", fog_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.map_style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set 3D terrain on the map.</p> <p>Parameters:</p> Name Type Description Default <code>terrain_config</code> <code>Optional[Dict[str, Any]]</code> <p>Terrain configuration dict, or None to remove terrain</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set 3D terrain on the map.\n\n    Args:\n        terrain_config: Terrain configuration dict, or None to remove terrain\n    \"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap","title":"<code> PotreeMap            (MapWidget)         </code>","text":"<p>Potree point cloud viewer implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class PotreeMap(MapWidget):\n    \"\"\"Potree point cloud viewer implementation of the map widget.\"\"\"\n\n    # Potree-specific traits\n    point_cloud_url = traitlets.Unicode(\"\").tag(sync=True)\n    point_size = traitlets.Float(1.0).tag(sync=True)\n    point_size_type = traitlets.Unicode(\"adaptive\").tag(\n        sync=True\n    )  # \"fixed\", \"adaptive\", \"attenuation\"\n    point_shape = traitlets.Unicode(\"square\").tag(sync=True)  # \"square\", \"circle\"\n    min_node_size = traitlets.Float(100.0).tag(sync=True)\n    show_grid = traitlets.Bool(False).tag(sync=True)\n    grid_size = traitlets.Float(10.0).tag(sync=True)\n    grid_color = traitlets.Unicode(\"#aaaaaa\").tag(sync=True)\n    background_color = traitlets.Unicode(\"#000000\").tag(sync=True)\n    edl_enabled = traitlets.Bool(True).tag(sync=True)  # Eye Dome Lighting\n    edl_radius = traitlets.Float(1.0).tag(sync=True)\n    edl_strength = traitlets.Float(1.0).tag(sync=True)\n\n    # Camera controls\n    camera_position = traitlets.List([0.0, 0.0, 10.0]).tag(sync=True)\n    camera_target = traitlets.List([0.0, 0.0, 0.0]).tag(sync=True)\n    fov = traitlets.Float(60.0).tag(sync=True)\n    near_clip = traitlets.Float(0.1).tag(sync=True)\n    far_clip = traitlets.Float(1000.0).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"potree_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"potree_widget.css\"\n\n    def __init__(\n        self,\n        point_cloud_url: str = \"\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        point_size: float = 1.0,\n        point_size_type: str = \"adaptive\",\n        point_shape: str = \"square\",\n        camera_position: List[float] = [0.0, 0.0, 10.0],\n        camera_target: List[float] = [0.0, 0.0, 0.0],\n        fov: float = 60.0,\n        background_color: str = \"#000000\",\n        edl_enabled: bool = True,\n        show_grid: bool = False,\n        **kwargs,\n    ):\n        \"\"\"Initialize Potree map widget.\n\n        Args:\n            point_cloud_url: URL to the point cloud metadata.json file\n            width: Widget width\n            height: Widget height\n            point_size: Size of rendered points\n            point_size_type: How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")\n            point_shape: Shape of rendered points (\"square\", \"circle\")\n            camera_position: Initial camera position [x, y, z]\n            camera_target: Camera look-at target [x, y, z]\n            fov: Field of view in degrees\n            background_color: Background color of the viewer\n            edl_enabled: Enable Eye Dome Lighting for better depth perception\n            show_grid: Show coordinate grid\n        \"\"\"\n        super().__init__(\n            width=width,\n            height=height,\n            point_cloud_url=point_cloud_url,\n            point_size=point_size,\n            point_size_type=point_size_type,\n            point_shape=point_shape,\n            camera_position=camera_position,\n            camera_target=camera_target,\n            fov=fov,\n            background_color=background_color,\n            edl_enabled=edl_enabled,\n            show_grid=show_grid,\n            **kwargs,\n        )\n\n    def load_point_cloud(\n        self, point_cloud_url: str, point_cloud_name: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"Load a point cloud from URL.\n\n        Args:\n            point_cloud_url: URL to the point cloud metadata.json file\n            point_cloud_name: Optional name for the point cloud\n        \"\"\"\n        self.point_cloud_url = point_cloud_url\n        options = {\"url\": point_cloud_url}\n        if point_cloud_name:\n            options[\"name\"] = point_cloud_name\n        self.call_js_method(\"loadPointCloud\", options)\n\n    def set_point_size(self, size: float) -&gt; None:\n        \"\"\"Set the point size.\"\"\"\n        self.point_size = size\n\n    def set_point_size_type(self, size_type: str) -&gt; None:\n        \"\"\"Set the point size type.\n\n        Args:\n            size_type: \"fixed\", \"adaptive\", or \"attenuation\"\n        \"\"\"\n        if size_type not in [\"fixed\", \"adaptive\", \"attenuation\"]:\n            raise ValueError(\"size_type must be 'fixed', 'adaptive', or 'attenuation'\")\n        self.point_size_type = size_type\n\n    def set_point_shape(self, shape: str) -&gt; None:\n        \"\"\"Set the point shape.\n\n        Args:\n            shape: \"square\" or \"circle\"\n        \"\"\"\n        if shape not in [\"square\", \"circle\"]:\n            raise ValueError(\"shape must be 'square' or 'circle'\")\n        self.point_shape = shape\n\n    def set_camera_position(\n        self, position: List[float], target: Optional[List[float]] = None\n    ) -&gt; None:\n        \"\"\"Set camera position and optionally target.\n\n        Args:\n            position: Camera position [x, y, z]\n            target: Camera target [x, y, z] (optional)\n        \"\"\"\n        self.camera_position = position\n        if target:\n            self.camera_target = target\n\n    def fit_to_screen(self) -&gt; None:\n        \"\"\"Fit the point cloud to the screen.\"\"\"\n        self.call_js_method(\"fitToScreen\")\n\n    def enable_edl(self, enabled: bool = True) -&gt; None:\n        \"\"\"Enable or disable Eye Dome Lighting.\n\n        Args:\n            enabled: Whether to enable EDL\n        \"\"\"\n        self.edl_enabled = enabled\n\n    def set_edl_settings(self, radius: float = 1.0, strength: float = 1.0) -&gt; None:\n        \"\"\"Set Eye Dome Lighting parameters.\n\n        Args:\n            radius: EDL radius\n            strength: EDL strength\n        \"\"\"\n        self.edl_radius = radius\n        self.edl_strength = strength\n\n    def show_coordinate_grid(\n        self, show: bool = True, size: float = 10.0, color: str = \"#aaaaaa\"\n    ) -&gt; None:\n        \"\"\"Show or hide coordinate grid.\n\n        Args:\n            show: Whether to show the grid\n            size: Grid size\n            color: Grid color\n        \"\"\"\n        self.show_grid = show\n        self.grid_size = size\n        self.grid_color = color\n\n    def set_background_color(self, color: str) -&gt; None:\n        \"\"\"Set the background color.\n\n        Args:\n            color: Background color (hex format like \"#000000\")\n        \"\"\"\n        self.background_color = color\n\n    def clear_point_clouds(self) -&gt; None:\n        \"\"\"Clear all point clouds from the viewer.\"\"\"\n        self.call_js_method(\"clearPointClouds\")\n\n    def get_camera_position(self) -&gt; List[float]:\n        \"\"\"Get current camera position.\"\"\"\n        return list(self.camera_position)\n\n    def get_camera_target(self) -&gt; List[float]:\n        \"\"\"Get current camera target.\"\"\"\n        return list(self.camera_target)\n\n    def take_screenshot(self) -&gt; None:\n        \"\"\"Take a screenshot of the current view.\"\"\"\n        self.call_js_method(\"takeScreenshot\")\n\n    def set_fov(self, fov: float) -&gt; None:\n        \"\"\"Set field of view.\n\n        Args:\n            fov: Field of view in degrees\n        \"\"\"\n        self.fov = fov\n\n    def set_clip_distances(self, near: float, far: float) -&gt; None:\n        \"\"\"Set near and far clipping distances.\n\n        Args:\n            near: Near clipping distance\n            far: Far clipping distance\n        \"\"\"\n        self.near_clip = near\n        self.far_clip = far\n\n    def add_measurement(self, measurement_type: str = \"distance\") -&gt; None:\n        \"\"\"Add measurement tool.\n\n        Args:\n            measurement_type: Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")\n        \"\"\"\n        self.call_js_method(\"addMeasurement\", measurement_type)\n\n    def clear_measurements(self) -&gt; None:\n        \"\"\"Clear all measurements.\"\"\"\n        self.call_js_method(\"clearMeasurements\")\n\n    def set_quality(self, quality: str = \"medium\") -&gt; None:\n        \"\"\"Set rendering quality.\n\n        Args:\n            quality: Rendering quality (\"low\", \"medium\", \"high\")\n        \"\"\"\n        if quality not in [\"low\", \"medium\", \"high\"]:\n            raise ValueError(\"quality must be 'low', 'medium', or 'high'\")\n        self.call_js_method(\"setQuality\", quality)\n\n    def load_multiple_point_clouds(self, point_clouds: List[Dict[str, str]]) -&gt; None:\n        \"\"\"Load multiple point clouds.\n\n        Args:\n            point_clouds: List of point cloud configs with 'url' and optional 'name' keys\n        \"\"\"\n        self.call_js_method(\"loadMultiplePointClouds\", point_clouds)\n\n    def set_classification_visibility(self, classifications: Dict[int, bool]) -&gt; None:\n        \"\"\"Set visibility of point classifications.\n\n        Args:\n            classifications: Dict mapping classification codes to visibility\n        \"\"\"\n        self.call_js_method(\"setClassificationVisibility\", classifications)\n\n    def filter_by_elevation(\n        self,\n        min_elevation: Optional[float] = None,\n        max_elevation: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"Filter points by elevation.\n\n        Args:\n            min_elevation: Minimum elevation to show\n            max_elevation: Maximum elevation to show\n        \"\"\"\n        options = {}\n        if min_elevation is not None:\n            options[\"min\"] = min_elevation\n        if max_elevation is not None:\n            options[\"max\"] = max_elevation\n        self.call_js_method(\"filterByElevation\", options)\n\n    def clear_filters(self) -&gt; None:\n        \"\"\"Clear all filters.\"\"\"\n        self.call_js_method(\"clearFilters\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.__init__","title":"<code>__init__(self, point_cloud_url='', width='100%', height='600px', point_size=1.0, point_size_type='adaptive', point_shape='square', camera_position=[0.0, 0.0, 10.0], camera_target=[0.0, 0.0, 0.0], fov=60.0, background_color='#000000', edl_enabled=True, show_grid=False, **kwargs)</code>  <code>special</code>","text":"<p>Initialize Potree map widget.</p> <p>Parameters:</p> Name Type Description Default <code>point_cloud_url</code> <code>str</code> <p>URL to the point cloud metadata.json file</p> <code>''</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>point_size</code> <code>float</code> <p>Size of rendered points</p> <code>1.0</code> <code>point_size_type</code> <code>str</code> <p>How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")</p> <code>'adaptive'</code> <code>point_shape</code> <code>str</code> <p>Shape of rendered points (\"square\", \"circle\")</p> <code>'square'</code> <code>camera_position</code> <code>List[float]</code> <p>Initial camera position [x, y, z]</p> <code>[0.0, 0.0, 10.0]</code> <code>camera_target</code> <code>List[float]</code> <p>Camera look-at target [x, y, z]</p> <code>[0.0, 0.0, 0.0]</code> <code>fov</code> <code>float</code> <p>Field of view in degrees</p> <code>60.0</code> <code>background_color</code> <code>str</code> <p>Background color of the viewer</p> <code>'#000000'</code> <code>edl_enabled</code> <code>bool</code> <p>Enable Eye Dome Lighting for better depth perception</p> <code>True</code> <code>show_grid</code> <code>bool</code> <p>Show coordinate grid</p> <code>False</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    point_cloud_url: str = \"\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    point_size: float = 1.0,\n    point_size_type: str = \"adaptive\",\n    point_shape: str = \"square\",\n    camera_position: List[float] = [0.0, 0.0, 10.0],\n    camera_target: List[float] = [0.0, 0.0, 0.0],\n    fov: float = 60.0,\n    background_color: str = \"#000000\",\n    edl_enabled: bool = True,\n    show_grid: bool = False,\n    **kwargs,\n):\n    \"\"\"Initialize Potree map widget.\n\n    Args:\n        point_cloud_url: URL to the point cloud metadata.json file\n        width: Widget width\n        height: Widget height\n        point_size: Size of rendered points\n        point_size_type: How point size is calculated (\"fixed\", \"adaptive\", \"attenuation\")\n        point_shape: Shape of rendered points (\"square\", \"circle\")\n        camera_position: Initial camera position [x, y, z]\n        camera_target: Camera look-at target [x, y, z]\n        fov: Field of view in degrees\n        background_color: Background color of the viewer\n        edl_enabled: Enable Eye Dome Lighting for better depth perception\n        show_grid: Show coordinate grid\n    \"\"\"\n    super().__init__(\n        width=width,\n        height=height,\n        point_cloud_url=point_cloud_url,\n        point_size=point_size,\n        point_size_type=point_size_type,\n        point_shape=point_shape,\n        camera_position=camera_position,\n        camera_target=camera_target,\n        fov=fov,\n        background_color=background_color,\n        edl_enabled=edl_enabled,\n        show_grid=show_grid,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.add_measurement","title":"<code>add_measurement(self, measurement_type='distance')</code>","text":"<p>Add measurement tool.</p> <p>Parameters:</p> Name Type Description Default <code>measurement_type</code> <code>str</code> <p>Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")</p> <code>'distance'</code> Source code in <code>anymap/anymap.py</code> <pre><code>def add_measurement(self, measurement_type: str = \"distance\") -&gt; None:\n    \"\"\"Add measurement tool.\n\n    Args:\n        measurement_type: Type of measurement (\"distance\", \"area\", \"volume\", \"angle\")\n    \"\"\"\n    self.call_js_method(\"addMeasurement\", measurement_type)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.clear_filters","title":"<code>clear_filters(self)</code>","text":"<p>Clear all filters.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_filters(self) -&gt; None:\n    \"\"\"Clear all filters.\"\"\"\n    self.call_js_method(\"clearFilters\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.clear_measurements","title":"<code>clear_measurements(self)</code>","text":"<p>Clear all measurements.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_measurements(self) -&gt; None:\n    \"\"\"Clear all measurements.\"\"\"\n    self.call_js_method(\"clearMeasurements\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.clear_point_clouds","title":"<code>clear_point_clouds(self)</code>","text":"<p>Clear all point clouds from the viewer.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_point_clouds(self) -&gt; None:\n    \"\"\"Clear all point clouds from the viewer.\"\"\"\n    self.call_js_method(\"clearPointClouds\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.enable_edl","title":"<code>enable_edl(self, enabled=True)</code>","text":"<p>Enable or disable Eye Dome Lighting.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable EDL</p> <code>True</code> Source code in <code>anymap/anymap.py</code> <pre><code>def enable_edl(self, enabled: bool = True) -&gt; None:\n    \"\"\"Enable or disable Eye Dome Lighting.\n\n    Args:\n        enabled: Whether to enable EDL\n    \"\"\"\n    self.edl_enabled = enabled\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.filter_by_elevation","title":"<code>filter_by_elevation(self, min_elevation=None, max_elevation=None)</code>","text":"<p>Filter points by elevation.</p> <p>Parameters:</p> Name Type Description Default <code>min_elevation</code> <code>Optional[float]</code> <p>Minimum elevation to show</p> <code>None</code> <code>max_elevation</code> <code>Optional[float]</code> <p>Maximum elevation to show</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def filter_by_elevation(\n    self,\n    min_elevation: Optional[float] = None,\n    max_elevation: Optional[float] = None,\n) -&gt; None:\n    \"\"\"Filter points by elevation.\n\n    Args:\n        min_elevation: Minimum elevation to show\n        max_elevation: Maximum elevation to show\n    \"\"\"\n    options = {}\n    if min_elevation is not None:\n        options[\"min\"] = min_elevation\n    if max_elevation is not None:\n        options[\"max\"] = max_elevation\n    self.call_js_method(\"filterByElevation\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.fit_to_screen","title":"<code>fit_to_screen(self)</code>","text":"<p>Fit the point cloud to the screen.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_to_screen(self) -&gt; None:\n    \"\"\"Fit the point cloud to the screen.\"\"\"\n    self.call_js_method(\"fitToScreen\")\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.get_camera_position","title":"<code>get_camera_position(self)</code>","text":"<p>Get current camera position.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_camera_position(self) -&gt; List[float]:\n    \"\"\"Get current camera position.\"\"\"\n    return list(self.camera_position)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.get_camera_target","title":"<code>get_camera_target(self)</code>","text":"<p>Get current camera target.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_camera_target(self) -&gt; List[float]:\n    \"\"\"Get current camera target.\"\"\"\n    return list(self.camera_target)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.load_multiple_point_clouds","title":"<code>load_multiple_point_clouds(self, point_clouds)</code>","text":"<p>Load multiple point clouds.</p> <p>Parameters:</p> Name Type Description Default <code>point_clouds</code> <code>List[Dict[str, str]]</code> <p>List of point cloud configs with 'url' and optional 'name' keys</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def load_multiple_point_clouds(self, point_clouds: List[Dict[str, str]]) -&gt; None:\n    \"\"\"Load multiple point clouds.\n\n    Args:\n        point_clouds: List of point cloud configs with 'url' and optional 'name' keys\n    \"\"\"\n    self.call_js_method(\"loadMultiplePointClouds\", point_clouds)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.load_point_cloud","title":"<code>load_point_cloud(self, point_cloud_url, point_cloud_name=None)</code>","text":"<p>Load a point cloud from URL.</p> <p>Parameters:</p> Name Type Description Default <code>point_cloud_url</code> <code>str</code> <p>URL to the point cloud metadata.json file</p> required <code>point_cloud_name</code> <code>Optional[str]</code> <p>Optional name for the point cloud</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def load_point_cloud(\n    self, point_cloud_url: str, point_cloud_name: Optional[str] = None\n) -&gt; None:\n    \"\"\"Load a point cloud from URL.\n\n    Args:\n        point_cloud_url: URL to the point cloud metadata.json file\n        point_cloud_name: Optional name for the point cloud\n    \"\"\"\n    self.point_cloud_url = point_cloud_url\n    options = {\"url\": point_cloud_url}\n    if point_cloud_name:\n        options[\"name\"] = point_cloud_name\n    self.call_js_method(\"loadPointCloud\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_background_color","title":"<code>set_background_color(self, color)</code>","text":"<p>Set the background color.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str</code> <p>Background color (hex format like \"#000000\")</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_background_color(self, color: str) -&gt; None:\n    \"\"\"Set the background color.\n\n    Args:\n        color: Background color (hex format like \"#000000\")\n    \"\"\"\n    self.background_color = color\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_camera_position","title":"<code>set_camera_position(self, position, target=None)</code>","text":"<p>Set camera position and optionally target.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>List[float]</code> <p>Camera position [x, y, z]</p> required <code>target</code> <code>Optional[List[float]]</code> <p>Camera target [x, y, z] (optional)</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_camera_position(\n    self, position: List[float], target: Optional[List[float]] = None\n) -&gt; None:\n    \"\"\"Set camera position and optionally target.\n\n    Args:\n        position: Camera position [x, y, z]\n        target: Camera target [x, y, z] (optional)\n    \"\"\"\n    self.camera_position = position\n    if target:\n        self.camera_target = target\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_classification_visibility","title":"<code>set_classification_visibility(self, classifications)</code>","text":"<p>Set visibility of point classifications.</p> <p>Parameters:</p> Name Type Description Default <code>classifications</code> <code>Dict[int, bool]</code> <p>Dict mapping classification codes to visibility</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_classification_visibility(self, classifications: Dict[int, bool]) -&gt; None:\n    \"\"\"Set visibility of point classifications.\n\n    Args:\n        classifications: Dict mapping classification codes to visibility\n    \"\"\"\n    self.call_js_method(\"setClassificationVisibility\", classifications)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_clip_distances","title":"<code>set_clip_distances(self, near, far)</code>","text":"<p>Set near and far clipping distances.</p> <p>Parameters:</p> Name Type Description Default <code>near</code> <code>float</code> <p>Near clipping distance</p> required <code>far</code> <code>float</code> <p>Far clipping distance</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_clip_distances(self, near: float, far: float) -&gt; None:\n    \"\"\"Set near and far clipping distances.\n\n    Args:\n        near: Near clipping distance\n        far: Far clipping distance\n    \"\"\"\n    self.near_clip = near\n    self.far_clip = far\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_edl_settings","title":"<code>set_edl_settings(self, radius=1.0, strength=1.0)</code>","text":"<p>Set Eye Dome Lighting parameters.</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>float</code> <p>EDL radius</p> <code>1.0</code> <code>strength</code> <code>float</code> <p>EDL strength</p> <code>1.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_edl_settings(self, radius: float = 1.0, strength: float = 1.0) -&gt; None:\n    \"\"\"Set Eye Dome Lighting parameters.\n\n    Args:\n        radius: EDL radius\n        strength: EDL strength\n    \"\"\"\n    self.edl_radius = radius\n    self.edl_strength = strength\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_fov","title":"<code>set_fov(self, fov)</code>","text":"<p>Set field of view.</p> <p>Parameters:</p> Name Type Description Default <code>fov</code> <code>float</code> <p>Field of view in degrees</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_fov(self, fov: float) -&gt; None:\n    \"\"\"Set field of view.\n\n    Args:\n        fov: Field of view in degrees\n    \"\"\"\n    self.fov = fov\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_point_shape","title":"<code>set_point_shape(self, shape)</code>","text":"<p>Set the point shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>str</code> <p>\"square\" or \"circle\"</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_point_shape(self, shape: str) -&gt; None:\n    \"\"\"Set the point shape.\n\n    Args:\n        shape: \"square\" or \"circle\"\n    \"\"\"\n    if shape not in [\"square\", \"circle\"]:\n        raise ValueError(\"shape must be 'square' or 'circle'\")\n    self.point_shape = shape\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_point_size","title":"<code>set_point_size(self, size)</code>","text":"<p>Set the point size.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_point_size(self, size: float) -&gt; None:\n    \"\"\"Set the point size.\"\"\"\n    self.point_size = size\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_point_size_type","title":"<code>set_point_size_type(self, size_type)</code>","text":"<p>Set the point size type.</p> <p>Parameters:</p> Name Type Description Default <code>size_type</code> <code>str</code> <p>\"fixed\", \"adaptive\", or \"attenuation\"</p> required Source code in <code>anymap/anymap.py</code> <pre><code>def set_point_size_type(self, size_type: str) -&gt; None:\n    \"\"\"Set the point size type.\n\n    Args:\n        size_type: \"fixed\", \"adaptive\", or \"attenuation\"\n    \"\"\"\n    if size_type not in [\"fixed\", \"adaptive\", \"attenuation\"]:\n        raise ValueError(\"size_type must be 'fixed', 'adaptive', or 'attenuation'\")\n    self.point_size_type = size_type\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.set_quality","title":"<code>set_quality(self, quality='medium')</code>","text":"<p>Set rendering quality.</p> <p>Parameters:</p> Name Type Description Default <code>quality</code> <code>str</code> <p>Rendering quality (\"low\", \"medium\", \"high\")</p> <code>'medium'</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_quality(self, quality: str = \"medium\") -&gt; None:\n    \"\"\"Set rendering quality.\n\n    Args:\n        quality: Rendering quality (\"low\", \"medium\", \"high\")\n    \"\"\"\n    if quality not in [\"low\", \"medium\", \"high\"]:\n        raise ValueError(\"quality must be 'low', 'medium', or 'high'\")\n    self.call_js_method(\"setQuality\", quality)\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.show_coordinate_grid","title":"<code>show_coordinate_grid(self, show=True, size=10.0, color='#aaaaaa')</code>","text":"<p>Show or hide coordinate grid.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>Whether to show the grid</p> <code>True</code> <code>size</code> <code>float</code> <p>Grid size</p> <code>10.0</code> <code>color</code> <code>str</code> <p>Grid color</p> <code>'#aaaaaa'</code> Source code in <code>anymap/anymap.py</code> <pre><code>def show_coordinate_grid(\n    self, show: bool = True, size: float = 10.0, color: str = \"#aaaaaa\"\n) -&gt; None:\n    \"\"\"Show or hide coordinate grid.\n\n    Args:\n        show: Whether to show the grid\n        size: Grid size\n        color: Grid color\n    \"\"\"\n    self.show_grid = show\n    self.grid_size = size\n    self.grid_color = color\n</code></pre>"},{"location":"anymap/#anymap.anymap.PotreeMap.take_screenshot","title":"<code>take_screenshot(self)</code>","text":"<p>Take a screenshot of the current view.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def take_screenshot(self) -&gt; None:\n    \"\"\"Take a screenshot of the current view.\"\"\"\n    self.call_js_method(\"takeScreenshot\")\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#anymap.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>anymap/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/anymap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>anymap could always use more documentation, whether as part of the official anymap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/anymap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up anymap for local development.</p> <ol> <li> <p>Fork the anymap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/anymap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv anymap\n$ cd anymap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 anymap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/opengeos/anymap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install anymap, run this command in your terminal:</p> <pre><code>pip install anymap\n</code></pre> <p>This is the preferred method to install anymap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install anymap from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/opengeos/anymap\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use anymap in a project:</p> <pre><code>import anymap\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"}]}