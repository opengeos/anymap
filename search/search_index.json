{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AnyMap","text":"<p>A Python package for creating interactive maps with anywidget and JavaScript mapping libraries</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://anymap.gishub.org</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\uddfa\ufe0f Interactive Maps: Create beautiful, interactive maps in Jupyter notebooks</li> <li>\ud83d\udd04 Bidirectional Communication: Full Python \u2194 JavaScript communication</li> <li>\ud83d\udcf1 Multi-cell Support: Render maps in multiple notebook cells without conflicts</li> <li>\ud83c\udfaf MapLibre Integration: Built-in support for MapLibre GL JS</li> <li>\ud83d\udee0\ufe0f Extensible: Easy to add support for other mapping libraries</li> <li>\ud83d\ude80 Familiar API: Similar to ipyleaflet for easy migration</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install anymap\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a basic map\nm = MapLibreMap(\n    center=[37.7749, -122.4194],  # San Francisco\n    zoom=12,\n    height=\"600px\"\n)\nm\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#creating-maps","title":"Creating Maps","text":"<pre><code>from anymap import MapLibreMap\n\n# Create a map with custom settings\nm = MapLibreMap(\n    center=[40.7128, -74.0060],  # New York City\n    zoom=13,\n    height=\"500px\",\n    bearing=45,  # Map rotation\n    pitch=60     # 3D tilt\n)\n</code></pre>"},{"location":"#adding-markers","title":"Adding Markers","text":"<pre><code># Add a marker with popup\nm.add_marker(\n    lat=40.7128,\n    lng=-74.0060,\n    popup=\"&lt;h3&gt;New York City&lt;/h3&gt;&lt;p&gt;The Big Apple&lt;/p&gt;\"\n)\n</code></pre>"},{"location":"#working-with-geojson","title":"Working with GeoJSON","text":"<pre><code># Add GeoJSON data\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-74.0060, 40.7128]\n            },\n            \"properties\": {\"name\": \"NYC\"}\n        }\n    ]\n}\n\nm.add_geojson_layer(\n    layer_id=\"cities\",\n    geojson_data=geojson_data,\n    layer_type=\"circle\",\n    paint={\n        \"circle-radius\": 8,\n        \"circle-color\": \"#ff0000\"\n    }\n)\n</code></pre>"},{"location":"#event-handling","title":"Event Handling","text":"<pre><code>def handle_click(event):\n    lat, lng = event['lngLat']\n    print(f\"Clicked at: {lat:.4f}, {lng:.4f}\")\n\nm.on_map_event('click', handle_click)\n</code></pre>"},{"location":"#dynamic-updates","title":"Dynamic Updates","text":"<pre><code># Change map properties\nm.set_center(51.5074, -0.1278)  # London\nm.set_zoom(14)\n\n# Animate to a location\nm.fly_to(48.8566, 2.3522, zoom=15)  # Paris\n</code></pre>"},{"location":"#multi-cell-rendering","title":"Multi-Cell Rendering","text":"<p>AnyMap is designed to work seamlessly across multiple notebook cells:</p> <pre><code># Cell 1\nm = MapLibreMap(center=[0, 0], zoom=2)\nm\n\n# Cell 2 - Same map instance\nm.add_marker(0, 0, popup=\"Origin\")\n\n# Cell 3 - Display again\nm\n</code></pre>"},{"location":"#advanced-features","title":"Advanced Features","text":""},{"location":"#layer-management","title":"Layer Management","text":"<pre><code># Add and remove layers\nm.add_source(\"my-source\", {\n    \"type\": \"geojson\",\n    \"data\": geojson_data\n})\n\nm.add_layer(\"my-layer\", {\n    \"id\": \"my-layer\",\n    \"type\": \"circle\",\n    \"source\": \"my-source\",\n    \"paint\": {\"circle-radius\": 5}\n})\n\n# Remove layers\nm.remove_layer(\"my-layer\")\nm.remove_source(\"my-source\")\n</code></pre>"},{"location":"#custom-javascript-methods","title":"Custom JavaScript Methods","text":"<pre><code># Call any MapLibre GL JS method\nm.call_js_method('easeTo', {\n    'center': [lng, lat],\n    'zoom': 14,\n    'duration': 2000\n})\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Check out the example notebooks in the <code>examples/</code> directory:</p> <ul> <li><code>basic_usage.ipynb</code> - Basic map creation and interaction</li> <li><code>advanced_features.ipynb</code> - Advanced layer management and styling</li> <li><code>multi_cell_test.ipynb</code> - Multi-cell rendering tests</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To set up for development:</p> <pre><code>git clone https://github.com/opengeos/anymap.git\ncd anymap\npip install -e .\n</code></pre> <p>Run tests:</p> <pre><code>python -m unittest tests.test_anymap -v\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>\u2705 MapLibre GL JS backend</li> <li>\ud83d\udd32 Mapbox GL JS backend</li> <li>\ud83d\udd32 Leaflet backend</li> <li>\ud83d\udd32 Cesium backend</li> <li>\ud83d\udd32 Potree backend</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"anymap/","title":"anymap module","text":"<p>Main module for anymap interactive mapping widgets.</p>"},{"location":"anymap/#anymap.anymap.MapLibreMap","title":"<code> MapLibreMap            (MapWidget)         </code>","text":"<p>MapLibre GL JS implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapLibreMap(MapWidget):\n    \"\"\"MapLibre GL JS implementation of the map widget.\"\"\"\n\n    # MapLibre-specific traits\n    map_style = traitlets.Unicode(\"https://demotiles.maplibre.org/style.json\").tag(\n        sync=True\n    )\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"maplibre_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"maplibre_widget.css\"\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        map_style: str = \"https://demotiles.maplibre.org/style.json\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        **kwargs,\n    ):\n        \"\"\"Initialize MapLibre map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            map_style: MapLibre style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            map_style=map_style,\n            bearing=bearing,\n            pitch=pitch,\n            **kwargs,\n        )\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.map_style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def add_raster_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, map_style='https://demotiles.maplibre.org/style.json', width='100%', height='600px', bearing=0.0, pitch=0.0, **kwargs)</code>  <code>special</code>","text":"<p>Initialize MapLibre map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>map_style</code> <code>str</code> <p>MapLibre style URL or style object</p> <code>'https://demotiles.maplibre.org/style.json'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    map_style: str = \"https://demotiles.maplibre.org/style.json\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    **kwargs,\n):\n    \"\"\"Initialize MapLibre map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        map_style: MapLibre style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        map_style=map_style,\n        bearing=bearing,\n        pitch=pitch,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_raster_layer","title":"<code>add_raster_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_raster_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapLibreMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.map_style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget","title":"<code> MapWidget            (AnyWidget)         </code>","text":"<p>Base class for interactive map widgets using anywidget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapWidget(anywidget.AnyWidget):\n    \"\"\"Base class for interactive map widgets using anywidget.\"\"\"\n\n    # Widget traits for communication with JavaScript\n    center = traitlets.List([0.0, 0.0]).tag(sync=True)\n    zoom = traitlets.Float(2.0).tag(sync=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True)\n    style = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Communication traits\n    _js_calls = traitlets.List([]).tag(sync=True)\n    _js_events = traitlets.List([]).tag(sync=True)\n\n    # Internal state\n    _layers = traitlets.Dict({}).tag(sync=True)\n    _sources = traitlets.Dict({}).tag(sync=True)\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the map widget.\"\"\"\n        super().__init__(**kwargs)\n        self._event_handlers = {}\n        self._js_method_counter = 0\n\n    def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n        \"\"\"Call a JavaScript method on the map instance.\"\"\"\n        call_data = {\n            \"id\": self._js_method_counter,\n            \"method\": method_name,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n        self._js_method_counter += 1\n\n        # Trigger sync by creating new list\n        current_calls = list(self._js_calls)\n        current_calls.append(call_data)\n        self._js_calls = current_calls\n\n    def on_map_event(self, event_type: str, callback):\n        \"\"\"Register a callback for map events.\"\"\"\n        if event_type not in self._event_handlers:\n            self._event_handlers[event_type] = []\n        self._event_handlers[event_type].append(callback)\n\n    @traitlets.observe(\"_js_events\")\n    def _handle_js_events(self, change):\n        \"\"\"Handle events from JavaScript.\"\"\"\n        events = change[\"new\"]\n        for event in events:\n            event_type = event.get(\"type\")\n            if event_type in self._event_handlers:\n                for handler in self._event_handlers[event_type]:\n                    handler(event)\n\n    def set_center(self, lat: float, lng: float) -&gt; None:\n        \"\"\"Set the map center.\"\"\"\n        self.center = [lat, lng]\n\n    def set_zoom(self, zoom: float) -&gt; None:\n        \"\"\"Set the map zoom level.\"\"\"\n        self.zoom = zoom\n\n    def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n        \"\"\"Fly to a specific location.\"\"\"\n        options = {\"center\": [lat, lng]}\n        if zoom is not None:\n            options[\"zoom\"] = zoom\n        self.call_js_method(\"flyTo\", options)\n\n    def add_layer(self, layer_id: str, layer_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a layer to the map.\"\"\"\n        # Store layer in local state for persistence\n        current_layers = dict(self._layers)\n        current_layers[layer_id] = layer_config\n        self._layers = current_layers\n\n        self.call_js_method(\"addLayer\", layer_config, layer_id)\n\n    def remove_layer(self, layer_id: str) -&gt; None:\n        \"\"\"Remove a layer from the map.\"\"\"\n        # Remove from local state\n        current_layers = dict(self._layers)\n        if layer_id in current_layers:\n            del current_layers[layer_id]\n            self._layers = current_layers\n\n        self.call_js_method(\"removeLayer\", layer_id)\n\n    def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n        \"\"\"Add a data source to the map.\"\"\"\n        # Store source in local state for persistence\n        current_sources = dict(self._sources)\n        current_sources[source_id] = source_config\n        self._sources = current_sources\n\n        self.call_js_method(\"addSource\", source_id, source_config)\n\n    def remove_source(self, source_id: str) -&gt; None:\n        \"\"\"Remove a data source from the map.\"\"\"\n        # Remove from local state\n        current_sources = dict(self._sources)\n        if source_id in current_sources:\n            del current_sources[source_id]\n            self._sources = current_sources\n\n        self.call_js_method(\"removeSource\", source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the map widget.\"\"\"\n    super().__init__(**kwargs)\n    self._event_handlers = {}\n    self._js_method_counter = 0\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.add_layer","title":"<code>add_layer(self, layer_id, layer_config)</code>","text":"<p>Add a layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_layer(self, layer_id: str, layer_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a layer to the map.\"\"\"\n    # Store layer in local state for persistence\n    current_layers = dict(self._layers)\n    current_layers[layer_id] = layer_config\n    self._layers = current_layers\n\n    self.call_js_method(\"addLayer\", layer_config, layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.add_source","title":"<code>add_source(self, source_id, source_config)</code>","text":"<p>Add a data source to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_source(self, source_id: str, source_config: Dict[str, Any]) -&gt; None:\n    \"\"\"Add a data source to the map.\"\"\"\n    # Store source in local state for persistence\n    current_sources = dict(self._sources)\n    current_sources[source_id] = source_config\n    self._sources = current_sources\n\n    self.call_js_method(\"addSource\", source_id, source_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.call_js_method","title":"<code>call_js_method(self, method_name, *args, **kwargs)</code>","text":"<p>Call a JavaScript method on the map instance.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def call_js_method(self, method_name: str, *args, **kwargs) -&gt; None:\n    \"\"\"Call a JavaScript method on the map instance.\"\"\"\n    call_data = {\n        \"id\": self._js_method_counter,\n        \"method\": method_name,\n        \"args\": args,\n        \"kwargs\": kwargs,\n    }\n    self._js_method_counter += 1\n\n    # Trigger sync by creating new list\n    current_calls = list(self._js_calls)\n    current_calls.append(call_data)\n    self._js_calls = current_calls\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.fly_to","title":"<code>fly_to(self, lat, lng, zoom=None)</code>","text":"<p>Fly to a specific location.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fly_to(self, lat: float, lng: float, zoom: Optional[float] = None) -&gt; None:\n    \"\"\"Fly to a specific location.\"\"\"\n    options = {\"center\": [lat, lng]}\n    if zoom is not None:\n        options[\"zoom\"] = zoom\n    self.call_js_method(\"flyTo\", options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.on_map_event","title":"<code>on_map_event(self, event_type, callback)</code>","text":"<p>Register a callback for map events.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def on_map_event(self, event_type: str, callback):\n    \"\"\"Register a callback for map events.\"\"\"\n    if event_type not in self._event_handlers:\n        self._event_handlers[event_type] = []\n    self._event_handlers[event_type].append(callback)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.remove_layer","title":"<code>remove_layer(self, layer_id)</code>","text":"<p>Remove a layer from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_layer(self, layer_id: str) -&gt; None:\n    \"\"\"Remove a layer from the map.\"\"\"\n    # Remove from local state\n    current_layers = dict(self._layers)\n    if layer_id in current_layers:\n        del current_layers[layer_id]\n        self._layers = current_layers\n\n    self.call_js_method(\"removeLayer\", layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.remove_source","title":"<code>remove_source(self, source_id)</code>","text":"<p>Remove a data source from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def remove_source(self, source_id: str) -&gt; None:\n    \"\"\"Remove a data source from the map.\"\"\"\n    # Remove from local state\n    current_sources = dict(self._sources)\n    if source_id in current_sources:\n        del current_sources[source_id]\n        self._sources = current_sources\n\n    self.call_js_method(\"removeSource\", source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.set_center","title":"<code>set_center(self, lat, lng)</code>","text":"<p>Set the map center.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_center(self, lat: float, lng: float) -&gt; None:\n    \"\"\"Set the map center.\"\"\"\n    self.center = [lat, lng]\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapWidget.set_zoom","title":"<code>set_zoom(self, zoom)</code>","text":"<p>Set the map zoom level.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_zoom(self, zoom: float) -&gt; None:\n    \"\"\"Set the map zoom level.\"\"\"\n    self.zoom = zoom\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap","title":"<code> MapboxMap            (MapWidget)         </code>","text":"<p>Mapbox GL JS implementation of the map widget.</p> Source code in <code>anymap/anymap.py</code> <pre><code>class MapboxMap(MapWidget):\n    \"\"\"Mapbox GL JS implementation of the map widget.\"\"\"\n\n    # Mapbox-specific traits\n    map_style = traitlets.Unicode(\"mapbox://styles/mapbox/streets-v12\").tag(sync=True)\n    bearing = traitlets.Float(0.0).tag(sync=True)\n    pitch = traitlets.Float(0.0).tag(sync=True)\n    antialias = traitlets.Bool(True).tag(sync=True)\n    access_token = traitlets.Unicode(\"\").tag(sync=True)\n\n    # Define the JavaScript module path\n    _esm = pathlib.Path(__file__).parent / \"static\" / \"mapbox_widget.js\"\n    _css = pathlib.Path(__file__).parent / \"static\" / \"mapbox_widget.css\"\n\n    def __init__(\n        self,\n        center: List[float] = [0.0, 0.0],\n        zoom: float = 2.0,\n        map_style: str = \"mapbox://styles/mapbox/streets-v12\",\n        width: str = \"100%\",\n        height: str = \"600px\",\n        bearing: float = 0.0,\n        pitch: float = 0.0,\n        access_token: str = \"\",\n        **kwargs,\n    ):\n        \"\"\"Initialize Mapbox map widget.\n\n        Args:\n            center: Map center as [latitude, longitude]\n            zoom: Initial zoom level\n            map_style: Mapbox style URL or style object\n            width: Widget width\n            height: Widget height\n            bearing: Map bearing (rotation) in degrees\n            pitch: Map pitch (tilt) in degrees\n            access_token: Mapbox access token (required for Mapbox services).\n                         Get a free token at https://account.mapbox.com/access-tokens/\n                         Can also be set via MAPBOX_TOKEN environment variable.\n        \"\"\"\n        # Set default access token if not provided\n        if not access_token:\n            access_token = self._get_default_access_token()\n\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            width=width,\n            height=height,\n            map_style=map_style,\n            bearing=bearing,\n            pitch=pitch,\n            access_token=access_token,\n            **kwargs,\n        )\n\n    @staticmethod\n    def _get_default_access_token() -&gt; str:\n        \"\"\"Get default Mapbox access token from environment or return demo token.\"\"\"\n        import os\n\n        # Try to get from environment variable\n        token = os.environ.get(\"MAPBOX_TOKEN\") or os.environ.get(\"MAPBOX_ACCESS_TOKEN\")\n\n        # If no token found, return empty string - user must provide their own token\n        if not token:\n            import warnings\n\n            warnings.warn(\n                \"No Mapbox access token found. Please set MAPBOX_ACCESS_TOKEN environment variable \"\n                \"or pass access_token parameter. Get a free token at https://account.mapbox.com/access-tokens/\",\n                UserWarning,\n            )\n            token = \"\"\n\n        return token\n\n    def set_access_token(self, token: str) -&gt; None:\n        \"\"\"Set the Mapbox access token.\"\"\"\n        self.access_token = token\n\n    def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n        \"\"\"Set the map style.\"\"\"\n        if isinstance(style, str):\n            self.map_style = style\n        else:\n            self.call_js_method(\"setStyle\", style)\n\n    def set_bearing(self, bearing: float) -&gt; None:\n        \"\"\"Set the map bearing (rotation).\"\"\"\n        self.bearing = bearing\n\n    def set_pitch(self, pitch: float) -&gt; None:\n        \"\"\"Set the map pitch (tilt).\"\"\"\n        self.pitch = pitch\n\n    def add_geojson_layer(\n        self,\n        layer_id: str,\n        geojson_data: Dict[str, Any],\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add source\n        self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n        # Add layer\n        layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n        \"\"\"Add a marker to the map.\"\"\"\n        marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n        self.call_js_method(\"addMarker\", marker_data)\n\n    def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n        \"\"\"Fit the map to given bounds.\"\"\"\n        self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n\n    def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all layers currently on the map.\"\"\"\n        return dict(self._layers)\n\n    def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n        \"\"\"Get all sources currently on the map.\"\"\"\n        return dict(self._sources)\n\n    def clear_layers(self) -&gt; None:\n        \"\"\"Remove all layers from the map.\"\"\"\n        for layer_id in list(self._layers.keys()):\n            self.remove_layer(layer_id)\n\n    def clear_sources(self) -&gt; None:\n        \"\"\"Remove all sources from the map.\"\"\"\n        for source_id in list(self._sources.keys()):\n            self.remove_source(source_id)\n\n    def clear_all(self) -&gt; None:\n        \"\"\"Clear all layers and sources from the map.\"\"\"\n        self.clear_layers()\n        self.clear_sources()\n\n    def add_raster_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a raster layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add raster source\n        self.add_source(\n            source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n        )\n\n        # Add raster layer\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_vector_layer(\n        self,\n        layer_id: str,\n        source_url: str,\n        source_layer: str,\n        layer_type: str = \"fill\",\n        paint: Optional[Dict[str, Any]] = None,\n        layout: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a vector tile layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add vector source\n        self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n        # Add vector layer\n        layer_config = {\n            \"id\": layer_id,\n            \"type\": layer_type,\n            \"source\": source_id,\n            \"source-layer\": source_layer,\n        }\n\n        if paint:\n            layer_config[\"paint\"] = paint\n        if layout:\n            layer_config[\"layout\"] = layout\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_image_layer(\n        self,\n        layer_id: str,\n        image_url: str,\n        coordinates: List[List[float]],\n        paint: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add an image layer to the map.\"\"\"\n        source_id = f\"{layer_id}_source\"\n\n        # Add image source\n        self.add_source(\n            source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n        )\n\n        # Add raster layer for the image\n        layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n        if paint:\n            layer_config[\"paint\"] = paint\n\n        self.add_layer(layer_id, layer_config)\n\n    def add_control(\n        self,\n        control_type: str,\n        position: str = \"top-right\",\n        options: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Add a control to the map.\n\n        Args:\n            control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n            position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n            options: Additional options for the control\n        \"\"\"\n        control_options = options or {}\n        control_options[\"position\"] = position\n        self.call_js_method(\"addControl\", control_type, control_options)\n\n    def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set 3D terrain on the map.\n\n        Args:\n            terrain_config: Terrain configuration dict, or None to remove terrain\n        \"\"\"\n        self.call_js_method(\"setTerrain\", terrain_config)\n\n    def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Set atmospheric fog on the map.\n\n        Args:\n            fog_config: Fog configuration dict, or None to remove fog\n        \"\"\"\n        self.call_js_method(\"setFog\", fog_config)\n\n    def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n        \"\"\"Add 3D buildings layer to the map.\"\"\"\n        # Add the layer for 3D buildings\n        layer_config = {\n            \"id\": layer_id,\n            \"source\": \"composite\",\n            \"source-layer\": \"building\",\n            \"filter\": [\"==\", \"extrude\", \"true\"],\n            \"type\": \"fill-extrusion\",\n            \"minzoom\": 15,\n            \"paint\": {\n                \"fill-extrusion-color\": \"#aaa\",\n                \"fill-extrusion-height\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"height\"],\n                ],\n                \"fill-extrusion-base\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    15,\n                    0,\n                    15.05,\n                    [\"get\", \"min_height\"],\n                ],\n                \"fill-extrusion-opacity\": 0.6,\n            },\n        }\n        self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.__init__","title":"<code>__init__(self, center=[0.0, 0.0], zoom=2.0, map_style='mapbox://styles/mapbox/streets-v12', width='100%', height='600px', bearing=0.0, pitch=0.0, access_token='', **kwargs)</code>  <code>special</code>","text":"<p>Initialize Mapbox map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>List[float]</code> <p>Map center as [latitude, longitude]</p> <code>[0.0, 0.0]</code> <code>zoom</code> <code>float</code> <p>Initial zoom level</p> <code>2.0</code> <code>map_style</code> <code>str</code> <p>Mapbox style URL or style object</p> <code>'mapbox://styles/mapbox/streets-v12'</code> <code>width</code> <code>str</code> <p>Widget width</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>Widget height</p> <code>'600px'</code> <code>bearing</code> <code>float</code> <p>Map bearing (rotation) in degrees</p> <code>0.0</code> <code>pitch</code> <code>float</code> <p>Map pitch (tilt) in degrees</p> <code>0.0</code> <code>access_token</code> <code>str</code> <p>Mapbox access token (required for Mapbox services).          Get a free token at https://account.mapbox.com/access-tokens/          Can also be set via MAPBOX_TOKEN environment variable.</p> <code>''</code> Source code in <code>anymap/anymap.py</code> <pre><code>def __init__(\n    self,\n    center: List[float] = [0.0, 0.0],\n    zoom: float = 2.0,\n    map_style: str = \"mapbox://styles/mapbox/streets-v12\",\n    width: str = \"100%\",\n    height: str = \"600px\",\n    bearing: float = 0.0,\n    pitch: float = 0.0,\n    access_token: str = \"\",\n    **kwargs,\n):\n    \"\"\"Initialize Mapbox map widget.\n\n    Args:\n        center: Map center as [latitude, longitude]\n        zoom: Initial zoom level\n        map_style: Mapbox style URL or style object\n        width: Widget width\n        height: Widget height\n        bearing: Map bearing (rotation) in degrees\n        pitch: Map pitch (tilt) in degrees\n        access_token: Mapbox access token (required for Mapbox services).\n                     Get a free token at https://account.mapbox.com/access-tokens/\n                     Can also be set via MAPBOX_TOKEN environment variable.\n    \"\"\"\n    # Set default access token if not provided\n    if not access_token:\n        access_token = self._get_default_access_token()\n\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        width=width,\n        height=height,\n        map_style=map_style,\n        bearing=bearing,\n        pitch=pitch,\n        access_token=access_token,\n        **kwargs,\n    )\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_3d_buildings","title":"<code>add_3d_buildings(self, layer_id='3d-buildings')</code>","text":"<p>Add 3D buildings layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_3d_buildings(self, layer_id: str = \"3d-buildings\") -&gt; None:\n    \"\"\"Add 3D buildings layer to the map.\"\"\"\n    # Add the layer for 3D buildings\n    layer_config = {\n        \"id\": layer_id,\n        \"source\": \"composite\",\n        \"source-layer\": \"building\",\n        \"filter\": [\"==\", \"extrude\", \"true\"],\n        \"type\": \"fill-extrusion\",\n        \"minzoom\": 15,\n        \"paint\": {\n            \"fill-extrusion-color\": \"#aaa\",\n            \"fill-extrusion-height\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"height\"],\n            ],\n            \"fill-extrusion-base\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                15,\n                0,\n                15.05,\n                [\"get\", \"min_height\"],\n            ],\n            \"fill-extrusion-opacity\": 0.6,\n        },\n    }\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_control","title":"<code>add_control(self, control_type, position='top-right', options=None)</code>","text":"<p>Add a control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')</p> required <code>position</code> <code>str</code> <p>Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')</p> <code>'top-right'</code> <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Additional options for the control</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def add_control(\n    self,\n    control_type: str,\n    position: str = \"top-right\",\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a control to the map.\n\n    Args:\n        control_type: Type of control ('navigation', 'scale', 'fullscreen', 'geolocate')\n        position: Position on map ('top-left', 'top-right', 'bottom-left', 'bottom-right')\n        options: Additional options for the control\n    \"\"\"\n    control_options = options or {}\n    control_options[\"position\"] = position\n    self.call_js_method(\"addControl\", control_type, control_options)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_geojson_layer","title":"<code>add_geojson_layer(self, layer_id, geojson_data, layer_type='fill', paint=None)</code>","text":"<p>Add a GeoJSON layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_geojson_layer(\n    self,\n    layer_id: str,\n    geojson_data: Dict[str, Any],\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add source\n    self.add_source(source_id, {\"type\": \"geojson\", \"data\": geojson_data})\n\n    # Add layer\n    layer_config = {\"id\": layer_id, \"type\": layer_type, \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_image_layer","title":"<code>add_image_layer(self, layer_id, image_url, coordinates, paint=None)</code>","text":"<p>Add an image layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_image_layer(\n    self,\n    layer_id: str,\n    image_url: str,\n    coordinates: List[List[float]],\n    paint: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add an image layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add image source\n    self.add_source(\n        source_id, {\"type\": \"image\", \"url\": image_url, \"coordinates\": coordinates}\n    )\n\n    # Add raster layer for the image\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_marker","title":"<code>add_marker(self, lat, lng, popup=None)</code>","text":"<p>Add a marker to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_marker(self, lat: float, lng: float, popup: Optional[str] = None) -&gt; None:\n    \"\"\"Add a marker to the map.\"\"\"\n    marker_data = {\"coordinates\": [lng, lat], \"popup\": popup}\n    self.call_js_method(\"addMarker\", marker_data)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_raster_layer","title":"<code>add_raster_layer(self, layer_id, source_url, paint=None, layout=None)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_raster_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a raster layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add raster source\n    self.add_source(\n        source_id, {\"type\": \"raster\", \"url\": source_url, \"tileSize\": 256}\n    )\n\n    # Add raster layer\n    layer_config = {\"id\": layer_id, \"type\": \"raster\", \"source\": source_id}\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.add_vector_layer","title":"<code>add_vector_layer(self, layer_id, source_url, source_layer, layer_type='fill', paint=None, layout=None)</code>","text":"<p>Add a vector tile layer to the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def add_vector_layer(\n    self,\n    layer_id: str,\n    source_url: str,\n    source_layer: str,\n    layer_type: str = \"fill\",\n    paint: Optional[Dict[str, Any]] = None,\n    layout: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a vector tile layer to the map.\"\"\"\n    source_id = f\"{layer_id}_source\"\n\n    # Add vector source\n    self.add_source(source_id, {\"type\": \"vector\", \"url\": source_url})\n\n    # Add vector layer\n    layer_config = {\n        \"id\": layer_id,\n        \"type\": layer_type,\n        \"source\": source_id,\n        \"source-layer\": source_layer,\n    }\n\n    if paint:\n        layer_config[\"paint\"] = paint\n    if layout:\n        layer_config[\"layout\"] = layout\n\n    self.add_layer(layer_id, layer_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_all","title":"<code>clear_all(self)</code>","text":"<p>Clear all layers and sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_all(self) -&gt; None:\n    \"\"\"Clear all layers and sources from the map.\"\"\"\n    self.clear_layers()\n    self.clear_sources()\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_layers","title":"<code>clear_layers(self)</code>","text":"<p>Remove all layers from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_layers(self) -&gt; None:\n    \"\"\"Remove all layers from the map.\"\"\"\n    for layer_id in list(self._layers.keys()):\n        self.remove_layer(layer_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.clear_sources","title":"<code>clear_sources(self)</code>","text":"<p>Remove all sources from the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def clear_sources(self) -&gt; None:\n    \"\"\"Remove all sources from the map.\"\"\"\n    for source_id in list(self._sources.keys()):\n        self.remove_source(source_id)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.fit_bounds","title":"<code>fit_bounds(self, bounds, padding=50)</code>","text":"<p>Fit the map to given bounds.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def fit_bounds(self, bounds: List[List[float]], padding: int = 50) -&gt; None:\n    \"\"\"Fit the map to given bounds.\"\"\"\n    self.call_js_method(\"fitBounds\", bounds, {\"padding\": padding})\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.get_layers","title":"<code>get_layers(self)</code>","text":"<p>Get all layers currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_layers(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all layers currently on the map.\"\"\"\n    return dict(self._layers)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.get_sources","title":"<code>get_sources(self)</code>","text":"<p>Get all sources currently on the map.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def get_sources(self) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"Get all sources currently on the map.\"\"\"\n    return dict(self._sources)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_access_token","title":"<code>set_access_token(self, token)</code>","text":"<p>Set the Mapbox access token.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_access_token(self, token: str) -&gt; None:\n    \"\"\"Set the Mapbox access token.\"\"\"\n    self.access_token = token\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_bearing","title":"<code>set_bearing(self, bearing)</code>","text":"<p>Set the map bearing (rotation).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_bearing(self, bearing: float) -&gt; None:\n    \"\"\"Set the map bearing (rotation).\"\"\"\n    self.bearing = bearing\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_fog","title":"<code>set_fog(self, fog_config=None)</code>","text":"<p>Set atmospheric fog on the map.</p> <p>Parameters:</p> Name Type Description Default <code>fog_config</code> <code>Optional[Dict[str, Any]]</code> <p>Fog configuration dict, or None to remove fog</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_fog(self, fog_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set atmospheric fog on the map.\n\n    Args:\n        fog_config: Fog configuration dict, or None to remove fog\n    \"\"\"\n    self.call_js_method(\"setFog\", fog_config)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_pitch","title":"<code>set_pitch(self, pitch)</code>","text":"<p>Set the map pitch (tilt).</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_pitch(self, pitch: float) -&gt; None:\n    \"\"\"Set the map pitch (tilt).\"\"\"\n    self.pitch = pitch\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_style","title":"<code>set_style(self, style)</code>","text":"<p>Set the map style.</p> Source code in <code>anymap/anymap.py</code> <pre><code>def set_style(self, style: Union[str, Dict[str, Any]]) -&gt; None:\n    \"\"\"Set the map style.\"\"\"\n    if isinstance(style, str):\n        self.map_style = style\n    else:\n        self.call_js_method(\"setStyle\", style)\n</code></pre>"},{"location":"anymap/#anymap.anymap.MapboxMap.set_terrain","title":"<code>set_terrain(self, terrain_config=None)</code>","text":"<p>Set 3D terrain on the map.</p> <p>Parameters:</p> Name Type Description Default <code>terrain_config</code> <code>Optional[Dict[str, Any]]</code> <p>Terrain configuration dict, or None to remove terrain</p> <code>None</code> Source code in <code>anymap/anymap.py</code> <pre><code>def set_terrain(self, terrain_config: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Set 3D terrain on the map.\n\n    Args:\n        terrain_config: Terrain configuration dict, or None to remove terrain\n    \"\"\"\n    self.call_js_method(\"setTerrain\", terrain_config)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#anymap.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>anymap/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/anymap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>anymap could always use more documentation, whether as part of the official anymap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/anymap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up anymap for local development.</p> <ol> <li> <p>Fork the anymap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/anymap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv anymap\n$ cd anymap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 anymap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/opengeos/anymap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install anymap, run this command in your terminal:</p> <pre><code>pip install anymap\n</code></pre> <p>This is the preferred method to install anymap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install anymap from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/opengeos/anymap\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use anymap in a project:</p> <pre><code>import anymap\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"}]}